{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","routes/safe/components/Transactions/helpers/utils.ts","logic/hooks/useEstimateTransactionGas.tsx","logic/hooks/useCanTxExecute.tsx","routes/safe/components/Transactions/helpers/TxParametersDetail/index.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/style.ts","routes/safe/components/Transactions/helpers/EditTxParametersForm/index.tsx","routes/safe/components/Transactions/helpers/EditableTxParameters.tsx","components/TransactionFailText/index.tsx","components/TransactionsFees/index.tsx","components/ReviewInfoText/index.tsx","components/ExecuteCheckbox/index.tsx","logic/hooks/useEstimationStatus.tsx","assets/icons/info_red.svg","logic/hooks/useGetRecommendedNonce.tsx","routes/safe/container/hooks/useTransactionParameters.ts","routes/safe/components/Transactions/helpers/useSafeTxGas.ts"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","submitting","validating","form","validate","areEthereumParamsVisible","parametersStatus","areSafeParamsEnabled","ethereumTxParametersTitle","isExecution","getInteractionTitle","Number","symbol","getNativeCurrency","isSpendingLimit","txType","sameString","EstimationStatus","DEFAULT_MAX_GAS_FEE","String","DEFAULT_MAX_PRIO_FEE","checkIfTxIsApproveAndExecution","threshold","txConfirmations","preApprovingOwner","checkIfTxIsCreation","getDefaultGasEstimation","txEstimationExecutionStatus","gasPrice","gasPriceFormatted","gasMaxPrioFee","gasMaxPrioFeeFormatted","isCreation","isOffChainSignature","gasEstimation","gasCost","gasCostFormatted","gasLimit","calculateTotalGasCost","decimals","totalPricePerGas","parseFloat","estimatedGasCosts","parseInt","fromTokenUnit","formatAmount","useEstimateTransactionGas","txRecipient","txData","txAmount","operation","safeTxGas","manualGasPrice","manualMaxPrioFee","manualGasLimit","manualSafeNonce","useState","LOADING","setGasEstimation","nativeCurrency","useSelector","currentSafe","address","safeAddress","currentVersion","safeVersion","providerSelector","from","account","smartContractWallet","providerName","canTxExecute","useCanTxExecute","size","useEffect","estimateGas","a","length","checkIfOffChainSignatureIsPossible","SUCCESS","fromWei","approvalAndExecution","safeTxGasEstimation","ethGasLimitEstimation","transactionCallSuccess","estimateSafeTxGas","Operation","CALL","estimateTransactionGasLimit","toWei","calculateGasPrice","isMaxFeeParam","toString","checkTransactionExecution","gasToken","ZERO_ADDRESS","refundReceiver","FAILURE","console","warn","message","calculateCanTxExecute","currentSafeNonce","recommendedNonce","extractSafeAddress","useGetRecommendedNonce","nonce","TxParameterWrapper","styled","div","AccordionDetailsWrapper","StyledText","Text","ColoredText","isOutOfOrder","theme","colors","color","StyledButtonLink","ButtonLink","TxParametersDetail","onEdit","txParameters","compact","isTransactionCreation","isTransactionExecution","currentSafeThreshold","defaultParameterStatus","isTxNonceOutOfOrder","setIsTxNonceOutOfOrder","isAccordionExpanded","setIsAccordionExpanded","safeNonce","safeNonceNumber","lastQueuedTxNonce","getLastTxNonce","showSafeTxGas","useSafeTxGas","isNaN","expanded","ethNonce","ethGasLimit","ethGasPrice","ethMaxPrioFee","textSize","onClick","styles","heading","md","justifyContent","boxSizing","height","annotation","letterSpacing","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","container","amount","sm","buttonRow","alignItems","gap","StyledDivider","Divider","StyledDividerFooter","SafeOptions","EthereumOptions","StyledLink","Link","StyledTextMt","formValidation","values","minValue","EditTxParametersForm","onClose","onCloseFormHandler","Row","align","grow","withoutMargin","IconButton","disableRipple","Block","strong","Field","defaultValue","placeholder","type","min","component","disabled","gasPriceText","href","target","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","EditableTxParameters","closeEditModalCallback","isEditMode","toggleEditMode","useManualValues","setUseManualValues","useTransactionParameters","parameterStatus","initialEthGasLimit","initialEthGasPrice","initialEthMaxPrioFee","initialSafeNonce","initialSafeTxGas","setEthGasPrice","setEthGasLimit","setEthMaxPrioFee","setSafeNonce","setSafeTxGas","setEthNonce","toggleStatus","prev","executionWarningRow","display","warningIcon","TransactionFailText","isWrongChain","shouldSwitchWalletChain","isGranted","grantedSelector","errorDesc","Paragraph","Img","alt","src","InfoIcon","TransactionFees","transactionAction","as","ReviewInfoTextWrapper","background","ReviewInfoText","txParamsSafeNonce","lastTxNonce","storeNextNonce","setRecommendedNonce","fetchRecommendedNonce","getRecommendedNonce","transactionsToGo","warningMessage","ExecuteCheckbox","margin","noMargin","control","defaultChecked","e","checked","label","useEstimationStatus","txEstimationStatus","ButtonStatus","DISABLED","buttonStatus","setButtonStatus","mounted","READY","isCurrent","isCancelTransaction","connectedWalletAddress","userAccountSelector","currentSafeCurrentVersion","state","ethGasPriceInGWei","setEthGasPriceInGWei","ethMaxPrioFeeInGWei","setEthMaxPrioFeeInGWei","getNonce","getUserNonce","res","getSafeNonce","logError","Errors","_616","hasFeature","FEATURES","SAFE_TX_GAS_OPTIONAL"],"mappings":"8IAIeA,IAFE,SAACC,GAAD,OAAoC,cAAC,IAAD,eAAWA,M,qMCI1DC,EAAgB,CACpBC,SAAU,SACVC,MAAO,QAYHC,EAAYC,aATH,kBACbC,YAAa,CACXC,KAAM,CACJC,WAAYC,KACZC,cAAe,OACfC,WAAY,QAoFHC,IAnDG,SAACZ,GACjB,MASIA,EARFa,MAASC,EADX,EACWA,KAAMC,EADjB,EACiBA,SAAUC,EAD3B,EAC2BA,MAAUC,EADrC,iBAEEC,EAOElB,EAPFkB,eACAC,EAMEnB,EANFmB,KACAC,EAKEpB,EALFoB,UACAC,EAIErB,EAJFqB,KACAC,EAGEtB,EAHFsB,OACAC,EAEEvB,EAFFuB,KACGC,EARL,YASIxB,EATJ,GAUMyB,EAAUrB,IACVsB,EAAaV,EAAQO,OAAOI,EAC5BC,GAAaT,EAAKU,UAAYV,EAAKW,YAAcX,EAAKY,MACtDC,IAAab,EAAKc,QAAWd,EAAKe,2BAA6Bf,EAAKgB,YACpEC,EAAejB,EAAKc,OAASd,EAAKgB,YAClCE,GAAoClB,EAAKmB,SAAWnB,EAAKW,WAAaX,EAAKU,SAC3EU,EAA8C,qBAAfpB,EAAKc,QAAgCd,EAAKU,QAEzEW,EAAmBH,GAAoCE,EAEvDE,EAAYf,EAAaD,EAAQlB,KAAO,GACxCmC,EAAgBvB,EAAKY,MAAQ,UAAYC,GAAYJ,EAAY,YAAc,GAC/Ee,EAAU,2BACX1B,GADW,IAEd2B,aAAc,MACd,cAAetB,IAEXuB,EAAc,2BACf3B,GADe,IAElB4B,UAAU,GAAD,OAAKL,EAAL,YAAkBC,GAC3BF,iBAAkBA,IAGpB,OACE,cAAC,IAAD,aACEP,MAAOD,GAAYJ,EACnBF,WAAYM,GAAYJ,EAAYQ,EAAeV,GAAc,IACjEiB,WAAYA,EACZI,WAAYF,EACZzB,UAAWA,EACXN,KAAMA,EACNC,SAAUA,EACVM,KAAMA,EACN2B,MAAO/C,EACPe,MAAOA,GACHQ,M,kFC5FJyB,EAAgB,SAACC,GAAD,MAAc,CAClCA,QAAQ,KAAD,OAAOA,EAAP,KACPC,cAAe,SACfC,KAAM,aA6BOC,IA1BC,SAAC,GAAD,IACdC,EADc,EACdA,SACAC,EAFc,EAEdA,WACAC,EAHc,EAGdA,aACAC,EAJc,EAIdA,cACAC,EALc,EAKdA,SALc,IAMdR,eANc,MAMJ,EANI,EAOdS,EAPc,EAOdA,aAPc,IAQdrC,cARc,MAQL,GARK,EASdsC,EATc,EASdA,WATc,OAWd,cAAC,IAAD,CACEL,WAAYA,EACZE,cAAeA,EACfI,SAAUL,EACVE,SAAUA,EACVI,OAAQ,gBAAGC,EAAH,EAAGA,aAAiBvC,EAApB,wBACN,sBAAM,cAAaF,EAAQoC,SAAUK,EAAcf,MAAOC,EAAcC,GAAxE,SACGI,EAAS9B,EAAKwC,WAAYxC,EAAKyC,WAAYzC,EAAMA,EAAK0C,KAAKL,aAGhEF,aAAcA,EACdQ,SAAUP,M,kCC/Bd,+LAKaQ,EAA2B,SAACC,GACvC,MACuB,YAArBA,GAAwD,eAArBA,GAA0D,uBAArBA,GAI/DC,EAAuB,SAACD,GACnC,MACuB,YAArBA,GACsB,kBAArBA,GAA6D,uBAArBA,GAIhCE,EAA4B,SAACC,GACxC,MAAM,qBAAN,OAA4BA,EAAc,cAAgB,wBAG/CC,EAAsB,SAACzD,GAClC,GAAsB,IAAlB0D,OAAO1D,GACT,MAAO,iBAGT,IAAQ2D,EAAWC,cAAXD,OACR,MAAM,2BAAN,OAAkC3D,EAAlC,YAA2C2D,EAA3C,UAGWE,EAAkB,SAACC,GAAD,OAA8BC,YAAWD,EAAQ,mB,0GCPpEE,E,yKAAAA,K,kBAAAA,E,kBAAAA,E,mBAAAA,M,KAMZ,IAAMC,EAAsBC,OAAO,MAC7BC,EAAuBD,OAAO,MAEvBE,EAAiC,SAC5CC,EACAC,EACAR,EACAS,GAEA,OAAIA,EACKD,EAAkB,IAAMD,GAAaR,YAAgBC,GAGzC,IAAdO,GAGIG,EAAsB,SAACF,EAAyBR,GAA1B,OACb,IAApBQ,IAA0BT,YAAgBC,IAyCtCW,EAA0B,SAAC,GAQkC,IAPjEC,EAOgE,EAPhEA,4BACAC,EAMgE,EANhEA,SACAC,EAKgE,EALhEA,kBACAC,EAIgE,EAJhEA,cACAC,EAGgE,EAHhEA,uBAGgE,IAFhEC,kBAEgE,aADhEC,oBAEA,MAAO,CACLN,8BACAO,cAAe,IACfC,QAAS,IACTC,iBAAkB,UAClBR,WACAC,oBACAC,gBACAC,yBACAM,SAAU,IACVL,aACAC,yBAZ8D,WAgBrDK,EAAwB,SACnCD,EACAT,EACAE,EACAS,GAEA,IAAMC,EAAmBC,WAAWb,GAAYa,WAAWX,GAAiB,KACtEY,EAAoBC,SAASN,EAAU,IAAMG,EAC7CL,EAAUS,YAAcF,EAAmBH,GAEjD,MAAO,CAACJ,EADiBU,YAAaV,KAI3BW,EAA4B,SAAC,GAc6B,IAAD,EAbpEC,EAaoE,EAbpEA,YACAC,EAYoE,EAZpEA,OACAzB,EAWoE,EAXpEA,gBACA0B,EAUoE,EAVpEA,SACAzB,EASoE,EATpEA,kBACA0B,EAQoE,EARpEA,UACAC,EAOoE,EAPpEA,UACApC,EAMoE,EANpEA,OACAqC,EAKoE,EALpEA,eACAC,EAIoE,EAJpEA,iBACAC,EAGoE,EAHpEA,eACAC,EAEoE,EAFpEA,gBACA9C,EACoE,EADpEA,YAEA,EAA0C+C,mBACxC9B,EAAwB,CACtBC,4BAA6BV,EAAiBwC,QAC9C7B,SAAU,IACVC,kBAAmB,IACnBC,cAAe,IACfC,uBAAwB,OAN5B,mBAAOG,EAAP,KAAsBwB,EAAtB,KASMC,EAAiB9C,cACvB,YAAuF+C,YAAYC,YAAnG,QAAmH,GAAnH,IAAQC,QAASC,OAAjB,MAA+B,GAA/B,MAAmCzC,iBAAnC,MAA+C,EAA/C,MAAkD0C,eAAgBC,OAAlE,MAAgF,GAAhF,EACA,EAAmEL,YAAYM,KAA9DC,EAAjB,EAAQC,QAAeC,EAAvB,EAAuBA,oBAA2BC,EAAlD,EAA4CvH,KAEtCwH,EAAeC,YAAgB/D,EAAa8C,EAAiB/B,EAA/B,OAAkDD,QAAlD,IAAkDA,OAAlD,EAAkDA,EAAiBkD,MA2JvG,OAzJAC,qBAAU,WACR,IAAMC,EAAW,uCAAG,0DAAAC,EAAA,yDACb5B,EAAO6B,OADM,oDAIZ5C,EAAsB6C,YAAmCP,EAAcF,EAAqBJ,GAC5FjC,EAAaP,GAAmC,OAAfF,QAAe,IAAfA,OAAA,EAAAA,EAAiBkD,OAAQ,EAAG1D,IAE/DkB,GAAwBD,EAPV,uBAQhB0B,EACEhC,EAAwB,CACtBC,4BAA6BV,EAAiB8D,QAC9CnD,SAAUoD,kBAAQ9D,EAAqB,QACvCW,kBAAmBX,EACnBY,cAAekD,kBAAQ5D,EAAsB,QAC7CW,uBAAwBX,EACxBY,aACAC,yBAhBY,6BAqBZgD,EAAuB5D,EAC3BV,OAAOW,IACQ,OAAfC,QAAe,IAAfA,OAAA,EAAAA,EAAiBkD,OAAQ,EACzB1D,EACAS,GAzBgB,SA6BZ0D,EAAsB/B,GAAa,IACnCgC,EAAwB,EACxBC,GAAyB,EACzBzD,EAA8BV,EAAiBwC,SAE/CzB,EAlCY,kCAmCcqD,YAC1B,CACEtB,cACAf,SACAD,cACAE,SAAUA,GAAY,IACtBC,UAAWA,GAAaoC,YAAUC,MAEpCtB,GA3CY,QAmCdiB,EAnCc,mBA+CZX,IAAgBU,EA/CJ,kCAgDgBO,YAA4B,CACxDzB,cACAE,cACAlB,cACAC,SACAC,SAAUA,GAAY,IACtB1B,kBACAd,YAAa8D,EACbrB,UAAWA,GAAaoC,YAAUC,KAClCpB,OACAhB,UAAW+B,EACXD,yBA3DY,QAgDdE,EAhDc,mBA+DC/B,EA/DD,sBA+DkBqC,gBAAMrC,EAAgB,QA/DxC,yCA+DwDsC,cA/DxD,+BA+DV9D,EA/DU,KAgEVC,EAAoBmD,kBAAQpD,EAAU,QACtCE,EAAgB6D,cAClBtC,EACEoC,gBAAMpC,EAAkB,QACxBjC,EACF,IACEW,EAAyBiD,kBAAQlD,EAAe,QAChDO,EAAWiB,GAAkB6B,EAAsBS,WAvEzC,EAwEoBtD,EAClCD,EACAT,EACAE,EACA6B,EAAepB,UA5ED,mBAwETJ,EAxES,KAwEAC,EAxEA,MA+EZmC,EA/EY,kCAgFiBsB,YAA0B,CACvD9B,cACAE,cACAlB,cACAC,SACAC,SAAUA,GAAY,IACtB1B,kBACA2B,UAAWA,GAAaoC,YAAUC,KAClCpB,OACAvC,SAAU,IACVkE,SAAUC,IACV1D,WACA2D,eAAgBD,IAChB5C,UAAW+B,EACXD,yBA9FY,QAgFdG,EAhFc,eAkGhBzD,EAA8ByD,EAAyBnE,EAAiB8D,QAAU9D,EAAiBgF,QAEnGvC,EAAiB,CACf/B,8BACAO,cAAegD,EACf/C,UACAC,mBACAR,WACAC,oBACAC,gBACAC,yBACAM,WACAL,aACAC,wBA/Gc,kDAkHhBiE,QAAQC,KAAK,KAAMC,SAEnB1C,EACEhC,EAAwB,CACtBC,4BAA6BV,EAAiBgF,QAC9CrE,SAAUV,EACVW,kBAAmBmD,kBAAQ9D,EAAqB,QAChDY,cAAeV,EACfW,uBAAwBiD,kBAAQ5D,EAAsB,WA1H1C,0DAAH,qDAgIjBuD,MACC,CACD3B,EACAe,EACAhB,EACAxB,EACA0B,EACAzB,EACAmC,EAAepB,SACfjB,EACA6C,EACAjB,EACAe,EACAI,EACAlB,EACApC,EACAuD,EACAlB,EACAC,EACAC,EACAC,EACAgB,IAGKrC,I,kCCpTT,sCAKamE,EAAwB,SACnCC,EACA9E,EACAF,EACAC,EACAgF,EACA9F,EACA8C,GAEA,QAAI9C,IAGc,IAAda,EAEEiC,EACKA,IAAoB+C,EAGtBC,IAAqBD,EAG1B/E,GAAmBD,MAKnBE,IAAqBD,IAChBA,EAAkB,IAAMD,IAoCpBkD,IAvB8B,WAKvC,IAJJ/D,EAIG,wDAHH8C,EAGG,uCAFH/B,EAEG,uDAFiB,GACpBD,EACG,uDADe,EAElB,EAAsBqC,YAAYC,KAA1BvC,EAAR,EAAQA,UAEFyC,EAAcyC,cACdD,EAAmBE,YAAuB1C,GAChD,EAAoCH,YAAYC,KAAjCyC,EAAf,EAAQI,MAER,OAAOL,EACLC,EACA9E,EACAF,EACAC,EACAgF,EACA9F,EACA8C,K,sLCpDEoD,EAAqBC,UAAOC,IAAV,iFAKlBC,EAA0BF,UAAOC,IAAV,yFAKvBE,EAAaH,kBAAOI,OAAPJ,CAAH,kDAIVK,EAAcL,kBAAOI,OAAPJ,CAAH,2CACN,SAAC3K,GAAD,OAAYA,EAAMiL,aAAejL,EAAMkL,MAAMC,OAAOlJ,MAAQjC,EAAMoL,SAGvEC,EAAmBV,kBAAOW,aAAPX,CAAH,2GAmBTY,EAAqB,SAAC,GAQA,IAPjCC,EAOgC,EAPhCA,OACAC,EAMgC,EANhCA,aAMgC,IALhCC,eAKgC,SAJhCrH,EAIgC,EAJhCA,iBACAsH,EAGgC,EAHhCA,sBACAC,EAEgC,EAFhCA,uBACA5F,EACgC,EADhCA,oBAEQyE,EAAU9C,YAAYC,KAAtB6C,MACFpF,EAAYsC,YAAYkE,MAAyB,EACjDC,EAAyB9F,GAAuBX,EAAY,EAAI,aAAe,UAErF,EAAsDkC,oBAAS,GAA/D,mBAAOwE,EAAP,KAA4BC,EAA5B,KACA,EAAsDzE,oBAAS,GAA/D,mBAAO0E,EAAP,KAA4BC,EAA5B,KAEA,EAA2BT,EAAnBU,UACFC,EAAkB1F,cADxB,MAAoB,GAApB,EAC4C,IACtC2F,EAAoB1E,YAAY2E,KAChCC,EAAgBC,cAetB,GAbA/D,qBAAU,WACJ/D,OAAO+H,MAAML,IACbA,IAAoB3B,SACE9I,IAAtB0K,GAAmCD,IAAoB3B,IACzDyB,GAAuB,GACvBF,GAAuB,IAErBK,GAAqBD,IAAoBC,EAAoB,IAC/DH,GAAuB,GACvBF,GAAuB,OAExB,CAACK,EAAmB5B,EAAO2B,KAEzBR,IAA2BD,GAAyB3F,EACvD,OAAO,KAOT,OACE,eAAC,YAAD,CAAW0F,QAASA,EAASgB,SAAUT,EAAqBlL,SALvC,WACrBmL,GAAwBD,IAIxB,UACE,cAAC,mBAAD,UACE,cAAC,OAAD,CAAMzD,KAAK,KAAX,gCAEF,cAAC,mBAAD,UACE,eAACqC,EAAD,WACE,cAACC,EAAD,CAAYtC,KAAK,KAAK4C,MAAM,cAA5B,8BAIA,eAACV,EAAD,WACE,cAACM,EAAD,CACExC,KAAK,KACLyC,aAAcc,EACdX,MAAO9G,YAAqBD,GAAoByH,GAA0B,OAAS,iBAHrF,wBAOA,cAACd,EAAD,CACExC,KAAK,KACLyC,aAAcc,EACdX,MAAO9G,YAAqBD,GAAoByH,GAA0B,OAAS,iBAHrF,SAKGL,EAAaU,eAIjBI,GACC,eAAC7B,EAAD,WACE,cAAC,OAAD,CACElC,KAAK,KACL4C,MAAO9G,YAAqBD,GAAoByH,GAA0B,OAAS,iBAFrF,uBAMA,cAAC,OAAD,CACEtD,KAAK,KACL4C,MAAO9G,YAAqBD,GAAoByH,GAA0B,OAAS,iBAFrF,SAIGL,EAAavE,eAKnB9C,YAAyBC,GAAoByH,IAC5C,qCACE,cAACpB,EAAD,UACE,cAACI,EAAD,CAAYtC,KAAK,KAAK4C,MAAM,cAA5B,SACG7G,YAA0BqH,OAI/B,eAAClB,EAAD,WACE,cAAC,OAAD,CAAMlC,KAAK,KAAX,mBACA,cAAC,OAAD,CAAMA,KAAK,KAAX,SAAiBiD,EAAakB,cAGhC,eAACjC,EAAD,WACE,cAAC,OAAD,CAAMlC,KAAK,KAAX,uBACA,cAAC,OAAD,CAAMA,KAAK,KAAX,SAAiBiD,EAAamB,iBAGhC,eAAClC,EAAD,WACE,cAAC,OAAD,CAAMlC,KAAK,KAAX,SAAiBkB,cAAkB,kBAAoB,cACvD,cAAC,OAAD,CAAMlB,KAAK,KAAX,SAAiBiD,EAAaoB,iBAG/BnD,eACC,eAACgB,EAAD,WACE,cAAC,OAAD,CAAMlC,KAAK,KAAX,8BACA,cAAC,OAAD,CAAMA,KAAK,KAAX,SAAiBiD,EAAaqB,sBAKtC,cAACzB,EAAD,CAAkBD,MAAM,UAAU2B,SAAS,KAAKC,QAASxB,EAAzD,4B,kOCpKGyB,EAAS3M,YAAa,CACjC4M,QAAS,CACPhK,QAAQ,GAAD,OAAKiK,KAAL,YAAW1M,MAClB2M,eAAgB,gBAChBC,UAAW,aACXC,OAAQ,QAEVC,WAAY,CACVC,cAAe,OACfpC,MAAOqC,gBACPC,YAAa,OACbC,WAAY,QAEdC,YAAa,CACXC,SAAUpN,MAEZqN,UAAW,CACTR,OAAQ,OACRnN,MAAO,QAET4N,UAAW,CACT7K,QAAQ,GAAD,OAAKiK,KAAL,YAAW1M,OAEpBuN,OAAQ,CACNL,WAAYM,MAEdpG,QAAS,CACP6F,YAAaO,MAEfC,UAAW,CACTZ,OAAQ,OACRF,eAAgB,SAChBe,WAAY,SACZC,IAAK,U,kFCTHC,EAAgB1D,kBAAO2D,UAAP3D,CAAH,4CAGb4D,EAAsB5D,kBAAO2D,UAAP3D,CAAH,mDAInB6D,EAAc7D,UAAOC,IAAV,+FAMX6D,EAAkB9D,UAAOC,IAAV,4KAUf8D,EAAa/D,kBAAOgE,OAAPhE,CAAH,yJASVG,EAAaH,kBAAOI,OAAPJ,CAAH,kDAGViE,EAAejE,kBAAOI,OAAPJ,CAAH,qDAGZvK,EAAYC,YAAW4M,GASvB4B,EAAiB,SAACC,GACtB,aAAoFA,QAApF,IAAoFA,IAAU,GAAtFlC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAAaC,EAAlC,EAAkCA,cAAeH,EAAjD,EAAiDA,SAAUR,EAA3D,EAA2DA,UAAWjF,EAAtE,EAAsEA,UActE,MAAO,CACL0F,YAb4BmC,YAAS,GAAG,EAAZA,CAAkBnC,GAc9CC,YAZ4BkC,YAAS,GAAG,EAAZA,CAAkBlC,GAa9CC,cAX8BiC,YAAS,GAAG,EAAZA,CAAkBjC,GAYhDH,SAVyBoC,YAAS,GAAG,EAAZA,CAAkBpC,GAW3CR,UAT0B4C,YAAS,GAAG,EAAZA,CAAkB5C,GAU5CjF,UAR0B6H,YAAS,GAAG,EAAZA,CAAkB7H,KAYnC8H,EAAuB,SAAC,GAKT,IAJ1BC,EAIyB,EAJzBA,QACAxD,EAGyB,EAHzBA,aAGyB,IAFzBpH,wBAEyB,MAFN,UAEM,EADzBG,EACyB,EADzBA,YAEM/C,EAAUrB,IACR+L,EAA4EV,EAA5EU,UAAWjF,EAAiEuE,EAAjEvE,UAAWyF,EAAsDlB,EAAtDkB,SAAUC,EAA4CnB,EAA5CmB,YAAaC,EAA+BpB,EAA/BoB,YAAaC,EAAkBrB,EAAlBqB,cAC5DP,EAAgBC,cAChB1E,EAAcyC,cACdD,EAAmBE,YAAuB1C,GAM1CoH,EAAqB,WACzBD,KAGF,OACE,qCAEE,eAACE,EAAA,EAAD,CAAKC,MAAM,SAAStM,UAAWrB,EAAQyL,QAASmC,MAAI,EAAC,cAAY,yBAAjE,UACE,cAAC,QAAD,CAAO7G,KAAK,KAAK8G,eAAa,EAA9B,8BAGA,cAACC,EAAA,EAAD,CAAYC,eAAa,EAACxC,QAASkC,EAAnC,SACE,cAAC,IAAD,CAAOpM,UAAWrB,EAAQqM,iBAI9B,cAACO,EAAD,IAEA,cAACoB,EAAA,EAAD,CAAO3M,UAAWrB,EAAQsM,UAA1B,SACE,cAAC1K,EAAA,EAAD,CACEI,cAAe,CACb0I,UAAWA,GAAa7B,GAAoB,IAC5CpD,UAAWA,GAAa,GACxByF,SAAUA,GAAY,GACtBC,YAAaA,GAAe,GAC5BC,YAAaA,GAAe,GAC5BC,cAAeA,GAAiB,IAElCpJ,SAhCS,SAACoL,GAChBG,EAAQH,IAgCFlL,WAAYiL,EAVd,SAYG,kBACC,qCACE,cAAC/D,EAAD,CAAYtC,KAAK,KAAKkH,QAAM,EAA5B,8BAIA,eAAClB,EAAD,WACE,cAACmB,EAAA,EAAD,CACE7O,KAAK,YACL8O,aAAczD,EACd0D,YAAY,aACZtO,KAAK,aACLuO,KAAK,SACLC,IAAI,IACJC,UAAWpP,IACXqP,UAAW3L,YAAqBD,KAEjCkI,GACC,cAACoD,EAAA,EAAD,CACE7O,KAAK,YACL8O,aAAc1I,EACd2I,YAAY,YACZtO,KAAK,YACLuO,KAAK,SACLC,IAAI,IACJC,UAAWpP,IACXqP,UAAW3L,YAAqBD,QAKrCD,YAAyBC,IACxB,qCACE,cAACuK,EAAD,CAAcpG,KAAK,KAAKkH,QAAM,EAA9B,SACGnL,YAA0BC,KAG7B,eAACiK,EAAD,WACE,cAACkB,EAAA,EAAD,CACE7O,KAAK,WACL8O,aAAcjD,EACdkD,YAAY,QACZtO,KAAK,QACLuO,KAAK,SACLE,UAAWpP,IACXqP,UAAW7L,YAAyBC,KAEtC,cAACsL,EAAA,EAAD,CACE7O,KAAK,cACL8O,aAAchD,EACdiD,YAAY,YACZtO,KAAK,YACLuO,KAAK,SACLE,UAAWpP,IACXqP,SAA+B,uBAArB5L,KAET6L,EAAD,GAAD,OAUKxG,cAAkB,kBAAoB,YAV3C,WACC,cAACiG,EAAA,EAAD,CACE7O,KAAK,cACL8O,aAAc/C,EACdiD,KAAK,SACLD,YAAaK,EACb3O,KAAM2O,EACNF,UAAWpP,IACXqP,UAAW7L,YAAyBC,MAIvCqF,eACC,cAACiG,EAAA,EAAD,CACE7O,KAAK,gBACL8O,aAAc9C,EACdgD,KAAK,SACLD,YAAY,0BACZtO,KAAK,0BACLyO,UAAWpP,IACXqP,UAAW7L,YAAyBC,QAK1C,eAACqK,EAAD,CACEyB,KAAK,qGACLC,OAAO,SAFT,UAIE,cAAC,OAAD,CAAM5H,KAAK,KAAK4C,MAAM,UAAtB,4DAGA,cAAC,OAAD,CAAM5C,KAAK,KAAKsH,KAAK,eAAe1E,MAAM,kBAKhD,cAACmD,EAAD,IAGA,cAACY,EAAA,EAAD,CAAKC,MAAM,SAAStM,UAAWrB,EAAQyM,UAAvC,SACE,cAACmC,EAAA,EAAMC,OAAOC,QAAd,CACEC,kBAAmB,CAAExD,QAASkC,EAAoB3N,KAAM,QACxDkP,mBAAoB,CAClBX,KAAM,SACNvO,KAAM,UACND,OAAQ,wBA9CN,IAAC4O,W,gBCrLVQ,EAAuB,SAAC,GAWH,IAVhCpN,EAU+B,EAV/BA,SACA0C,EAS+B,EAT/BA,oBACAxB,EAQ+B,EAR/BA,YACAH,EAO+B,EAP/BA,iBACAuI,EAM+B,EAN/BA,YACAC,EAK+B,EAL/BA,YACAC,EAI+B,EAJ/BA,cACAX,EAG+B,EAH/BA,UACAjF,EAE+B,EAF/BA,UACAyJ,EAC+B,EAD/BA,uBAEA,EAAqCpJ,oBAAS,GAA9C,mBAAOqJ,EAAP,KAAmBC,EAAnB,KACA,EAA8CtJ,oBAAS,GAAvD,mBAAOuJ,EAAP,KAAwBC,EAAxB,KACM1L,EAAYsC,YAAYkE,MAAyB,EACjDC,EAAyB9F,GAAuBX,EAAY,EAAI,aAAe,UAC/EoG,EAAeuF,YAAyB,CAC5CC,gBAAiB5M,GAAoByH,EACrCoF,mBAAoBtE,EACpBuE,mBAAoBtE,EACpBuE,qBAAsBtE,EACtBuE,iBAAkBlF,EAClBmF,iBAAkBpK,IAEZqK,EAA8F9F,EAA9F8F,eAAgBC,EAA8E/F,EAA9E+F,eAAgBC,EAA8DhG,EAA9DgG,iBAAkBC,EAA4CjG,EAA5CiG,aAAcC,EAA8BlG,EAA9BkG,aAAcC,EAAgBnG,EAAhBmG,YAGtFnJ,qBAAU,WACHqI,IACHU,EAAe5E,GACf2E,EAAe1E,GACf4E,EAAiB3E,GACjB6E,EAAazK,MAEd,CACD0F,EACA4E,EACA3E,EACA0E,EACAT,EACA5J,EACAyK,EACAF,EACA3E,IAGF,IAAM+E,EAAe,WACnBhB,GAAe,SAACiB,GAAD,OAAWA,MAiB5B,OAAOlB,EACL,cAAC,EAAD,CACEpM,YAAaA,EACbiH,aAAcA,EACdwD,QAlByB,SAACxD,GACxBA,IACFsF,GAAmB,GACnBW,EAAajG,EAAaU,WAC1BwF,EAAalG,EAAavE,WAC1BsK,EAAe/F,EAAamB,aAC5B2E,EAAe9F,EAAaoB,aAC5B4E,EAAiBhG,EAAaqB,eAC9B8E,EAAYnG,EAAakB,UACzBgE,GAA0BA,EAAuBlF,IAEnDoG,KAQExN,iBAAkBA,GAAsCyH,IAG1DxI,EAASmI,EAAcoG,K,mQChFrB5E,EAAS3M,YAAa,CAC1ByR,oBAAqB,CACnBC,QAAS,OACT7D,WAAY,UAEd8D,YAAa,CACXvE,YAAaO,QAIX7N,EAAYC,YAAW4M,GAOhBiF,EAAsB,SAAC,GAGwB,IAF1DxM,EAEyD,EAFzDA,4BACAlB,EACyD,EADzDA,YAEM/C,EAAUrB,IACViF,EAAYsC,YAAYkE,KACxBsG,EAAexK,YAAYyK,KAC3BC,EAAY1K,YAAY2K,KAE9B,GAAI5M,IAAgCV,IAAiBgF,QACnD,OAAO,KAGT,IAAIuI,EAAY,qDACZ/N,IACF+N,EACElN,GAAaA,EAAY,EAAzB,oGAKJ,IAAMpD,EAAQoQ,EAAS,kDACwBE,GAC3CJ,EACA,+CACA,4FAEJ,OACE,cAAChD,EAAA,EAAD,CAAKC,MAAM,SAAX,SACE,eAACoD,EAAA,EAAD,CAAWpH,MAAM,QAAQtI,UAAWrB,EAAQsQ,oBAA5C,UACE,cAACU,EAAA,EAAD,CAAKC,IAAI,eAAepF,OAAQ,GAAIqF,IAAKC,IAAU9P,UAAWrB,EAAQwQ,cACrEhQ,Q,mBC3CI4Q,EAAkB,SAAC,GAK4B,IAOtDC,EAXJ3M,EAIyD,EAJzDA,iBACA3B,EAGyD,EAHzDA,YACAuB,EAEyD,EAFzDA,WACAL,EACyD,EADzDA,4BAEwBsC,EAAgBL,YAAYC,KAA5CG,eACAK,EAAwBT,YAAYM,KAApCG,oBACFE,EAAeC,YAAgB/D,GAC/BwB,EAAsB6C,YAAmCP,EAAcF,EAAqBJ,GAE5FN,EAAiB9C,cAEvB,OAAIc,IAAgCV,IAAiBwC,QAC5C,MAGPsL,EADE/M,EACkB,SACXvB,EACW,UAEA,UAIpB,qCACuB,MAApB2B,GACC,eAACqM,EAAA,EAAD,CAAWhK,KAAK,KAAK4G,MAAM,SAA3B,6BACwB0D,EADxB,mFAEoB,KAChB9M,GACA,0DAEE,eAAC,OAAD,CAAMwC,KAAK,KAAKuK,GAAG,OAAO3H,MAAM,OAAOsE,QAAM,EAA7C,UACG,IACAvJ,EAFH,IAEsBuB,EAAe/C,OAAQ,OAJ/C,+DAWN,cAAC,EAAD,CAAqBe,4BAA6BA,EAA6BlB,YAAaA,S,wBCxC5FwO,EAAwBrI,UAAOC,IAAV,2EACL,qBAAGM,MAAkBC,OAAO8H,aACrChF,KAAMxN,MAGNyS,EAAiB,SAAC,GAOiB,IAN9C/M,EAM6C,EAN7CA,iBACAJ,EAK6C,EAL7CA,WACAvB,EAI6C,EAJ7CA,YAI6C,IAH7C2H,UAAWgH,OAGkC,MAHd,GAGc,EAF7C7R,EAE6C,EAF7CA,OACAoE,EAC6C,EAD7CA,4BAEQ+E,EAAU9C,YAAYC,KAAtB6C,MACF2B,EAAkB1F,SAASyM,EAAmB,IAC9CC,EAAczL,YAAY2E,KAC1B+G,EAAc,UAAMD,GAAeA,EAAc,GACjDtL,EAAcyC,cACpB,EAAgDhD,mBAAiB8L,GAAjE,mBAAO/I,EAAP,KAAyBgJ,EAAzB,KAEA7K,qBAAU,WACR,IAAM8K,EAAqB,uCAAG,4BAAA5K,EAAA,+EAEM6K,YAAoB1L,GAF1B,OAEpBwC,EAFoB,OAEwCX,WAClE2J,EAAoBhJ,GAHM,mIAAH,qDAQ3BiJ,MACC,CAACzL,IAgCJ,OACE,cAACkL,EAAD,CAAuB,cAAa1R,EAApC,SA/BqB,WAQrB,MALMmL,MAAML,IAAoBA,IAAoB3B,SAC9B9I,IAAhByR,GAA6BhH,IAAoBgH,EAAc,IAI7C,OAAO,KAE/B,IAAMK,EAAmBrH,EAAkB3B,EAC3C,OACE,cAAC+H,EAAA,EAAD,CAAWhK,KAAK,KAAK4G,MAAM,SAA3B,SACGqE,EAAmB,EAAnB,gBACUN,EADV,gFACmG7I,EADnG,KAGC,qCACE,cAAC,OAAD,CAAM9B,KAAK,KAAKuK,GAAG,OAAO3H,MAAM,OAAOsE,QAAM,EAA7C,SACG+D,IAFL,sBAKIA,EAAmB,EAAI,IAAM,GALjC,kHAgBHC,IACC,cAAC,EAAD,CACEvN,iBAAkBA,EAClBJ,WAAYA,EACZvB,YAAaA,EACbkB,4BAA6BA,Q,kCCxFvC,8CA0BeiO,IAlBS,SAAC,GAAsD,IAApD5S,EAAmD,EAAnDA,SAIzB,OACE,eAAC,IAAD,CAAK6S,OAAO,KAAZ,UACE,cAAC,IAAD,CAAWC,UAAQ,EAAnB,iHAGA,cAAC,IAAD,CACEC,QAAS,cAAC,IAAD,CAAUC,gBAAc,EAAC3I,MAAM,UAAUrK,SATnC,SAACiT,GACpBjT,EAASiT,EAAE5D,OAAO6D,YASdC,MAAM,sBACN,cAAY,0B,0GChBPC,EAAsB,SACjCC,GAEA,MAAwC7M,mBAAuB8M,IAAaC,UAA5E,mBAAOC,EAAP,KAAqBC,EAArB,KAqBA,OAnBA/L,qBAAU,WACR,IAAIgM,GAAU,EAEd,GAAIA,EACF,GAAQL,IACDpP,IAAiBwC,QACpBgN,EAAgBH,IAAa7M,cAG7BgN,EAAgBH,IAAaK,OAKnC,OAAO,WACLD,GAAU,KAEX,CAACL,IAEG,CAACG,EAAcC,K,kCC7BT,QAA0B,sC,uGCuC1BhK,IA/BwC,SAAC1C,GACtD,IAAMsL,EAAczL,YAAY2E,KAC1B+G,EAAiBD,EAAcA,EAAc,OAAIzR,EAEvD,EAAgD4F,mBAA6B8L,GAA7E,mBAAO/I,EAAP,KAAyBgJ,EAAzB,KAwBA,OAtBA7K,qBAAU,WACR,IAAIkM,GAAY,EAEVpB,EAAqB,uCAAG,4BAAA5K,EAAA,+EAGD6K,YAAoB1L,GAHnB,OAG1BwC,EAH0B,uFAQxBqK,GACFrB,EAAoBhJ,GATM,yDAAH,qDAc3B,OAFAiJ,IAEO,WACLoB,GAAY,KAEb,CAACvB,EAAatL,IAEVwC,I,yLCQI0G,EAA2B,SAAChR,GACvC,IAAM4U,EAAsB7P,aAAgB,OAAL/E,QAAK,IAALA,OAAA,EAAAA,EAAOiR,kBAAmB,UAAW,sBACtE4D,EAAyBlN,YAAYmN,KACrChN,EAAcyC,cACdvC,EAAcL,YAAYoN,KAC1BC,EAAQrN,aAAY,SAACqN,GAAD,OAA0BA,KAGpD,EAAkCzN,mBAAQ,OAAqBvH,QAArB,IAAqBA,OAArB,EAAqBA,EAAOqR,kBAAtE,mBAAOlF,EAAP,KAAkBuF,EAAlB,KAEA,EAAkCnK,mBAA6BqN,EAAsB,IAAH,OAAS5U,QAAT,IAASA,OAAT,EAASA,EAAOsR,kBAAlG,mBAAOpK,EAAP,KAAkByK,EAAlB,KAGA,EAAgCpK,qBAAhC,mBAAOoF,EAAP,KAAiBiF,EAAjB,KACA,EAAsCrK,mBAAQ,OAAqBvH,QAArB,IAAqBA,OAArB,EAAqBA,EAAOkR,oBAA1E,mBAAOtE,EAAP,KAAoB4E,EAApB,KACA,EAAsCjK,mBAAQ,OAAqBvH,QAArB,IAAqBA,OAArB,EAAqBA,EAAOmR,oBAA1E,mBAAOtE,EAAP,KAAoB0E,EAApB,KACA,EAAkDhK,qBAAlD,mBAAO0N,EAAP,KAA0BC,EAA1B,KACA,EAA0C3N,qBAA1C,mBAAOuF,EAAP,KAAsB2E,EAAtB,KACA,EAAsDlK,qBAAtD,mBAAO4N,EAAP,KAA4BC,EAA5B,KA0DA,OAvDA3M,qBAAU,WACR,IAAM4M,EAAQ,uCAAG,4BAAA1M,EAAA,sEACG2M,YAAaT,GADhB,OACTU,EADS,OAEf3D,EAAY2D,EAAI5L,YAFD,2CAAH,qDAKVkL,GACFQ,MAED,CAACR,IAGJpM,qBAAU,WACHoE,EAID+H,EACFrD,EAAe,KAGjB2D,EAAqB1L,gBAAMqD,EAAa,SAPtCqI,OAAqBvT,KAQtB,CAACkL,EAAa+H,IAGjBnM,qBAAU,WACHqE,EAID8H,EACFnD,EAAiB,KAGnB2D,EAAuB5L,gBAAMsD,EAAe,SAP1C2E,OAAiB9P,KAQlB,CAACmL,EAAe8H,IAGnBnM,qBAAU,WACR,IAAM+M,EAAY,uCAAG,4BAAA7M,EAAA,0DACfb,EADe,0CAGiB0L,YAAoB1L,GAHrC,OAGTwC,EAHS,OAGmDX,WAClE+H,EAAapH,GAJE,gDAMfmL,YAASC,IAAOC,KAAM,KAAExL,SANT,yDAAH,0DAWAxI,IAAdwK,GACFqJ,MAED,CAAC1N,EAAaE,EAAamE,EAAW6I,IAElC,CACL7I,YACAuF,eACAxK,YACAyK,eACAhF,WACAiF,cACAhF,cACA4E,iBACA3E,cACA0E,iBACAzE,gBACA2E,mBACAwD,oBACAE,yB,kCCtIJ,qCAWe3I,IANM,WACnB,IAAMxE,EAAcL,YAAYoN,KAEhC,OADuBa,YAAWC,WAASC,qBAAsB9N","file":"static/js/4.fd1af5ae.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\n\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import { ReactElement } from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any): ReactElement => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { getNativeCurrency } from 'src/config'\nimport { sameString } from 'src/utils/strings'\n\nexport type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\n\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' ||\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\n}\n\nexport const getInteractionTitle = (value: number | string): string => {\n  if (Number(value) === 0) {\n    return 'Interact with:'\n  }\n\n  const { symbol } = getNativeCurrency()\n  return `Interact with (and send ${value} ${symbol} to):`\n}\n\nexport const isSpendingLimit = (txType?: string): boolean => sameString(txType, 'spendingLimit')\n","import { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { List } from 'immutable'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { fromWei, toWei } from 'web3-utils'\n\nimport { getNativeCurrency } from 'src/config'\nimport {\n  checkTransactionExecution,\n  estimateSafeTxGas,\n  estimateTransactionGasLimit,\n  isMaxFeeParam,\n} from 'src/logic/safe/transactions/gas'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { calculateGasPrice } from 'src/logic/wallets/ethTransactions'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from './useCanTxExecute'\n\nexport enum EstimationStatus {\n  LOADING = 'LOADING',\n  FAILURE = 'FAILURE',\n  SUCCESS = 'SUCCESS',\n}\n\nconst DEFAULT_MAX_GAS_FEE = String(3.5e9) // 3.5 GWEI\nconst DEFAULT_MAX_PRIO_FEE = String(2.5e9) // 2.5 GWEI\n\nexport const checkIfTxIsApproveAndExecution = (\n  threshold: number,\n  txConfirmations: number,\n  txType?: string,\n  preApprovingOwner?: string,\n): boolean => {\n  if (preApprovingOwner) {\n    return txConfirmations + 1 === threshold || isSpendingLimit(txType)\n  }\n\n  return threshold === 1\n}\n\nexport const checkIfTxIsCreation = (txConfirmations: number, txType?: string): boolean =>\n  txConfirmations === 0 && !isSpendingLimit(txType)\n\ntype UseEstimateTransactionGasProps = {\n  txData: string\n  txRecipient: string\n  txConfirmations?: List<Confirmation>\n  txAmount?: string\n  preApprovingOwner?: string\n  operation?: number\n  safeTxGas?: string\n  txType?: string\n  manualGasPrice?: string\n  manualMaxPrioFee?: string\n  manualGasLimit?: string\n  manualSafeNonce?: number // Edited nonce\n  isExecution?: boolean // If called from the TransactionList \"next transaction\"\n}\n\nexport type TransactionGasEstimationResult = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasEstimation: string // Amount of gas needed for execute or approve the transaction\n  gasCost: string // Cost of gas in raw format (estimatedGas * gasPrice)\n  gasCostFormatted: string // Cost of gas in format '< | > 100'\n  gasPrice: string // Current price of gas unit\n  gasPriceFormatted: string // Current gas price formatted\n  gasMaxPrioFee: string // Current max prio gas price\n  gasMaxPrioFeeFormatted: string // Current max prio gas formatted\n  gasLimit: string // Minimum gas requited to execute the Tx\n  isCreation: boolean // Returns true if the transaction is a creation transaction\n  isOffChainSignature: boolean // Returns true if offChainSignature is available\n}\n\ntype DefaultGasEstimationParams = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasPrice: string\n  gasPriceFormatted: string\n  gasMaxPrioFee: string\n  gasMaxPrioFeeFormatted: string\n  isCreation?: boolean\n  isOffChainSignature?: boolean\n}\nconst getDefaultGasEstimation = ({\n  txEstimationExecutionStatus,\n  gasPrice,\n  gasPriceFormatted,\n  gasMaxPrioFee,\n  gasMaxPrioFeeFormatted,\n  isCreation = false,\n  isOffChainSignature = false,\n}: DefaultGasEstimationParams): TransactionGasEstimationResult => {\n  return {\n    txEstimationExecutionStatus,\n    gasEstimation: '0',\n    gasCost: '0',\n    gasCostFormatted: '< 0.001',\n    gasPrice,\n    gasPriceFormatted,\n    gasMaxPrioFee,\n    gasMaxPrioFeeFormatted,\n    gasLimit: '0',\n    isCreation,\n    isOffChainSignature,\n  }\n}\n\nexport const calculateTotalGasCost = (\n  gasLimit: string,\n  gasPrice: string,\n  gasMaxPrioFee: string,\n  decimals: number,\n): [string, string] => {\n  const totalPricePerGas = parseFloat(gasPrice) + parseFloat(gasMaxPrioFee || '0')\n  const estimatedGasCosts = parseInt(gasLimit, 10) * totalPricePerGas\n  const gasCost = fromTokenUnit(estimatedGasCosts, decimals)\n  const formattedGasCost = formatAmount(gasCost)\n  return [gasCost, formattedGasCost]\n}\n\nexport const useEstimateTransactionGas = ({\n  txRecipient,\n  txData,\n  txConfirmations,\n  txAmount,\n  preApprovingOwner,\n  operation,\n  safeTxGas,\n  txType,\n  manualGasPrice,\n  manualMaxPrioFee,\n  manualGasLimit,\n  manualSafeNonce,\n  isExecution,\n}: UseEstimateTransactionGasProps): TransactionGasEstimationResult => {\n  const [gasEstimation, setGasEstimation] = useState<TransactionGasEstimationResult>(\n    getDefaultGasEstimation({\n      txEstimationExecutionStatus: EstimationStatus.LOADING,\n      gasPrice: '0',\n      gasPriceFormatted: '0',\n      gasMaxPrioFee: '0',\n      gasMaxPrioFeeFormatted: '0',\n    }),\n  )\n  const nativeCurrency = getNativeCurrency()\n  const { address: safeAddress = '', threshold = 1, currentVersion: safeVersion = '' } = useSelector(currentSafe) ?? {}\n  const { account: from, smartContractWallet, name: providerName } = useSelector(providerSelector)\n\n  const canTxExecute = useCanTxExecute(isExecution, manualSafeNonce, preApprovingOwner, txConfirmations?.size)\n\n  useEffect(() => {\n    const estimateGas = async () => {\n      if (!txData.length) {\n        return\n      }\n      const isOffChainSignature = checkIfOffChainSignatureIsPossible(canTxExecute, smartContractWallet, safeVersion)\n      const isCreation = checkIfTxIsCreation(txConfirmations?.size || 0, txType)\n\n      if (isOffChainSignature && !isCreation) {\n        setGasEstimation(\n          getDefaultGasEstimation({\n            txEstimationExecutionStatus: EstimationStatus.SUCCESS,\n            gasPrice: fromWei(DEFAULT_MAX_GAS_FEE, 'gwei'),\n            gasPriceFormatted: DEFAULT_MAX_GAS_FEE,\n            gasMaxPrioFee: fromWei(DEFAULT_MAX_PRIO_FEE, 'gwei'),\n            gasMaxPrioFeeFormatted: DEFAULT_MAX_PRIO_FEE,\n            isCreation,\n            isOffChainSignature,\n          }),\n        )\n        return\n      }\n      const approvalAndExecution = checkIfTxIsApproveAndExecution(\n        Number(threshold),\n        txConfirmations?.size || 0,\n        txType,\n        preApprovingOwner,\n      )\n\n      try {\n        let safeTxGasEstimation = safeTxGas || '0'\n        let ethGasLimitEstimation = 0\n        let transactionCallSuccess = true\n        let txEstimationExecutionStatus = EstimationStatus.LOADING\n\n        if (isCreation) {\n          safeTxGasEstimation = await estimateSafeTxGas(\n            {\n              safeAddress,\n              txData,\n              txRecipient,\n              txAmount: txAmount || '0',\n              operation: operation || Operation.CALL,\n            },\n            safeVersion,\n          )\n        }\n\n        if (canTxExecute || approvalAndExecution) {\n          ethGasLimitEstimation = await estimateTransactionGasLimit({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            isExecution: canTxExecute,\n            operation: operation || Operation.CALL,\n            from,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        const gasPrice = manualGasPrice ? toWei(manualGasPrice, 'gwei') : await calculateGasPrice()\n        const gasPriceFormatted = fromWei(gasPrice, 'gwei')\n        const gasMaxPrioFee = isMaxFeeParam()\n          ? manualMaxPrioFee\n            ? toWei(manualMaxPrioFee, 'gwei')\n            : DEFAULT_MAX_PRIO_FEE\n          : '0'\n        const gasMaxPrioFeeFormatted = fromWei(gasMaxPrioFee, 'gwei')\n        const gasLimit = manualGasLimit || ethGasLimitEstimation.toString()\n        const [gasCost, gasCostFormatted] = calculateTotalGasCost(\n          gasLimit,\n          gasPrice,\n          gasMaxPrioFee,\n          nativeCurrency.decimals,\n        )\n\n        if (canTxExecute) {\n          transactionCallSuccess = await checkTransactionExecution({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            operation: operation || Operation.CALL,\n            from,\n            gasPrice: '0',\n            gasToken: ZERO_ADDRESS,\n            gasLimit,\n            refundReceiver: ZERO_ADDRESS,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        txEstimationExecutionStatus = transactionCallSuccess ? EstimationStatus.SUCCESS : EstimationStatus.FAILURE\n\n        setGasEstimation({\n          txEstimationExecutionStatus,\n          gasEstimation: safeTxGasEstimation,\n          gasCost,\n          gasCostFormatted,\n          gasPrice,\n          gasPriceFormatted,\n          gasMaxPrioFee,\n          gasMaxPrioFeeFormatted,\n          gasLimit,\n          isCreation,\n          isOffChainSignature,\n        })\n      } catch (error) {\n        console.warn(error.message)\n        // If safeTxGas estimation fail we set this value to 0 (so up to all gasLimit can be used)\n        setGasEstimation(\n          getDefaultGasEstimation({\n            txEstimationExecutionStatus: EstimationStatus.FAILURE,\n            gasPrice: DEFAULT_MAX_GAS_FEE,\n            gasPriceFormatted: fromWei(DEFAULT_MAX_GAS_FEE, 'gwei'),\n            gasMaxPrioFee: DEFAULT_MAX_PRIO_FEE,\n            gasMaxPrioFeeFormatted: fromWei(DEFAULT_MAX_PRIO_FEE, 'gwei'),\n          }),\n        )\n      }\n    }\n\n    estimateGas()\n  }, [\n    txData,\n    safeAddress,\n    txRecipient,\n    txConfirmations,\n    txAmount,\n    preApprovingOwner,\n    nativeCurrency.decimals,\n    threshold,\n    from,\n    operation,\n    safeVersion,\n    smartContractWallet,\n    safeTxGas,\n    txType,\n    providerName,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    canTxExecute,\n  ])\n\n  return gasEstimation\n}\n","import { useSelector } from 'react-redux'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { currentSafe } from '../safe/store/selectors'\nimport useGetRecommendedNonce from './useGetRecommendedNonce'\n\nexport const calculateCanTxExecute = (\n  currentSafeNonce: number,\n  preApprovingOwner: string,\n  threshold: number,\n  txConfirmations: number,\n  recommendedNonce?: number,\n  isExecution?: boolean, // when executing from the TxList\n  manualSafeNonce?: number,\n): boolean => {\n  if (isExecution) return true\n\n  // Single owner\n  if (threshold === 1) {\n    // nonce was changed manually to be executed\n    if (manualSafeNonce) {\n      return manualSafeNonce === currentSafeNonce\n    }\n    // is next tx\n    return recommendedNonce === currentSafeNonce\n  }\n\n  if (txConfirmations >= threshold) {\n    return true\n  }\n\n  // When having a preApprovingOwner it is needed one less confirmation to execute the tx\n  if (preApprovingOwner && txConfirmations) {\n    return txConfirmations + 1 === threshold\n  }\n\n  return false\n}\n\ntype UseCanTxExecuteType = (\n  isExecution?: boolean,\n  manualSafeNonce?: number,\n  preApprovingOwner?: string,\n  txConfirmations?: number,\n) => boolean\n\nconst useCanTxExecute: UseCanTxExecuteType = (\n  isExecution = false,\n  manualSafeNonce,\n  preApprovingOwner = '',\n  txConfirmations = 0,\n) => {\n  const { threshold } = useSelector(currentSafe)\n\n  const safeAddress = extractSafeAddress()\n  const recommendedNonce = useGetRecommendedNonce(safeAddress)\n  const { nonce: currentSafeNonce } = useSelector(currentSafe)\n\n  return calculateCanTxExecute(\n    currentSafeNonce,\n    preApprovingOwner,\n    threshold,\n    txConfirmations,\n    recommendedNonce,\n    isExecution,\n    manualSafeNonce,\n  )\n}\n\nexport default useCanTxExecute\n","import { ReactElement, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { Text, ButtonLink, Accordion, AccordionSummary, AccordionDetails } from '@gnosis.pm/safe-react-components'\n\nimport { currentSafe, currentSafeThreshold } from 'src/logic/safe/store/selectors'\nimport { getLastTxNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus, areEthereumParamsVisible, areSafeParamsEnabled, ethereumTxParametersTitle } from '../utils'\nimport useSafeTxGas from 'src/routes/safe/components/Transactions/helpers/useSafeTxGas'\nimport { isMaxFeeParam } from 'src/logic/safe/transactions/gas'\n\nconst TxParameterWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst AccordionDetailsWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst StyledText = styled(Text)`\n  margin: 8px 0 0 0;\n`\n\nconst ColoredText = styled(Text)<{ isOutOfOrder: boolean }>`\n  color: ${(props) => (props.isOutOfOrder ? props.theme.colors.error : props.color)};\n`\n\nconst StyledButtonLink = styled(ButtonLink)`\n  padding-left: 0;\n  margin: 8px 0 0 0;\n\n  > p {\n    margin-left: 0;\n  }\n`\n\ntype Props = {\n  txParameters: TxParameters\n  onEdit: () => void\n  compact?: boolean\n  parametersStatus?: ParametersStatus\n  isTransactionCreation: boolean\n  isTransactionExecution: boolean\n  isOffChainSignature: boolean\n}\n\nexport const TxParametersDetail = ({\n  onEdit,\n  txParameters,\n  compact = true,\n  parametersStatus,\n  isTransactionCreation,\n  isTransactionExecution,\n  isOffChainSignature,\n}: Props): ReactElement | null => {\n  const { nonce } = useSelector(currentSafe)\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n\n  const [isTxNonceOutOfOrder, setIsTxNonceOutOfOrder] = useState(false)\n  const [isAccordionExpanded, setIsAccordionExpanded] = useState(false)\n\n  const { safeNonce = '' } = txParameters\n  const safeNonceNumber = parseInt(safeNonce, 10)\n  const lastQueuedTxNonce = useSelector(getLastTxNonce)\n  const showSafeTxGas = useSafeTxGas()\n\n  useEffect(() => {\n    if (Number.isNaN(safeNonceNumber)) return\n    if (safeNonceNumber === nonce) return\n    if (lastQueuedTxNonce === undefined && safeNonceNumber !== nonce) {\n      setIsAccordionExpanded(true)\n      setIsTxNonceOutOfOrder(true)\n    }\n    if (lastQueuedTxNonce && safeNonceNumber !== lastQueuedTxNonce + 1) {\n      setIsAccordionExpanded(true)\n      setIsTxNonceOutOfOrder(true)\n    }\n  }, [lastQueuedTxNonce, nonce, safeNonceNumber])\n\n  if (!isTransactionExecution && !isTransactionCreation && isOffChainSignature) {\n    return null\n  }\n\n  const onChangeExpand = () => {\n    setIsAccordionExpanded(!isAccordionExpanded)\n  }\n\n  return (\n    <Accordion compact={compact} expanded={isAccordionExpanded} onChange={onChangeExpand}>\n      <AccordionSummary>\n        <Text size=\"lg\">Advanced options</Text>\n      </AccordionSummary>\n      <AccordionDetails>\n        <AccordionDetailsWrapper>\n          <StyledText size=\"md\" color=\"placeHolder\">\n            Safe transaction\n          </StyledText>\n\n          <TxParameterWrapper>\n            <ColoredText\n              size=\"lg\"\n              isOutOfOrder={isTxNonceOutOfOrder}\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              Safe nonce\n            </ColoredText>\n            <ColoredText\n              size=\"lg\"\n              isOutOfOrder={isTxNonceOutOfOrder}\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              {txParameters.safeNonce}\n            </ColoredText>\n          </TxParameterWrapper>\n\n          {showSafeTxGas && (\n            <TxParameterWrapper>\n              <Text\n                size=\"lg\"\n                color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n              >\n                SafeTxGas\n              </Text>\n              <Text\n                size=\"lg\"\n                color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n              >\n                {txParameters.safeTxGas}\n              </Text>\n            </TxParameterWrapper>\n          )}\n\n          {areEthereumParamsVisible(parametersStatus || defaultParameterStatus) && (\n            <>\n              <TxParameterWrapper>\n                <StyledText size=\"md\" color=\"placeHolder\">\n                  {ethereumTxParametersTitle(isTransactionExecution)}\n                </StyledText>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Nonce</Text>\n                <Text size=\"lg\">{txParameters.ethNonce}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Gas limit</Text>\n                <Text size=\"lg\">{txParameters.ethGasLimit}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">{isMaxFeeParam() ? 'Max fee per gas' : 'Gas price'}</Text>\n                <Text size=\"lg\">{txParameters.ethGasPrice}</Text>\n              </TxParameterWrapper>\n\n              {isMaxFeeParam() && (\n                <TxParameterWrapper>\n                  <Text size=\"lg\">Max priority fee</Text>\n                  <Text size=\"lg\">{txParameters.ethMaxPrioFee}</Text>\n                </TxParameterWrapper>\n              )}\n            </>\n          )}\n          <StyledButtonLink color=\"primary\" textSize=\"xl\" onClick={onEdit}>\n            Edit\n          </StyledButtonLink>\n        </AccordionDetailsWrapper>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import { lg, md, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    height: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  address: {\n    marginRight: sm,\n  },\n  buttonRow: {\n    height: '52px',\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '16px',\n  },\n})\n","import { ReactElement } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Close from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Title, Text, Divider, Link, Icon } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport { styles } from './style'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { minValue } from 'src/components/forms/validator'\nimport { Modal } from 'src/components/Modal'\nimport {\n  ParametersStatus,\n  areSafeParamsEnabled,\n  areEthereumParamsVisible,\n  ethereumTxParametersTitle,\n} from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useSafeTxGas from 'src/routes/safe/components/Transactions/helpers/useSafeTxGas'\nimport { isMaxFeeParam } from 'src/logic/safe/transactions/gas'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport useGetRecommendedNonce from 'src/logic/hooks/useGetRecommendedNonce'\n\nconst StyledDivider = styled(Divider)`\n  margin: 0px;\n`\nconst StyledDividerFooter = styled(Divider)`\n  margin: 16px -24px;\n`\n\nconst SafeOptions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n`\n\nconst EthereumOptions = styled.div`\n  display: flex;\n  /* justify-content: space-between; */\n  flex-wrap: wrap;\n  gap: 10px 20px;\n\n  div {\n    width: 216px !important;\n  }\n`\nconst StyledLink = styled(Link)`\n  margin: 16px 0 0 0;\n  display: inline-flex;\n  align-items: center;\n\n  > :first-of-type {\n    margin-right: 5px;\n  }\n`\nconst StyledText = styled(Text)`\n  margin: 0 0 4px 0;\n`\nconst StyledTextMt = styled(Text)`\n  margin: 16px 0 4px 0;\n`\nconst useStyles = makeStyles(styles)\n\ninterface Props {\n  txParameters: TxParameters\n  onClose: (txParameters?: TxParameters) => void\n  parametersStatus: ParametersStatus\n  isExecution: boolean\n}\n\nconst formValidation = (values: Record<keyof TxParameters, string>): Record<string, number | string | undefined> => {\n  const { ethGasLimit, ethGasPrice, ethMaxPrioFee, ethNonce, safeNonce, safeTxGas } = values ?? {}\n\n  const ethGasLimitValidation = minValue(0, true)(ethGasLimit)\n\n  const ethGasPriceValidation = minValue(0, true)(ethGasPrice)\n\n  const ethMaxPrioFeeValidation = minValue(0, true)(ethMaxPrioFee)\n\n  const ethNonceValidation = minValue(0, true)(ethNonce)\n\n  const safeNonceValidation = minValue(0, true)(safeNonce)\n\n  const safeTxGasValidation = minValue(0, true)(safeTxGas)\n\n  return {\n    ethGasLimit: ethGasLimitValidation,\n    ethGasPrice: ethGasPriceValidation,\n    ethMaxPrioFee: ethMaxPrioFeeValidation,\n    ethNonce: ethNonceValidation,\n    safeNonce: safeNonceValidation,\n    safeTxGas: safeTxGasValidation,\n  }\n}\n\nexport const EditTxParametersForm = ({\n  onClose,\n  txParameters,\n  parametersStatus = 'ENABLED',\n  isExecution,\n}: Props): ReactElement => {\n  const classes = useStyles()\n  const { safeNonce, safeTxGas, ethNonce, ethGasLimit, ethGasPrice, ethMaxPrioFee } = txParameters\n  const showSafeTxGas = useSafeTxGas()\n  const safeAddress = extractSafeAddress()\n  const recommendedNonce = useGetRecommendedNonce(safeAddress)\n\n  const onSubmit = (values: TxParameters) => {\n    onClose(values)\n  }\n\n  const onCloseFormHandler = () => {\n    onClose()\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\n        <Title size=\"sm\" withoutMargin>\n          Advanced options\n        </Title>\n        <IconButton disableRipple onClick={onCloseFormHandler}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n\n      <StyledDivider />\n\n      <Block className={classes.container}>\n        <GnoForm\n          initialValues={{\n            safeNonce: safeNonce || recommendedNonce || '0',\n            safeTxGas: safeTxGas || '',\n            ethNonce: ethNonce || '',\n            ethGasLimit: ethGasLimit || '',\n            ethGasPrice: ethGasPrice || '',\n            ethMaxPrioFee: ethMaxPrioFee || '',\n          }}\n          onSubmit={onSubmit}\n          validation={formValidation}\n        >\n          {() => (\n            <>\n              <StyledText size=\"xl\" strong>\n                Safe transaction\n              </StyledText>\n\n              <SafeOptions>\n                <Field\n                  name=\"safeNonce\"\n                  defaultValue={safeNonce}\n                  placeholder=\"Safe nonce\"\n                  text=\"Safe nonce\"\n                  type=\"number\"\n                  min=\"0\"\n                  component={TextField}\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\n                />\n                {showSafeTxGas && (\n                  <Field\n                    name=\"safeTxGas\"\n                    defaultValue={safeTxGas}\n                    placeholder=\"SafeTxGas\"\n                    text=\"SafeTxGas\"\n                    type=\"number\"\n                    min=\"0\"\n                    component={TextField}\n                    disabled={!areSafeParamsEnabled(parametersStatus)}\n                  />\n                )}\n              </SafeOptions>\n\n              {areEthereumParamsVisible(parametersStatus) && (\n                <>\n                  <StyledTextMt size=\"xl\" strong>\n                    {ethereumTxParametersTitle(isExecution)}\n                  </StyledTextMt>\n\n                  <EthereumOptions>\n                    <Field\n                      name=\"ethNonce\"\n                      defaultValue={ethNonce}\n                      placeholder=\"Nonce\"\n                      text=\"Nonce\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\n                    />\n                    <Field\n                      name=\"ethGasLimit\"\n                      defaultValue={ethGasLimit}\n                      placeholder=\"Gas limit\"\n                      text=\"Gas limit\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={parametersStatus === 'CANCEL_TRANSACTION'}\n                    />\n                    {((gasPriceText) => (\n                      <Field\n                        name=\"ethGasPrice\"\n                        defaultValue={ethGasPrice}\n                        type=\"number\"\n                        placeholder={gasPriceText}\n                        text={gasPriceText}\n                        component={TextField}\n                        disabled={!areEthereumParamsVisible(parametersStatus)}\n                      />\n                    ))(`${isMaxFeeParam() ? 'Max fee per gas' : 'Gas price'} (GWEI)`)}\n\n                    {isMaxFeeParam() && (\n                      <Field\n                        name=\"ethMaxPrioFee\"\n                        defaultValue={ethMaxPrioFee}\n                        type=\"number\"\n                        placeholder=\"Max priority fee (GWEI)\"\n                        text=\"Max priority fee (GWEI)\"\n                        component={TextField}\n                        disabled={!areEthereumParamsVisible(parametersStatus)}\n                      />\n                    )}\n                  </EthereumOptions>\n\n                  <StyledLink\n                    href=\"https://help.gnosis-safe.io/en/articles/4738445-configure-advanced-transaction-parameters-manually\"\n                    target=\"_blank\"\n                  >\n                    <Text size=\"xl\" color=\"primary\">\n                      How can I configure these parameters manually?\n                    </Text>\n                    <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n                  </StyledLink>\n                </>\n              )}\n\n              <StyledDividerFooter />\n\n              {/* Footer */}\n              <Row align=\"center\" className={classes.buttonRow}>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onCloseFormHandler, text: 'Back' }}\n                  confirmButtonProps={{\n                    type: 'submit',\n                    text: 'Confirm',\n                    testId: 'submit-tx-btn',\n                  }}\n                />\n              </Row>\n            </>\n          )}\n        </GnoForm>\n      </Block>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { TxParameters, useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditTxParametersForm } from 'src/routes/safe/components/Transactions/helpers/EditTxParametersForm'\nimport { ParametersStatus } from './utils'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\n\ntype Props = {\n  children: (txParameters: TxParameters, toggleStatus: (txParameters?: TxParameters) => void) => any\n  isOffChainSignature: boolean\n  isExecution: boolean\n  parametersStatus?: ParametersStatus\n  ethGasLimit?: TxParameters['ethGasLimit']\n  ethGasPrice?: TxParameters['ethGasPrice']\n  ethMaxPrioFee?: TxParameters['ethMaxPrioFee']\n  safeNonce?: TxParameters['safeNonce']\n  safeTxGas?: TxParameters['safeTxGas']\n  closeEditModalCallback?: (txParameters: TxParameters) => void\n}\n\nexport const EditableTxParameters = ({\n  children,\n  isOffChainSignature,\n  isExecution,\n  parametersStatus,\n  ethGasLimit,\n  ethGasPrice,\n  ethMaxPrioFee,\n  safeNonce,\n  safeTxGas,\n  closeEditModalCallback,\n}: Props): React.ReactElement => {\n  const [isEditMode, toggleEditMode] = useState(false)\n  const [useManualValues, setUseManualValues] = useState(false)\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n  const txParameters = useTransactionParameters({\n    parameterStatus: parametersStatus || defaultParameterStatus,\n    initialEthGasLimit: ethGasLimit,\n    initialEthGasPrice: ethGasPrice,\n    initialEthMaxPrioFee: ethMaxPrioFee,\n    initialSafeNonce: safeNonce,\n    initialSafeTxGas: safeTxGas,\n  })\n  const { setEthGasPrice, setEthGasLimit, setEthMaxPrioFee, setSafeNonce, setSafeTxGas, setEthNonce } = txParameters\n\n  // Update TxParameters\n  useEffect(() => {\n    if (!useManualValues) {\n      setEthGasLimit(ethGasLimit)\n      setEthGasPrice(ethGasPrice)\n      setEthMaxPrioFee(ethMaxPrioFee)\n      setSafeTxGas(safeTxGas)\n    }\n  }, [\n    ethGasLimit,\n    setEthGasLimit,\n    ethGasPrice,\n    setEthGasPrice,\n    useManualValues,\n    safeTxGas,\n    setSafeTxGas,\n    setEthMaxPrioFee,\n    ethMaxPrioFee,\n  ])\n\n  const toggleStatus = () => {\n    toggleEditMode((prev) => !prev)\n  }\n\n  const closeEditFormHandler = (txParameters?: TxParameters) => {\n    if (txParameters) {\n      setUseManualValues(true)\n      setSafeNonce(txParameters.safeNonce)\n      setSafeTxGas(txParameters.safeTxGas)\n      setEthGasLimit(txParameters.ethGasLimit)\n      setEthGasPrice(txParameters.ethGasPrice)\n      setEthMaxPrioFee(txParameters.ethMaxPrioFee)\n      setEthNonce(txParameters.ethNonce)\n      closeEditModalCallback && closeEditModalCallback(txParameters)\n    }\n    toggleStatus()\n  }\n\n  return isEditMode ? (\n    <EditTxParametersForm\n      isExecution={isExecution}\n      txParameters={txParameters}\n      onClose={closeEditFormHandler}\n      parametersStatus={parametersStatus ? parametersStatus : defaultParameterStatus}\n    />\n  ) : (\n    children(txParameters, toggleStatus)\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { sm } from 'src/theme/variables'\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Img from 'src/components/layout/Img'\nimport InfoIcon from 'src/assets/icons/info_red.svg'\n\nimport { useSelector } from 'react-redux'\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\nimport { shouldSwitchWalletChain } from 'src/logic/wallets/store/selectors'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\n\nconst styles = createStyles({\n  executionWarningRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  warningIcon: {\n    marginRight: sm,\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  isExecution: boolean\n}\n\nexport const TransactionFailText = ({\n  txEstimationExecutionStatus,\n  isExecution,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const classes = useStyles()\n  const threshold = useSelector(currentSafeThreshold)\n  const isWrongChain = useSelector(shouldSwitchWalletChain)\n  const isGranted = useSelector(grantedSelector)\n\n  if (txEstimationExecutionStatus !== EstimationStatus.FAILURE) {\n    return null\n  }\n\n  let errorDesc = 'To save gas costs, avoid creating the transaction.'\n  if (isExecution) {\n    errorDesc =\n      threshold && threshold > 1\n        ? `To save gas costs, reject this transaction`\n        : `To save gas costs, avoid executing the transaction.`\n  }\n\n  const error = isGranted\n    ? `This transaction will most likely fail. ${errorDesc}`\n    : isWrongChain\n    ? 'Your wallet is connected to the wrong chain.'\n    : \"You are currently not an owner of this Safe and won't be able to submit this transaction.\"\n\n  return (\n    <Row align=\"center\">\n      <Paragraph color=\"error\" className={classes.executionWarningRow}>\n        <Img alt=\"Info Tooltip\" height={16} src={InfoIcon} className={classes.warningIcon} />\n        {error}\n      </Paragraph>\n    </Row>\n  )\n}\n","import { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { getNativeCurrency } from 'src/config'\nimport { TransactionFailText } from 'src/components/TransactionFailText'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\nimport { useSelector } from 'react-redux'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasCostFormatted?: string\n  isExecution: boolean\n  isCreation: boolean\n}\n\nexport const TransactionFees = ({\n  gasCostFormatted,\n  isExecution,\n  isCreation,\n  txEstimationExecutionStatus,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const { currentVersion: safeVersion } = useSelector(currentSafe)\n  const { smartContractWallet } = useSelector(providerSelector)\n  const canTxExecute = useCanTxExecute(isExecution)\n  const isOffChainSignature = checkIfOffChainSignatureIsPossible(canTxExecute, smartContractWallet, safeVersion)\n\n  const nativeCurrency = getNativeCurrency()\n  let transactionAction\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    return null\n  }\n  if (isCreation) {\n    transactionAction = 'create'\n  } else if (isExecution) {\n    transactionAction = 'execute'\n  } else {\n    transactionAction = 'approve'\n  }\n\n  return (\n    <>\n      {gasCostFormatted != null && (\n        <Paragraph size=\"lg\" align=\"center\">\n          You&apos;re about to {transactionAction} a transaction and will have to confirm it with your currently\n          connected wallet.{' '}\n          {!isOffChainSignature && (\n            <>\n              Make sure you have\n              <Text size=\"lg\" as=\"span\" color=\"text\" strong>\n                {' '}\n                {gasCostFormatted} {nativeCurrency.symbol}{' '}\n              </Text>\n              in this wallet to fund the associated transaction fee.\n            </>\n          )}\n        </Paragraph>\n      )}\n      <TransactionFailText txEstimationExecutionStatus={txEstimationExecutionStatus} isExecution={isExecution} />\n    </>\n  )\n}\n","import styled from 'styled-components'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport { useSelector } from 'react-redux'\n\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { getLastTxNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { lg, sm } from 'src/theme/variables'\nimport { TransactionFees } from '../TransactionsFees'\nimport { getRecommendedNonce } from 'src/logic/safe/api/fetchSafeTxGasEstimation'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ComponentProps, useEffect, useState } from 'react'\n\ntype CustomReviewInfoTextProps = {\n  safeNonce?: string\n  testId?: string\n}\n\ntype ReviewInfoTextProps = ComponentProps<typeof TransactionFees> & CustomReviewInfoTextProps\n\nconst ReviewInfoTextWrapper = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: ${sm} ${lg};\n`\n\nexport const ReviewInfoText = ({\n  gasCostFormatted,\n  isCreation,\n  isExecution,\n  safeNonce: txParamsSafeNonce = '',\n  testId,\n  txEstimationExecutionStatus,\n}: ReviewInfoTextProps): React.ReactElement => {\n  const { nonce } = useSelector(currentSafe)\n  const safeNonceNumber = parseInt(txParamsSafeNonce, 10)\n  const lastTxNonce = useSelector(getLastTxNonce)\n  const storeNextNonce = `${lastTxNonce && lastTxNonce + 1}`\n  const safeAddress = extractSafeAddress()\n  const [recommendedNonce, setRecommendedNonce] = useState<string>(storeNextNonce)\n\n  useEffect(() => {\n    const fetchRecommendedNonce = async () => {\n      try {\n        const recommendedNonce = (await getRecommendedNonce(safeAddress)).toString()\n        setRecommendedNonce(recommendedNonce)\n      } catch (e) {\n        return\n      }\n    }\n    fetchRecommendedNonce()\n  }, [safeAddress])\n\n  const warningMessage = () => {\n    const isTxNonceOutOfOrder = () => {\n      // safeNonce can be undefined while waiting for the request.\n      if (isNaN(safeNonceNumber) || safeNonceNumber === nonce) return false\n      if (lastTxNonce !== undefined && safeNonceNumber === lastTxNonce + 1) return false\n      return true\n    }\n    const shouldShowWarning = isTxNonceOutOfOrder()\n    if (!shouldShowWarning) return null\n\n    const transactionsToGo = safeNonceNumber - nonce\n    return (\n      <Paragraph size=\"lg\" align=\"center\">\n        {transactionsToGo < 0 ? (\n          `Nonce ${txParamsSafeNonce} has already been used. Your transaction will fail. Please use nonce ${recommendedNonce}.`\n        ) : (\n          <>\n            <Text size=\"lg\" as=\"span\" color=\"text\" strong>\n              {transactionsToGo}\n            </Text>\n            {` transaction${\n              transactionsToGo > 1 ? 's' : ''\n            } will need to be created and executed before this transaction,\n        are you sure you want to do this?`}\n          </>\n        )}\n      </Paragraph>\n    )\n  }\n\n  return (\n    <ReviewInfoTextWrapper data-testid={testId}>\n      {warningMessage() || (\n        <TransactionFees\n          gasCostFormatted={gasCostFormatted}\n          isCreation={isCreation}\n          isExecution={isExecution}\n          txEstimationExecutionStatus={txEstimationExecutionStatus}\n        />\n      )}\n    </ReviewInfoTextWrapper>\n  )\n}\n","import { ReactElement } from 'react'\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from '../layout/Paragraph'\n\ninterface ExecuteCheckboxProps {\n  onChange: (val: boolean) => unknown\n}\n\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.target.checked)\n  }\n  return (\n    <Row margin=\"md\">\n      <Paragraph noMargin>\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\n      </Paragraph>\n      <FormControlLabel\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\n        label=\"Execute transaction\"\n        data-testid=\"execute-checkbox\"\n      />\n    </Row>\n  )\n}\n\nexport default ExecuteCheckbox\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nimport { EstimationStatus } from './useEstimateTransactionGas'\nimport { ButtonStatus } from 'src/components/Modal'\n\nexport const useEstimationStatus = (\n  txEstimationStatus?: EstimationStatus,\n): [buttonStatus: ButtonStatus, setButtonStatus: Dispatch<SetStateAction<ButtonStatus>>] => {\n  const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(ButtonStatus.DISABLED)\n\n  useEffect(() => {\n    let mounted = true\n\n    if (mounted) {\n      switch (txEstimationStatus) {\n        case EstimationStatus.LOADING:\n          setButtonStatus(ButtonStatus.LOADING)\n          break\n        default:\n          setButtonStatus(ButtonStatus.READY)\n          break\n      }\n    }\n\n    return () => {\n      mounted = false\n    }\n  }, [txEstimationStatus])\n\n  return [buttonStatus, setButtonStatus]\n}\n","export default __webpack_public_path__ + \"static/media/info_red.2d444d88.svg\";","import { SafeTransactionEstimation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getRecommendedNonce } from '../safe/api/fetchSafeTxGasEstimation'\nimport { getLastTxNonce } from '../safe/store/selectors/gatewayTransactions'\n\ntype UseGetRecommendedNonce = (safeAddress: string) => number | undefined\n\nconst useGetRecommendedNonce: UseGetRecommendedNonce = (safeAddress) => {\n  const lastTxNonce = useSelector(getLastTxNonce)\n  const storeNextNonce = lastTxNonce ? lastTxNonce + 1 : undefined\n\n  const [recommendedNonce, setRecommendedNonce] = useState<number | undefined>(storeNextNonce)\n\n  useEffect(() => {\n    let isCurrent = true\n\n    const fetchRecommendedNonce = async () => {\n      let recommendedNonce: SafeTransactionEstimation['recommendedNonce']\n      try {\n        recommendedNonce = await getRecommendedNonce(safeAddress)\n      } catch (e) {\n        return\n      }\n\n      if (isCurrent) {\n        setRecommendedNonce(recommendedNonce)\n      }\n    }\n    fetchRecommendedNonce()\n\n    return () => {\n      isCurrent = false\n    }\n  }, [lastTxNonce, safeAddress])\n\n  return recommendedNonce\n}\n\nexport default useGetRecommendedNonce\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { toWei } from 'web3-utils'\n\nimport { getUserNonce } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { sameString } from 'src/utils/strings'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { AppReduxState } from 'src/store'\nimport { getRecommendedNonce } from 'src/logic/safe/api/fetchSafeTxGasEstimation'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\nexport type TxParameters = {\n  safeNonce?: string\n  setSafeNonce: (safeNonce?: string) => void\n  safeTxGas?: string\n  setSafeTxGas: (gas?: string) => void\n  ethNonce?: string\n  setEthNonce: (ethNonce?: string) => void\n  ethGasLimit?: string\n  setEthGasLimit: (ethGasLimit?: string) => void\n  ethGasPrice?: string\n  setEthGasPrice: (ethGasPrice?: string) => void\n  ethMaxPrioFee?: string\n  setEthMaxPrioFee: (maxPrioFee?: string) => void\n  ethGasPriceInGWei?: string\n  ethMaxPrioFeeInGWei?: string\n}\n\ntype Props = {\n  parameterStatus?: ParametersStatus\n  initialSafeNonce?: string\n  initialSafeTxGas?: string\n  initialEthGasLimit?: string\n  initialEthGasPrice?: string\n  initialEthMaxPrioFee?: string\n}\n\n/**\n * This hooks is used to store tx parameter\n * It needs to be initialized calling setGasEstimation.\n */\nexport const useTransactionParameters = (props?: Props): TxParameters => {\n  const isCancelTransaction = sameString(props?.parameterStatus || 'ENABLED', 'CANCEL_TRANSACTION')\n  const connectedWalletAddress = useSelector(userAccountSelector)\n  const safeAddress = extractSafeAddress()\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\n  const state = useSelector((state: AppReduxState) => state)\n\n  // Safe Params\n  const [safeNonce, setSafeNonce] = useState<string | undefined>(props?.initialSafeNonce)\n  // SafeTxGas: for a new Tx call requiredTxGas, for an existing tx get it from the backend.\n  const [safeTxGas, setSafeTxGas] = useState<string | undefined>(isCancelTransaction ? '0' : props?.initialSafeTxGas)\n\n  // ETH Params\n  const [ethNonce, setEthNonce] = useState<string | undefined>() // we delegate it to the wallet\n  const [ethGasLimit, setEthGasLimit] = useState<string | undefined>(props?.initialEthGasLimit) // call execTx until it returns a number > 0\n  const [ethGasPrice, setEthGasPrice] = useState<string | undefined>(props?.initialEthGasPrice) // get fast gas price\n  const [ethGasPriceInGWei, setEthGasPriceInGWei] = useState<string>() // get fast gas price\n  const [ethMaxPrioFee, setEthMaxPrioFee] = useState<string>() // get max prio fee\n  const [ethMaxPrioFeeInGWei, setEthMaxPrioFeeInGWei] = useState<string>() // get max prio fee in gwei\n\n  // Get nonce for connected wallet\n  useEffect(() => {\n    const getNonce = async () => {\n      const res = await getUserNonce(connectedWalletAddress)\n      setEthNonce(res.toString())\n    }\n\n    if (connectedWalletAddress) {\n      getNonce()\n    }\n  }, [connectedWalletAddress])\n\n  // Get ETH gas price\n  useEffect(() => {\n    if (!ethGasPrice) {\n      setEthGasPriceInGWei(undefined)\n      return\n    }\n    if (isCancelTransaction) {\n      setEthGasPrice('0')\n      return\n    }\n    setEthGasPriceInGWei(toWei(ethGasPrice, 'Gwei'))\n  }, [ethGasPrice, isCancelTransaction])\n\n  // Get max prio fee\n  useEffect(() => {\n    if (!ethMaxPrioFee) {\n      setEthMaxPrioFee(undefined)\n      return\n    }\n    if (isCancelTransaction) {\n      setEthMaxPrioFee('0')\n      return\n    }\n    setEthMaxPrioFeeInGWei(toWei(ethMaxPrioFee, 'Gwei'))\n  }, [ethMaxPrioFee, isCancelTransaction])\n\n  // Calc safe nonce\n  useEffect(() => {\n    const getSafeNonce = async () => {\n      if (safeAddress) {\n        try {\n          const recommendedNonce = (await getRecommendedNonce(safeAddress)).toString()\n          setSafeNonce(recommendedNonce)\n        } catch (e) {\n          logError(Errors._616, e.message)\n        }\n      }\n    }\n\n    if (safeNonce === undefined) {\n      getSafeNonce()\n    }\n  }, [safeAddress, safeVersion, safeNonce, state])\n\n  return {\n    safeNonce,\n    setSafeNonce,\n    safeTxGas,\n    setSafeTxGas,\n    ethNonce,\n    setEthNonce,\n    ethGasLimit,\n    setEthGasLimit,\n    ethGasPrice,\n    setEthGasPrice,\n    ethMaxPrioFee,\n    setEthMaxPrioFee,\n    ethGasPriceInGWei,\n    ethMaxPrioFeeInGWei,\n  }\n}\n","import { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useSelector } from 'react-redux'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nconst useSafeTxGas = (): boolean => {\n  const safeVersion = useSelector(currentSafeCurrentVersion)\n  const showSafeTxGas = !hasFeature(FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion)\n  return showSafeTxGas\n}\n\nexport default useSafeTxGas\n"],"sourceRoot":""}