{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow.tsx","routes/safe/components/Balances/SendModal/screens/SendFunds/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/index.tsx","components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Transactions/helpers/utils.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","components/layout/ButtonLink/index.tsx","components/layout/ButtonLink/index.module.scss","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/index.tsx"],"names":["SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","SpendingLimitRow","tokenSpendingLimit","selectedToken","availableAmount","useMemo","fromTokenUnit","BigNumber","amount","minus","spent","toString","decimals","mutators","useForm","Row","margin","Col","between","style","flexDirection","size","Field","name","initialValue","input","value","onRadioChange","setTxType","options","label","symbol","styles","createStyles","manage","fontSize","lg","qrCodeBtn","cursor","formContainer","padding","md","minHeight","buttonRow","height","justifyContent","gap","selectAddress","formMutators","setMax","args","state","utils","changeValue","onTokenChange","formState","values","setRecipient","useStyles","makeStyles","InputAdornmentChildSymbol","SendFunds","initialValues","onClose","onReview","recipientAddress","classes","tokens","useSelector","extendedSafeTokensSelector","addressBook","currentNetworkAddressBook","nativeCurrency","getNativeCurrency","useState","defaultEntry","address","predefinedAddress","addressBookEntry","find","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","addressErrorMsg","setAddressErrorMsg","useEffect","spendingLimits","currentSafeSpendingLimits","currentUser","userAccountSelector","ModalHeader","subTitle","title","Hairline","GnoForm","token","onSubmit","submitValues","recipientName","validation","tokenAddress","txType","tokenValidation","composeValidators","required","isSpendingLimitTx","isSpendingLimit","tokenDecimals","Number","getBalanceAndDecimalsFromToken","mustBeFloat","minMaxDecimalsLength","minValue","maxValue","spendingLimitAllowedBalance","balance","userSpendingLimits","filter","delegate","getSpendingLimitByTokenAddress","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","setMaxAllowedAmount","maxAmount","tokenBalance","spendingLimitBalance","gt","Block","className","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","onClick","role","tabIndex","Paragraph","color","noMargin","letterSpacing","align","PrefixedEthHashInfo","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","xs","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","TokenSelectField","isValid","ButtonLink","weight","testId","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","valid","GnoField","props","overflowStyle","overflow","width","root","paddingTop","paddingBottom","lineHeight","onChange","restInput","meta","multiline","rows","rest","helperText","undefined","showError","touched","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","stylesBasedOn","flex","children","decorators","subscription","render","handleSubmit","submitting","validating","form","validate","setImageToPlaceholder","event","img","currentTarget","test","src","TokenPlaceholder","areEthereumParamsVisible","parametersStatus","areSafeParamsEnabled","ethereumTxParametersTitle","isExecution","getInteractionTitle","Bold","this","React","heading","maxHeight","boxSizing","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","background","button","marginLeft","sm","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","onFileScannedResolve","successData","console","description","handleClose","open","grow","IconButton","disableRipple","layout","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","Img","alt","QRIcon","Wrapper","div","StyledDivider","DividerSRC","SelectInput","disableError","formControlProps","renderValue","dirtySinceLastSubmit","htmlFor","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","a","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","chainId","labelStyles","inputStyles","Autocomplete","closeIcon","openOnFocus","filterOptions","freeSolo","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","getOptionLabel","renderOption","display","flexGrow","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","cx","cn","bind","GnoButtonLink","btnLink","module","exports","ListItemIcon","other","_objectWithoutProperties","context","ListContext","_extends","clsx","alignItems","alignItemsFlexStart","withStyles","palette","action","flexShrink","marginTop","useSelectedTokenStyles","container","tokenData","tokenImage","marginRight","useSelectStyles","selectMenu","paddingRight","SelectedToken","MenuItem","logoUri","ListItemText","secondary","formatAmount","tokenClasses","SelectField","displayEmpty","map"],"mappings":"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","file":"static/js/40.2abba67c.chunk.js","sourcesContent":["import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\nimport { BigNumber } from 'bignumber.js'\nimport { ReactElement, useMemo } from 'react'\nimport { useForm } from 'react-final-form'\nimport styled from 'styled-components'\n\nimport Field from 'src/components/forms/Field'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\n\n// TODO: propose refactor in safe-react-components based on this requirements\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\n  & .MuiRadio-colorPrimary.Mui-checked {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\ninterface SpendingLimitRowProps {\n  tokenSpendingLimit: SpendingLimit\n  selectedToken: Token\n}\n\nexport const SpendingLimitRow = ({ tokenSpendingLimit, selectedToken }: SpendingLimitRowProps): ReactElement => {\n  const availableAmount = useMemo(() => {\n    return fromTokenUnit(\n      new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\n      selectedToken.decimals,\n    )\n  }, [selectedToken.decimals, tokenSpendingLimit.amount, tokenSpendingLimit.spent])\n  const { mutators } = useForm()\n\n  return (\n    <Row margin=\"sm\">\n      <Col between=\"lg\" style={{ flexDirection: 'column' }}>\n        <Text size=\"lg\">Send as</Text>\n        <Field name=\"txType\" initialValue=\"multiSig\">\n          {({ input: { name, value } }) => (\n            <SpendingLimitRadioButtons\n              name={name}\n              value={value || 'multiSig'}\n              onRadioChange={mutators.setTxType}\n              options={[\n                { label: 'Multisig transaction', value: 'multiSig' },\n                {\n                  label: `Spending limit transaction (${availableAmount} ${selectedToken.symbol})`,\n                  value: 'spendingLimit',\n                },\n              ]}\n            />\n          )}\n        </Field>\n      </Col>\n    </Row>\n  )\n}\n","import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  manage: {\n    fontSize: lg,\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    minHeight: '216px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { BigNumber } from 'bignumber.js'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport {\n  composeValidators,\n  maxValue,\n  minValue,\n  minMaxDecimalsLength,\n  mustBeFloat,\n  mustBeEthereumAddress,\n  required,\n} from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\n\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { SpendingLimitRow } from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow'\nimport TokenSelectField from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { currentSafeSpendingLimits } from 'src/logic/safe/store/selectors'\nimport { sameString } from 'src/utils/strings'\n\nimport { styles } from './style'\nimport { spendingLimitAllowedBalance, getSpendingLimitByTokenAddress } from 'src/logic/safe/utils/spendingLimits'\nimport { getBalanceAndDecimalsFromToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport Divider from 'src/components/Divider'\nimport { Modal } from 'src/components/Modal'\nimport { ModalHeader } from '../ModalHeader'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\n\nconst formMutators = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => args[0])\n  },\n  onTokenChange: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => state.formState.values.amount)\n  },\n  setRecipient: (args, state, utils) => {\n    utils.changeValue(state, 'recipientAddress', () => args[0])\n  },\n  setTxType: (args, state, utils) => {\n    utils.changeValue(state, 'txType', () => args[0])\n  },\n}\n\nconst useStyles = makeStyles(styles)\n\nexport type SendFundsTx = {\n  amount?: string\n  recipientAddress?: string\n  name?: string\n  token?: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype SendFundsProps = {\n  initialValues: SendFundsTx\n  onClose: () => void\n  onReview: (txInfo: unknown) => void\n  recipientAddress?: string\n  selectedToken?: string\n  amount?: string\n}\n\nconst InputAdornmentChildSymbol = ({ symbol }: { symbol?: string }): ReactElement => {\n  return <>{symbol}</>\n}\n\nconst SendFunds = ({\n  initialValues,\n  onClose,\n  onReview,\n  recipientAddress,\n  selectedToken = '',\n  amount,\n}: SendFundsProps): ReactElement => {\n  const classes = useStyles()\n  const tokens = useSelector(extendedSafeTokensSelector)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const nativeCurrency = getNativeCurrency()\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\n    const defaultEntry = { address: recipientAddress || '', name: '' }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!initialValues?.recipientAddress && !recipientAddress) {\n      return defaultEntry\n    }\n\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\n    const addressBookEntry = addressBook.find(({ address }) => {\n      return sameAddress(predefinedAddress, address)\n    })\n\n    // if found in the Address Book, then we return the entry\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    // otherwise we return the default entry\n    return defaultEntry\n  })\n  const [pristine, setPristine] = useState(true)\n  const [isValidAddress, setIsValidAddress] = useState(false)\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\n\n  useEffect(() => {\n    if (selectedEntry === null && pristine) {\n      setPristine(false)\n    }\n  }, [selectedEntry, pristine])\n\n  let tokenSpendingLimit\n  const handleSubmit = (values) => {\n    const submitValues = { ...values }\n    // If the input wasn't modified, there was no mutation of the recipientAddress\n    if (!values.recipientAddress) {\n      submitValues.recipientAddress = selectedEntry?.address\n    }\n    submitValues.recipientName = selectedEntry?.name\n    onReview({ ...submitValues, tokenSpendingLimit })\n  }\n\n  const spendingLimits = useSelector(currentSafeSpendingLimits)\n  const currentUser = useSelector(userAccountSelector)\n\n  const sendFundsValidation = (values: { amount?: string; token?: string; txType?: string }) => {\n    const { amount, token: tokenAddress, txType } = values ?? {}\n    const tokenValidation = composeValidators(required)(tokenAddress)\n\n    const isSpendingLimitTx = tokenSpendingLimit && isSpendingLimit(txType)\n    const tokenDecimals =\n      (tokenAddress && Number(getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.decimals)) ||\n      nativeCurrency.decimals\n    const amountValidation = composeValidators(\n      required,\n      mustBeFloat,\n      minMaxDecimalsLength(1, tokenDecimals),\n      minValue(0, false),\n      tokenAddress\n        ? maxValue(\n            isSpendingLimitTx\n              ? spendingLimitAllowedBalance({ tokenAddress, tokenSpendingLimit, tokens })\n              : getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.balance ?? 0,\n          )\n        : () => undefined,\n    )(amount)\n\n    return {\n      amount: amountValidation,\n      token: tokenValidation,\n    }\n  }\n\n  return (\n    <>\n      <ModalHeader onClose={onClose} subTitle=\"1 of 2\" title=\"Send funds\" />\n      <Hairline />\n      <GnoForm\n        formMutators={formMutators}\n        initialValues={{\n          amount: initialValues?.amount || amount,\n          recipientAddress: initialValues.recipientAddress || recipientAddress,\n          token: initialValues?.token || selectedToken,\n        }}\n        onSubmit={handleSubmit}\n        validation={sendFundsValidation}\n      >\n        {(...args) => {\n          const formState = args[2]\n          const mutators = args[3]\n          const { token: tokenAddress, txType } = formState.values\n          const selectedToken = tokens?.find((token) => token.address === tokenAddress)\n          const userSpendingLimits = spendingLimits?.filter(({ delegate }) => sameAddress(delegate, currentUser))\n\n          tokenSpendingLimit = getSpendingLimitByTokenAddress({\n            spendingLimits: userSpendingLimits,\n            tokenAddress: selectedToken?.address,\n          })\n\n          const handleScan = (value, closeQrModal) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n            const scannedName = addressBook.find(({ address }) => {\n              return sameAddress(scannedAddress, address)\n            })?.name\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\n            if (!addressErrorMessage) {\n              mutators.setRecipient(scannedAddress)\n              setSelectedEntry({\n                name: scannedName || '',\n                address: scannedAddress,\n              })\n              setAddressErrorMsg('')\n            } else setAddressErrorMsg(addressErrorMessage)\n\n            closeQrModal()\n          }\n\n          let shouldDisableSubmitButton = !isValidAddress\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          const setMaxAllowedAmount = () => {\n            const isSpendingLimitTx = tokenSpendingLimit && isSpendingLimit(txType)\n            let maxAmount = selectedToken?.balance.tokenBalance ?? 0\n\n            if (isSpendingLimitTx) {\n              const spendingLimitBalance = fromTokenUnit(\n                new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\n                selectedToken?.decimals ?? 0,\n              )\n\n              maxAmount = new BigNumber(maxAmount).gt(spendingLimitBalance) ? spendingLimitBalance : maxAmount\n            }\n\n            mutators.setMax(maxAmount)\n          }\n\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    onClick={() => {\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <PrefixedEthHashInfo\n                        hash={selectedEntry.address}\n                        name={selectedEntry.name}\n                        showAvatar\n                        showCopyBtn\n                        explorerUrl={getExplorerInfo(selectedEntry.address)}\n                      />\n                    </Row>\n                  </div>\n                ) : (\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressBookInput\n                        fieldMutator={mutators.setRecipient}\n                        pristine={pristine}\n                        errorMsg={addressErrorMsg}\n                        setIsValidAddress={setIsValidAddress}\n                        setSelectedEntry={setSelectedEntry}\n                      />\n                    </Col>\n                    <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                      <ScanQRWrapper handleScan={handleScan} />\n                    </Col>\n                  </Row>\n                )}\n                <Row margin=\"sm\">\n                  <Col>\n                    <TokenSelectField\n                      initialValue={selectedToken?.address}\n                      isValid={!!selectedToken?.address}\n                      tokens={tokens}\n                    />\n                  </Col>\n                </Row>\n                {tokenSpendingLimit && selectedToken && (\n                  <SpendingLimitRow selectedToken={selectedToken} tokenSpendingLimit={tokenSpendingLimit} />\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Amount\n                    </Paragraph>\n                    <ButtonLink onClick={setMaxAllowedAmount} weight=\"bold\" testId=\"send-max-btn\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <InputAdornmentChildSymbol symbol={selectedToken?.symbol} />\n                          </InputAdornment>\n                        ),\n                      }}\n                      name=\"amount\"\n                      placeholder=\"Amount*\"\n                      text=\"Amount*\"\n                      type=\"text\"\n                      testId=\"amount-input\"\n                    />\n                  </Col>\n                </Row>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{\n                    disabled: !formState.valid || shouldDisableSubmitButton,\n                    testId: 'review-tx-btn',\n                    text: 'Review',\n                  }}\n                />\n              </Modal.Footer>\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendFunds\n","import { Field } from 'react-final-form'\n\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import { ReactElement } from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any): ReactElement => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import { getNativeCurrency } from 'src/config'\nimport { sameString } from 'src/utils/strings'\n\nexport type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\n\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' ||\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\n}\n\nexport const getInteractionTitle = (value: number | string): string => {\n  if (Number(value) === 0) {\n    return 'Interact with:'\n  }\n\n  const { symbol } = getNativeCurrency()\n  return `Interact with (and send ${value} ${symbol} to):`\n}\n\nexport const isSpendingLimit = (txType?: string): boolean => sameString(txType, 'spendingLimit')\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render(): React.ReactElement {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\n\nconst style = {\n  minWidth: '100%',\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}) => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      borderRadius: 4,\n      fontSize: '15px',\n      width: '500px',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    root: {\n      fontSize: '14px',\n      width: '420px',\n    },\n  }),\n)\n","import MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const networkId = useSelector(currentChainId)\n\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    // Automatically checksum valid addresses\n    const { address } = parsePrefixedAddress(fullAddress)\n    const checkedAddr = checksumAddress(address) || address\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId: networkId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId: networkId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus={true}\n          error={!!validationText}\n          fullWidth\n          variant=\"filled\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import cn from 'classnames/bind'\nimport { ReactElement } from 'react'\n\nimport styles from './index.module.scss'\n\nconst cx = cn.bind(styles)\n\nconst GnoButtonLink = ({\n  className = '',\n  color = 'secondary',\n  size = 'md',\n  testId = '',\n  type = 'button',\n  weight = 'regular',\n  ...props\n}: any): ReactElement => (\n  <button className={cx(styles.btnLink, size, color, weight, className)} data-testid={testId} type={type} {...props} />\n)\n\nexport default GnoButtonLink\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnLink\":\"ButtonLink_btnLink__2rBv1\",\"sm\":\"ButtonLink_sm__2XeMm\",\"md\":\"ButtonLink_md__10EHF\",\"lg\":\"ButtonLink_lg__2Kcwq\",\"xl\":\"ButtonLink_xl__6dAvL\",\"xxl\":\"ButtonLink_xxl__1vDEe\",\"light\":\"ButtonLink_light__Mm9YW\",\"regular\":\"ButtonLink_regular__1AG-6\",\"bolder\":\"ButtonLink_bolder__3ct9k\",\"bold\":\"ButtonLink_bold__1xcem\",\"soft\":\"ButtonLink_soft__A3eel\",\"medium\":\"ButtonLink_medium__11jJn\",\"dark\":\"ButtonLink_dark__3rdGd\",\"fancy\":\"ButtonLink_fancy__3RdDX\",\"warning\":\"ButtonLink_warning__2LPUt\",\"primary\":\"ButtonLink_primary__3YtLM\",\"secondary\":\"ButtonLink_secondary__1m9oP\",\"disabled\":\"ButtonLink_disabled__1iofK\",\"error\":\"ButtonLink_error__PjJFh\",\"white\":\"ButtonLink_white__Zl2yK\"};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import { createStyles, makeStyles } from '@material-ui/core'\n\nimport { sm } from 'src/theme/variables'\n\nexport const useSelectedTokenStyles = makeStyles(\n  createStyles({\n    container: {\n      minHeight: '55px',\n      padding: 0,\n      width: '100%',\n    },\n    tokenData: {\n      padding: 0,\n      margin: 0,\n      lineHeight: '14px',\n    },\n    tokenImage: {\n      display: 'block',\n      marginRight: sm,\n      height: 28,\n      width: 'auto',\n    },\n  }),\n)\n\nexport const useSelectStyles = makeStyles(\n  createStyles({\n    selectMenu: {\n      paddingRight: 0,\n    },\n  }),\n)\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { List } from 'immutable'\nimport { ReactElement } from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { Token } from 'src/logic/tokens/store/model/token'\n\nimport { useSelectStyles, useSelectedTokenStyles } from './style'\n\ninterface SelectTokenProps {\n  tokenAddress: string\n  tokens: List<Token>\n}\n\nconst SelectedToken = ({ tokenAddress, tokens }: SelectTokenProps): ReactElement => {\n  const classes = useSelectedTokenStyles()\n  const token = tokens.find(({ address }) => address === tokenAddress)\n\n  return (\n    <MenuItem className={classes.container}>\n      {token ? (\n        <>\n          <ListItemIcon>\n            <Img\n              className={classes.tokenImage}\n              alt={token.name}\n              onError={setImageToPlaceholder}\n              src={token.logoUri || ''}\n            />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={token.name}\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\n          />\n        </>\n      ) : (\n        <Text color=\"placeHolder\" size=\"xl\">\n          Select an asset*\n        </Text>\n      )}\n    </MenuItem>\n  )\n}\n\ninterface TokenSelectFieldProps {\n  initialValue?: string\n  isValid?: boolean\n  tokens: List<Token>\n}\n\nconst TokenSelectField = ({ initialValue, isValid = true, tokens }: TokenSelectFieldProps): ReactElement => {\n  const classes = useSelectStyles()\n  const tokenClasses = useSelectedTokenStyles()\n\n  return (\n    <Field\n      classes={{ selectMenu: classes.selectMenu }}\n      className={isValid ? 'isValid' : 'isInvalid'}\n      component={(props) => (\n        <SelectField\n          {...props}\n          inputProps={{\n            'data-testid': 'token-input',\n          }}\n        />\n      )}\n      displayEmpty\n      initialValue={initialValue}\n      name=\"token\"\n      renderValue={(tokenAddress) => <SelectedToken tokenAddress={tokenAddress} tokens={tokens} />}\n      validate={required}\n    >\n      {tokens.map((token) => (\n        <MenuItem key={token.address} value={token.address}>\n          <ListItemIcon>\n            <Img\n              className={tokenClasses.tokenImage}\n              alt={token.name}\n              onError={setImageToPlaceholder}\n              src={token.logoUri || ''}\n            />\n          </ListItemIcon>\n          <ListItemText\n            primary={token.name}\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\n            data-testid={`select-token-${token.name}`}\n          />\n        </MenuItem>\n      ))}\n    </Field>\n  )\n}\n\nexport default TokenSelectField\n"],"sourceRoot":""}