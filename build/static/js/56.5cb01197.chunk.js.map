{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/index.tsx","routes/safe/components/Transactions/helpers/TxModalWrapper/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx"],"names":["styles","createStyles","container","padding","md","lg","value","marginLeft","sm","outerData","borderRadius","border","minHeight","data","wordBreak","overflow","fontSize","fontFamily","maxHeight","letterSpacing","fontStretch","lineHeight","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewCustomTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCurrency","getNativeCurrency","txRecipient","contractAddress","txData","trim","txValue","toTokenUnit","decimals","TxModalWrapper","txTo","onSubmit","txParameters","delayExecution","createTransaction","to","valueInWei","txNonce","safeNonce","safeTxGas","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","console","error","onBack","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","align","Col","xs","PrefixedEthHashInfo","hash","name","contractName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","symbol","Container","styled","div","children","operation","txType","submitText","isConfirmDisabled","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","manualSafeNonce","setManualSafeNonce","executionApproved","setExecutionApproved","isSpendingLimitTx","isSpendingLimit","useEstimateTransactionGas","txAmount","gasCostFormatted","gasPriceFormatted","gasMaxPrioFeeFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isCreation","isOffChainSignature","useEstimationStatus","submitStatus","setSubmitStatus","canTxExecute","useCanTxExecute","undefined","doExecute","oldGasPrice","newGasPrice","ethGasPrice","oldGasLimit","newGasLimit","ethGasLimit","oldMaxPrioFee","newMaxPrioFee","ethMaxPrioFee","oldSafeTxGas","newSafeTxGas","newSafeNonce","newSafeNonceNumber","parseInt","isExecution","closeEditModalCallback","toggleEditMode","onChange","onEdit","isTransactionCreation","isTransactionExecution","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","READY","logError","Errors","_802","onSubmitClick","status","disabled","EstimationStatus","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","React","Wrapper","StyledDivider","DividerSRC","type","StyledBlock","useSelector","currentSafeWithNames","address","ethBalance","safeName"],"mappings":"sSAGaA,EAASC,YAAa,CACjCC,UAAW,CACTC,QAAQ,GAAD,OAAKC,KAAL,YAAWC,OAEpBC,MAAO,CACLC,WAAYC,MAEdC,UAAW,CACTC,aAAc,MACdC,OAAO,aAAD,OAAeA,UACrBR,QAAS,OACTS,UAAW,QAEbC,KAAM,CACJC,UAAW,YACXC,SAAU,OACVC,SAAU,OACVC,WAAY,SACZC,UAAW,QACXC,cAAe,SACfC,YAAa,SACbC,WAAY,QAEdC,UAAW,CACTC,OAAQ,OACRC,eAAgB,SAChBC,IAAK,U,kCCSHC,EAAYC,YAAW3B,GAsFd4B,UApFQ,SAAC,GAAkD,IAAD,EAA/CC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,GACnCC,EAAUN,IACVO,EAAWC,cACXC,EAAcC,cACdC,EAAiBC,cAEjBC,EAAcR,EAAGS,gBACjBC,EAASV,EAAGlB,KAAOkB,EAAGlB,KAAK6B,OAAS,GACpCC,EAAUZ,EAAGzB,MAAQsC,YAAYb,EAAGzB,MAAO+B,EAAeQ,UAAY,IAuB5E,OACE,eAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAQE,QAASA,EAASI,KAAMR,EAAaS,SAtBtD,SAACC,EAA4BC,GACxCf,EACFF,EACEkB,YAAkB,CAChBhB,YAAaA,EACbiB,GAAIb,EACJc,WAAYV,EACZF,SACAa,QAASL,EAAaM,UACtBC,UAAWP,EAAaO,UACxBC,cAAeR,EACfS,oBAAqBC,IAAsBC,YAC3CV,oBAIJW,QAAQC,MAAM,sFAEhBjC,KAIyFkC,OAAQjC,EAAjG,UACE,cAACkC,EAAA,EAAD,CAAanC,QAASA,EAASoC,SAAS,SAASC,MAAM,yBACvD,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAOC,UAAWrC,EAAQ9B,UAA1B,UACE,cAACoE,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAASC,WAAS,IAClB,cAACC,EAAA,EAAD,CAAKC,OAAO,KAAZ,SACE,cAACC,EAAA,EAAD,CAAWC,MAAM,WAAWC,UAAQ,EAACC,KAAK,KAAKC,MAAO,CAAE5D,cAAe,UAAvE,yBAKF,cAACsD,EAAA,EAAD,CAAKO,MAAM,SAASN,OAAO,KAA3B,SACE,cAACO,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACC,EAAA,EAAD,CACEC,KAAMrD,EAAGS,gBACT6C,KAAI,UAAEtD,EAAGuD,oBAAL,QAAqB,GACzBC,YAAU,EACVC,aAAW,EACXC,YAAaC,YAAgB3D,EAAGS,uBAItC,cAACiC,EAAA,EAAD,CAAKC,OAAO,KAAZ,SACE,cAACC,EAAA,EAAD,CAAWC,MAAM,WAAWC,UAAQ,EAACC,KAAK,KAAKC,MAAO,CAAE5D,cAAe,UAAvE,qBAIF,eAACsD,EAAA,EAAD,CAAKO,MAAM,SAASN,OAAO,KAA3B,UACE,cAACiB,EAAA,EAAD,CAAKC,IAAI,QAAQrE,OAAQ,GAAIsE,QAASC,IAAuBC,IAAKC,YAAc,KAAKC,SAAW,KAChG,eAACtB,EAAA,EAAD,CAAWN,UAAWrC,EAAQ1B,MAAOuE,UAAQ,EAACC,KAAK,KAAnD,UACG/C,EAAGzB,OAAS,EACZ,IAAM+B,EAAe6D,aAG1B,cAACzB,EAAA,EAAD,CAAKC,OAAO,KAAZ,SACE,cAACC,EAAA,EAAD,CAAWC,MAAM,WAAWC,UAAQ,EAACC,KAAK,KAAKC,MAAO,CAAE5D,cAAe,UAAvE,kCAIF,cAACsD,EAAA,EAAD,CAAKO,MAAM,SAASN,OAAO,KAA3B,SACE,cAACO,EAAA,EAAD,CAAKZ,UAAWrC,EAAQvB,UAAxB,SACE,cAACgE,EAAA,EAAD,CAAKJ,UAAWrC,EAAQnB,KAAMiE,KAAK,KAAnC,SACG/C,EAAGlB,mB,iOCrFZsF,EAAYC,UAAOC,IAAV,kDACAhG,KAAMD,MAGR0C,EAAiB,SAAC,GAWG,IAVhCwD,EAU+B,EAV/BA,SACAC,EAS+B,EAT/BA,UACA9D,EAQ+B,EAR/BA,OAQ+B,IAP/BE,eAO+B,MAPrB,IAOqB,EAN/BI,EAM+B,EAN/BA,KACAyD,EAK+B,EAL/BA,OACAxD,EAI+B,EAJ/BA,SACAe,EAG+B,EAH/BA,OACA0C,EAE+B,EAF/BA,WACAC,EAC+B,EAD/BA,kBAEA,EAA8CC,mBAAS,KAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,qBAA5C,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAgDJ,qBAAhD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAA4CN,qBAA5C,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAA8CR,qBAA9C,mBAAOS,EAAP,KAAwBC,EAAxB,KACA,EAAkDV,oBAAkB,GAApE,mBAAOW,EAAP,KAA0BC,EAA1B,KACMpF,EAAcC,cACdoF,EAAoBC,YAAgBjB,GAE1C,EASIkB,YAA0B,CAC5BjF,SACAF,YAAaQ,GAAQZ,EACrBqE,SACAmB,SAAUhF,EACVa,UAAWoD,EACXE,iBACAE,mBACAE,iBACAE,kBACAb,cAlBAqB,GADF,EACEA,iBACAC,GAFF,EAEEA,kBACAC,GAHF,EAGEA,uBACAC,GAJF,EAIEA,SACAC,GALF,EAKEA,cACAC,GANF,EAMEA,4BACAC,GAPF,EAOEA,WACAC,GARF,EAQEA,oBAcF,GAAwCC,YAAoBH,IAA5D,qBAAOI,GAAP,MAAqBC,GAArB,MAEMC,GAAeC,iBAAgBC,EAAWrB,GAC1CsB,GAAYpB,GAAqBiB,GAEjC1G,GAAU,SAACoB,GACf,IAAM0F,EAAcd,GACde,EAAc3F,EAAa4F,YAC3BC,EAAcf,GACdgB,EAAc9F,EAAa+F,YAC3BC,EAAgBnB,GAChBoB,EAAgBjG,EAAakG,cAC7BC,EAAepB,GACfqB,EAAepG,EAAaO,UAC5B8F,EAAerG,EAAaM,UAkBlC,GAhBIoF,IAAgBC,GAClB7B,EAAkB6B,GAGhBK,IAAkBC,GACpBjC,EAAoBiC,GAGlBJ,IAAgBC,GAClB5B,EAAkB4B,GAGhBM,GAAgBD,IAAiBC,GACnCxC,EAAmBwC,GAGjBC,EAAc,CAChB,IAAMC,EAAqBC,SAASF,EAAc,IAClDjC,EAAmBkC,KAgBvB,OACE,cAAC,IAAD,CACEpB,oBAAqBA,GACrBsB,YAAaf,GACbM,YAAajB,GACbc,YAAahB,GACbsB,cAAerB,GACftE,UAAWwE,GACX0B,uBAAwB7H,GAP1B,SASG,SAACoB,EAA4B0G,GAA7B,OACC,qCACGrD,EAED,eAACH,EAAD,YACIqB,GAAqBe,IAAgB,cAAC,IAAD,CAAiBqB,SAAUrC,KAIhEC,GACA,cAAC,IAAD,CACEvE,aAAcA,EACd4G,OAAQF,EACRG,sBAAuB5B,GACvB6B,uBAAwBrB,GACxBP,oBAAqBA,SAKzBX,GACA,cAAC,IAAD,CACEI,iBAAkBA,GAClBM,WAAYA,GACZuB,YAAaf,GACbnF,UAAWN,EAAaM,UACxB0E,4BAA6BA,KAKjC,cAAC,IAAM+B,OAAP,CAAcC,eAAgBzC,GAAqBa,KAAiB6B,IAAaC,QAAjF,SACE,cAAC,IAAMH,OAAOI,QAAd,CACEC,kBAAmB,CAAEC,QAASvG,GAAUlC,GAAS0I,KAAM,QACvDC,mBAAoB,CAClBF,QAAS,kBAzDD,SAACrH,GAGrB,GAFAqF,GAAgB4B,IAAaC,UAExBhI,EAGH,OAFAmG,GAAgB4B,IAAaO,YAC7BC,YAASC,IAAOC,MAIlB5H,EAASC,GAAeyF,IAgDGmC,CAAc5H,IAC7B6H,OAAQzC,GACR0C,SAAUrE,EACV6D,KAAMtC,KAAgC+C,IAAiBb,QAAU,aAAe1D,EAChFwE,OAAQ,6B,kFC5KXnF,EAAwB,SAACoF,GACpC,IAAMC,EAAMD,EAAME,cACb,oBAAoBC,KAAKF,EAAIpF,OAChCoF,EAAIpF,IAAMuF,M,0CCPC,QAA0B,+C,iHCEnCC,E,4JACJ,WACE,MAA+BC,KAAKC,MAA5BnF,EAAR,EAAQA,SAAamF,EAArB,iBAEA,OAAO,6CAAOA,GAAP,aAAenF,S,GAJPoF,iBAQJH,O,yECNTI,EAAUvF,UAAOC,IAAV,mIASPuF,EAAgBxF,kBAAOyF,UAAPzF,CAAH,4CAeJ7B,IAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACd,eAACmH,EAAD,WACGnH,GAAa,cAAC,OAAD,CAAMsH,KAAK,YAAYhH,KAAK,OAC1C,cAAC8G,EAAD,S,mICbEG,EAAc3F,kBAAOhC,IAAPgC,CAAH,wOAIKzF,SAGNuE,MA6BDZ,IAxBE,WACf,MAA6D0H,YAAYC,KAAxD9J,EAAjB,EAAQ+J,QAAsBC,EAA9B,EAA8BA,WAAkBC,EAAhD,EAA0C/G,KACpChD,EAAiBC,cAEvB,OACE,qCACE,cAAC,IAAD,CACE8C,KAAMjD,EACNkD,KAAM+G,EACN3G,YAAaC,YAAgBvD,GAC7BoD,YAAU,EACVC,aAAW,IAEZ2G,GACC,cAACJ,EAAD,UACE,eAAC,IAAD,CAAWlH,UAAQ,EAAnB,sBACW,cAAC,IAAD,CAAM,cAAY,sBAAlB,mBAA4CsH,EAA5C,YAA0D9J,EAAe6D","file":"static/js/56.5cb01197.chunk.js","sourcesContent":["import { border, lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    borderRadius: '5px',\n    border: `1px solid ${border}`,\n    padding: '11px',\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '14px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import { ReactElement } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { styles } from './style'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\n\nexport type ReviewCustomTxProps = {\n  contractAddress: string\n  contractName?: string\n  data: string\n  value: string\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewCustomTxProps\n}\n\nconst useStyles = makeStyles(styles)\n\nconst ReviewCustomTx = ({ onClose, onPrev, tx }: Props): ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const nativeCurrency = getNativeCurrency()\n\n  const txRecipient = tx.contractAddress\n  const txData = tx.data ? tx.data.trim() : ''\n  const txValue = tx.value ? toTokenUnit(tx.value, nativeCurrency.decimals) : '0'\n\n  const submitTx = (txParameters: TxParameters, delayExecution: boolean) => {\n    if (safeAddress) {\n      dispatch(\n        createTransaction({\n          safeAddress: safeAddress,\n          to: txRecipient as string,\n          valueInWei: txValue,\n          txData,\n          txNonce: txParameters.safeNonce,\n          safeTxGas: txParameters.safeTxGas,\n          ethParameters: txParameters,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n          delayExecution,\n        }),\n      )\n    } else {\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n    }\n    onClose()\n  }\n\n  return (\n    <TxModalWrapper txData={txData} txValue={txValue} txTo={txRecipient} onSubmit={submitTx} onBack={onPrev}>\n      <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Contract interaction\" />\n      <Hairline />\n      <Block className={classes.container}>\n        <SafeInfo />\n        <Divider withArrow />\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Recipient\n          </Paragraph>\n        </Row>\n\n        <Row align=\"center\" margin=\"md\">\n          <Col xs={12}>\n            <PrefixedEthHashInfo\n              hash={tx.contractAddress as string}\n              name={tx.contractName ?? ''}\n              showAvatar\n              showCopyBtn\n              explorerUrl={getExplorerInfo(tx.contractAddress as string)}\n            />\n          </Col>\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Value\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri || ''} />\n          <Paragraph className={classes.value} noMargin size=\"md\">\n            {tx.value || 0}\n            {' ' + nativeCurrency.symbol}\n          </Paragraph>\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Data (hex encoded)\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Col className={classes.outerData}>\n            <Row className={classes.data} size=\"md\">\n              {tx.data}\n            </Row>\n          </Col>\n        </Row>\n      </Block>\n    </TxModalWrapper>\n  )\n}\n\nexport default ReviewCustomTx\n","import { ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\n\ntype Props = {\n  children: ReactNode\n  operation?: number\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  onSubmit: (txParams: TxParameters, delayExecution?: boolean) => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isConfirmDisabled?: boolean\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\nexport const TxModalWrapper = ({\n  children,\n  operation,\n  txData,\n  txValue = '0',\n  txTo,\n  txType,\n  onSubmit,\n  onBack,\n  submitText,\n  isConfirmDisabled,\n}: Props): React.ReactElement => {\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [manualSafeNonce, setManualSafeNonce] = useState<number | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const safeAddress = extractSafeAddress()\n  const isSpendingLimitTx = isSpendingLimit(txType)\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasMaxPrioFeeFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData,\n    txRecipient: txTo || safeAddress,\n    txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    operation,\n  })\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const canTxExecute = useCanTxExecute(undefined, manualSafeNonce)\n  const doExecute = executionApproved && canTxExecute\n\n  const onClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n    const newSafeNonce = txParameters.safeNonce\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n\n    if (newSafeNonce) {\n      const newSafeNonceNumber = parseInt(newSafeNonce, 10)\n      setManualSafeNonce(newSafeNonceNumber)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters, !doExecute)\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={onClose}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => unknown) => (\n        <>\n          {children}\n\n          <Container>\n            {!isSpendingLimitTx && canTxExecute && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimitTx && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Container>\n\n          {!isSpendingLimitTx && (\n            <ReviewInfoText\n              gasCostFormatted={gasCostFormatted}\n              isCreation={isCreation}\n              isExecution={doExecute}\n              safeNonce={txParameters.safeNonce}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimitTx && submitStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isConfirmDisabled,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render(): React.ReactElement {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n"],"sourceRoot":""}