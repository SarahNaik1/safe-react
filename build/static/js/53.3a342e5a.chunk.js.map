{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/index.tsx","routes/safe/components/Transactions/helpers/TxModalWrapper/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","logic/tokens/store/actions/fetchTokens.ts"],"names":["styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewSendFundsTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCurrency","getNativeCurrency","tokens","useSelector","extendedSafeTokensSelector","txToken","useMemo","find","token","sameAddress","address","isSendingNativeToken","getNativeCurrencyAddress","txRecipient","recipientAddress","txValue","toTokenUnit","decimals","txData","txAmount","useState","data","setData","useEffect","updateTxDataAsync","a","EMPTY_DATA","ERC20TokenInstance","getERC20TokenContract","erc20TransferAmount","methods","transfer","encodeABI","useTxData","isSpendingLimitTx","isSpendingLimit","txType","submitTx","txParameters","delayExecution","tokenSpendingLimit","spendingLimitTokenAddress","ZERO_ADDRESS","spendingLimit","getSpendingLimitContract","executeAllowanceTransfer","delegate","send","from","on","logError","Errors","_801","message","createTransaction","to","valueInWei","txNonce","safeNonce","safeTxGas","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","TxModalWrapper","txTo","onSubmit","onBack","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","letterSpacing","align","Col","xs","PrefixedEthHashInfo","hash","name","recipientName","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","logoUri","symbol","Container","styled","div","children","operation","submitText","isConfirmDisabled","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","manualSafeNonce","setManualSafeNonce","executionApproved","setExecutionApproved","useEstimateTransactionGas","gasCostFormatted","gasPriceFormatted","gasMaxPrioFeeFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isCreation","isOffChainSignature","useEstimationStatus","submitStatus","setSubmitStatus","canTxExecute","useCanTxExecute","undefined","doExecute","oldGasPrice","newGasPrice","ethGasPrice","oldGasLimit","newGasLimit","ethGasLimit","oldMaxPrioFee","newMaxPrioFee","ethMaxPrioFee","oldSafeTxGas","newSafeTxGas","newSafeNonce","newSafeNonceNumber","parseInt","isExecution","closeEditModalCallback","toggleEditMode","onChange","onEdit","isTransactionCreation","isTransactionExecution","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","READY","_802","onSubmitClick","status","disabled","EstimationStatus","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","React","Wrapper","StyledDivider","DividerSRC","type","StyledBlock","border","currentSafeWithNames","ethBalance","safeName","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","getERC721TokenContract","ERC721Contract"],"mappings":"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","file":"static/js/53.3a342e5a.chunk.js","sourcesContent":["import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import { RecordOf } from 'immutable'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { getSpendingLimitContract } from 'src/logic/contracts/spendingLimitContracts'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { TokenProps } from 'src/logic/tokens/store/model/token'\n\nimport { styles } from './style'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { getNativeCurrencyAddress } from 'src/config/utils'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\n\nconst useStyles = makeStyles(styles)\n\nexport type ReviewTxProp = {\n  recipientAddress: string\n  recipientName?: string\n  amount: string\n  txRecipient: string\n  token: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype ReviewTxProps = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewTxProp\n}\n\nconst useTxData = (\n  isSendingNativeToken: boolean,\n  txAmount: string,\n  recipientAddress: string,\n  txToken?: RecordOf<TokenProps>,\n): string => {\n  const [data, setData] = useState('')\n\n  useEffect(() => {\n    const updateTxDataAsync = async () => {\n      if (!txToken) {\n        return\n      }\n\n      let txData = EMPTY_DATA\n      if (!isSendingNativeToken) {\n        const ERC20TokenInstance = getERC20TokenContract(txToken.address)\n        const erc20TransferAmount = toTokenUnit(txAmount, txToken.decimals)\n        txData = ERC20TokenInstance.methods.transfer(recipientAddress, erc20TransferAmount).encodeABI()\n      }\n      setData(txData)\n    }\n\n    updateTxDataAsync()\n  }, [isSendingNativeToken, recipientAddress, txAmount, txToken])\n\n  return data\n}\n\nconst ReviewSendFundsTx = ({ onClose, onPrev, tx }: ReviewTxProps): React.ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const nativeCurrency = getNativeCurrency()\n  const tokens: any = useSelector(extendedSafeTokensSelector)\n  const txToken = useMemo(() => tokens.find((token) => sameAddress(token.address, tx.token)), [tokens, tx.token])\n  const isSendingNativeToken = useMemo(() => sameAddress(txToken?.address, getNativeCurrencyAddress()), [txToken])\n  const txRecipient = isSendingNativeToken ? tx.recipientAddress : txToken?.address || ''\n  const txValue = isSendingNativeToken ? toTokenUnit(tx.amount, nativeCurrency.decimals) : '0'\n  const txData = useTxData(isSendingNativeToken, tx.amount, tx.recipientAddress, txToken)\n  const isSpendingLimitTx = isSpendingLimit(tx.txType)\n\n  const submitTx = async (txParameters: TxParameters, delayExecution: boolean) => {\n    if (isSpendingLimitTx && txToken && tx.tokenSpendingLimit) {\n      const spendingLimitTokenAddress = isSendingNativeToken ? ZERO_ADDRESS : txToken.address\n      const spendingLimit = getSpendingLimitContract()\n      try {\n        await spendingLimit.methods\n          .executeAllowanceTransfer(\n            safeAddress,\n            spendingLimitTokenAddress,\n            tx.recipientAddress,\n            toTokenUnit(tx.amount, txToken.decimals),\n            ZERO_ADDRESS,\n            0,\n            tx.tokenSpendingLimit.delegate,\n            EMPTY_DATA,\n          )\n          .send({ from: tx.tokenSpendingLimit.delegate })\n          .on('transactionHash', () => onClose())\n      } catch (err) {\n        logError(Errors._801, err.message)\n      }\n      return\n    }\n\n    dispatch(\n      createTransaction({\n        safeAddress: safeAddress,\n        to: txRecipient as string,\n        valueInWei: txValue,\n        txData,\n        txNonce: txParameters.safeNonce,\n        safeTxGas: txParameters.safeTxGas,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n        delayExecution,\n      }),\n    )\n    onClose()\n  }\n\n  return (\n    <TxModalWrapper\n      txData={txData}\n      txValue={txValue}\n      txTo={txRecipient}\n      txType={tx.txType || ''}\n      onSubmit={submitTx}\n      onBack={onPrev}\n    >\n      {/* Header */}\n      <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Send funds\" />\n\n      <Hairline />\n\n      <Block className={classes.container}>\n        {/* SafeInfo */}\n        <SafeInfo />\n        <Divider withArrow />\n\n        {/* Recipient */}\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Recipient\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\" data-testid=\"recipient-review-step\">\n          <Col xs={12}>\n            <PrefixedEthHashInfo\n              hash={tx.recipientAddress}\n              name={tx.recipientName}\n              showCopyBtn\n              showAvatar\n              explorerUrl={getExplorerInfo(tx.recipientAddress)}\n            />\n          </Col>\n        </Row>\n\n        {/* Amount */}\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Amount\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Img alt={txToken?.name} height={28} onError={setImageToPlaceholder} src={txToken?.logoUri} />\n          <Paragraph\n            className={classes.amount}\n            noMargin\n            size=\"md\"\n            data-testid={`amount-${txToken?.symbol}-review-step`}\n          >\n            {tx.amount} {txToken?.symbol}\n          </Paragraph>\n        </Row>\n      </Block>\n    </TxModalWrapper>\n  )\n}\n\nexport default ReviewSendFundsTx\n","import { ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\n\ntype Props = {\n  children: ReactNode\n  operation?: number\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  onSubmit: (txParams: TxParameters, delayExecution?: boolean) => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isConfirmDisabled?: boolean\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\nexport const TxModalWrapper = ({\n  children,\n  operation,\n  txData,\n  txValue = '0',\n  txTo,\n  txType,\n  onSubmit,\n  onBack,\n  submitText,\n  isConfirmDisabled,\n}: Props): React.ReactElement => {\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [manualSafeNonce, setManualSafeNonce] = useState<number | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const safeAddress = extractSafeAddress()\n  const isSpendingLimitTx = isSpendingLimit(txType)\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasMaxPrioFeeFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData,\n    txRecipient: txTo || safeAddress,\n    txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    operation,\n  })\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const canTxExecute = useCanTxExecute(undefined, manualSafeNonce)\n  const doExecute = executionApproved && canTxExecute\n\n  const onClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n    const newSafeNonce = txParameters.safeNonce\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n\n    if (newSafeNonce) {\n      const newSafeNonceNumber = parseInt(newSafeNonce, 10)\n      setManualSafeNonce(newSafeNonceNumber)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters, !doExecute)\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={onClose}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => unknown) => (\n        <>\n          {children}\n\n          <Container>\n            {!isSpendingLimitTx && canTxExecute && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimitTx && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Container>\n\n          {!isSpendingLimitTx && (\n            <ReviewInfoText\n              gasCostFormatted={gasCostFormatted}\n              isCreation={isCreation}\n              isExecution={doExecute}\n              safeNonce={txParameters.safeNonce}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimitTx && submitStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isConfirmDisabled,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render(): React.ReactElement {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = createERC20TokenContract\n\nexport const getERC721TokenContract = createERC721TokenContract\n"],"sourceRoot":""}