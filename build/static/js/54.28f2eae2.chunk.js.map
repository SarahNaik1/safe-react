{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Table/TableHead.tsx","components/Table/sorting.ts","components/Table/index.tsx","components/forms/AddressInput/index.tsx","routes/safe/components/AddressBook/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/index.tsx","routes/safe/components/AddressBook/HelpInfo/index.tsx","routes/safe/components/AddressBook/ExportEntriesModal/assets/success.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/error.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/wait.svg","routes/safe/components/AddressBook/ExportEntriesModal/index.tsx","routes/safe/components/AddressBook/DeleteEntryModal/index.tsx","routes/safe/components/AddressBook/columns.ts","routes/safe/components/AddressBook/utils.ts","routes/safe/components/AddressBook/ImportEntriesModal/index.tsx","routes/safe/components/AddressBook/index.tsx"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","submitting","validating","form","validate","styles","heading","justifyContent","maxHeight","boxSizing","loaderContainer","height","close","color","secondaryText","detailsContainer","backgroundColor","background","buttonRow","button","marginLeft","sm","ScanQRModal","isOpen","onClose","onScan","useState","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","Row","align","grow","Paragraph","noMargin","size","IconButton","disableRipple","onClick","Hairline","Col","layout","middle","Block","margin","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrCodeBtn","cursor","ScanQRWrapper","handleScan","qrModalOpen","setQrModalOpen","closeQrModal","Img","alt","role","src","QRIcon","cellWidth","maxWidth","GnoTableHead","changeSort","property","orderAttr","onSort","this","columns","order","orderBy","map","column","disablePadding","sortDirection","id","static","label","direction","desc","a","b","orderProp","format","borderTopRightRadius","borderTopLeftRadius","boxShadow","selectRoot","xxl","white","paginationRoot","marginBottom","borderBottomRightRadius","borderBottomLeftRadius","loader","backProps","nextProps","GnoTable","newOrderBy","state","defaultOrder","newOrder","setState","fixed","getEmptyStyle","display","alignItems","handleChangePage","e","page","handleChangeRowsPerPage","rowsPerPage","Number","target","defaultOrderBy","find","defaultFixed","defaultRowsPerPage","disableLoadingOnEmptyTable","disablePagination","noBorder","orderByParam","orderParam","displayRows","fixedParam","paginationClasses","columnSort","sortedData","dataArray","cmp","fixedElems","filter","elem","List","stabilizedThis","el","index","sortedElems","sort","concat","stableSort","getSorting","formatTypeSort","slice","isEmpty","Table","TableHead","TableBody","TablePagination","backIconButtonProps","component","count","nextIconButtonProps","onPageChange","onRowsPerPageChange","rowsPerPageOptions","defaultProps","withStyles","AddressInput","placeholder","fieldMutator","validators","defaultValue","disabled","currentInput","setCurrentInput","resolutions","setResolutions","resolvedAddress","isResolving","sanitizedValidators","useCallback","val","parsed","parsePrefixedAddress","composeValidators","address","allValidators","useMemo","required","mustBeEthereumAddress","onValueChange","rawVal","trimSpaces","isValidEnsName","isValidCryptoDomainName","prev","getAddressFromDomain","then","resolverAddr","formattedAddress","checksumAddress","catch","logError","Errors","_101","message","checkedAddress","adornment","endAdornment","position","spellCheck","formContainer","minHeight","annotation","paddingLeft","hide","visibility","actions","gap","md","noBorderBottom","borderBottom","controlsRow","borderRadius","editEntryButton","editEntryButtonNonOwner","removeEntryButton","removeEntryButtonDisabled","removeEntryButtonNonOwner","leftIcon","marginRight","iconSmall","fontSize","manage","container","CREATE_ENTRY_INPUT_NAME_ID","CREATE_ENTRY_INPUT_ADDRESS_ID","SAVE_NEW_ENTRY_BTN_ID","setOwnerAddress","args","utils","changeValue","CreateEditEntryModal","editEntryModalHandler","entryToEdit","newEntryModalHandler","entry","isNew","storedAddressesInThisNetwork","useSelector","currentNetworkAddressBookAddresses","isUniqueAddress","uniqueAddress","Header","Title","Body","withoutPadding","values","formState","scannedAddress","startsWith","replace","xs","Field","type","validAddressBookName","center","Footer","Buttons","cancelButtonProps","confirmButtonProps","StyledIcon","styled","Icon","HelpInfo","href","rel","as","ImageContainer","InfoContainer","BodyImage","div","StyledLoader","Loader","ExportEntriesModal","dispatch","useDispatch","addressBook","addressBookState","loading","setLoading","csvData","setCsvData","doRetry","setDoRetry","date","Date","jsonToCSV","handleCsvData","withoutMargin","ErrorSvg","LoadingSvg","SuccessSvg","strong","length","withoutBorder","bom","filename","setTimeout","notification","getNotificationsFromTxType","TX_NOTIFICATION_TYPES","ADDRESS_BOOK_EXPORT_ENTRIES","action","afterExecution","afterExecutionError","noMoreConfirmationsNeeded","enqueueSnackbar","enhanceSnackbarForAction","DeleteEntryModal","deleteEntryModalHandler","entryToDelete","AB_NAME_ID","AB_ADDRESS_ID","IMPORT_SUPPORTED_FORMATS","CSV_EXTENSION_REGEX","ImportContainer","theme","colors","ImportEntriesModal","importEntryModalHandler","csvLoaded","setCsvLoaded","importError","setImportError","entryList","setEntryList","onDrop","parseResults","file","slicedData","fileError","includes","test","toLowerCase","validateFile","trimmedData","forEach","row","push","dataError","chainId","trim","lowerCaseAddress","isValidAddress","isValidChainId","validateCsvData","formattedList","addRemoveButton","onRemoveFile","dropArea","borderColor","dropAreaActive","dropFile","fileSizeInfo","left","top","fileNameInfo","progressBar","removeButton","StyledButton","AddressBookTable","nameColumn","custom","addressColumn","actionsColumn","generateColumns","autoColumns","safesList","safesAsList","currentNetworkAddressBook","networkId","currentChainId","granted","grantedSelector","initialEntryState","selectedEntry","setSelectedEntry","editCreateEntryModalOpen","setEditCreateEntryModalOpen","importEntryModalOpen","setImportEntryModalOpen","deleteEntryModalOpen","setDeleteEntryModalOpen","exportEntriesModalOpen","setExportEntriesModalOpen","sendFundsModalOpen","setSendFundsModalOpen","trackEvent","useAnalytics","history","useHistory","queryParams","Object","fromEntries","URLSearchParams","location","search","entryAddressToEditOrCreateNew","entryAddress","SAFE_EVENTS","ADDRESS_BOOK","oldEntryIndex","findIndex","sameAddress","start","iconType","counter","toString","end","iconSize","textSize","TableContainer","userOwner","isUserAnOwnerOfAnySafe","hideBorderBottom","TableRow","cn","tabIndex","TableCell","justify","PrefixedEthHashInfo","hash","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","ButtonHelper","isOwnerAddress","tooltip","addressBookAddOrUpdate","makeAddressBookEntry","addressBookRemove","addressList","addressBookImport","SendModal","activeScreenType","recipientAddress","recipientName"],"mappings":"+IAIeA,IAFE,SAACC,GAAD,OAAoC,cAAC,IAAD,eAAWA,M,qMCI1DC,EAAgB,CACpBC,SAAU,SACVC,MAAO,QAYHC,EAAYC,aATH,kBACbC,YAAa,CACXC,KAAM,CACJC,WAAYC,KACZC,cAAe,OACfC,WAAY,QAoFHC,IAnDG,SAACZ,GACjB,MASIA,EARFa,MAASC,EADX,EACWA,KAAMC,EADjB,EACiBA,SAAUC,EAD3B,EAC2BA,MAAUC,EADrC,iBAEEC,EAOElB,EAPFkB,eACAC,EAMEnB,EANFmB,KACAC,EAKEpB,EALFoB,UACAC,EAIErB,EAJFqB,KACAC,EAGEtB,EAHFsB,OACAC,EAEEvB,EAFFuB,KACGC,EARL,YASIxB,EATJ,GAUMyB,EAAUrB,IACVsB,EAAaV,EAAQO,OAAOI,EAC5BC,GAAaT,EAAKU,UAAYV,EAAKW,YAAcX,EAAKY,MACtDC,IAAab,EAAKc,QAAWd,EAAKe,2BAA6Bf,EAAKgB,YACpEC,EAAejB,EAAKc,OAASd,EAAKgB,YAClCE,GAAoClB,EAAKmB,SAAWnB,EAAKW,WAAaX,EAAKU,SAC3EU,EAA8C,qBAAfpB,EAAKc,QAAgCd,EAAKU,QAEzEW,EAAmBH,GAAoCE,EAEvDE,EAAYf,EAAaD,EAAQlB,KAAO,GACxCmC,EAAgBvB,EAAKY,MAAQ,UAAYC,GAAYJ,EAAY,YAAc,GAC/Ee,EAAU,2BACX1B,GADW,IAEd2B,aAAc,MACd,cAAetB,IAEXuB,EAAc,2BACf3B,GADe,IAElB4B,UAAU,GAAD,OAAKL,EAAL,YAAkBC,GAC3BF,iBAAkBA,IAGpB,OACE,cAAC,IAAD,aACEP,MAAOD,GAAYJ,EACnBF,WAAYM,GAAYJ,EAAYQ,EAAeV,GAAc,IACjEiB,WAAYA,EACZI,WAAYF,EACZzB,UAAWA,EACXN,KAAMA,EACNC,SAAUA,EACVM,KAAMA,EACN2B,MAAO/C,EACPe,MAAOA,GACHQ,M,kFC5FJyB,EAAgB,SAACC,GAAD,MAAc,CAClCA,QAAQ,KAAD,OAAOA,EAAP,KACPC,cAAe,SACfC,KAAM,aA6BOC,IA1BC,SAAC,GAAD,IACdC,EADc,EACdA,SACAC,EAFc,EAEdA,WACAC,EAHc,EAGdA,aACAC,EAJc,EAIdA,cACAC,EALc,EAKdA,SALc,IAMdR,eANc,MAMJ,EANI,EAOdS,EAPc,EAOdA,aAPc,IAQdrC,cARc,MAQL,GARK,EASdsC,EATc,EASdA,WATc,OAWd,cAAC,IAAD,CACEL,WAAYA,EACZE,cAAeA,EACfI,SAAUL,EACVE,SAAUA,EACVI,OAAQ,gBAAGC,EAAH,EAAGA,aAAiBvC,EAApB,wBACN,sBAAM,cAAaF,EAAQoC,SAAUK,EAAcf,MAAOC,EAAcC,GAAxE,SACGI,EAAS9B,EAAKwC,WAAYxC,EAAKyC,WAAYzC,EAAMA,EAAK0C,KAAKL,aAGhEF,aAAcA,EACdQ,SAAUP,M,gGC/BC,MAA0B,mC,+DCG5BQ,EAAS9D,YAAa,CACjC+D,QAAS,CACPnB,QAASzC,KACT6D,eAAgB,gBAChBC,UAAW,OACXC,UAAW,cAEbC,gBAAiB,CACftE,MAAO,OACPuE,OAAQ,QAEVC,MAAO,CACLD,OAAQ,OACRvE,MAAO,OACPyE,MAAOC,iBAETC,iBAAkB,CAChBC,gBAAiBC,aACjBT,UAAW,SAEbU,UAAW,CACTP,OAAQ,OACRJ,eAAgB,UAElBY,OAAQ,CACN,eAAgB,CACdC,WAAYC,S,qECZZhF,EAAYC,YAAW+D,GAQhBiB,EAAc,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,OAAQC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,OACvC/D,EAAUrB,IAChB,EAAsDqF,oBAAkB,GAAxE,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOxD,EAAP,KAAc2D,EAAd,KACA,EAA0CH,oBAAkB,GAA5D,mBAAOI,EAAP,KAAsBC,EAAtB,KACMC,EAAkBC,cAClBC,EAAkBD,eAAkB,WACxCD,EAAWG,QAAQD,oBAClB,CAACF,IAEJI,qBAAU,WACHT,IAAuBG,GAAkB5D,IAC5C0D,GAAuB,GACvBM,OAED,CAACJ,EAAeI,EAAiBP,EAAqBC,EAAwB1D,IAEjF,IAAMmE,EAAuB,SAACnE,EAAqBoE,GACjD,GAAIpE,EASF,OARAqE,QAAQrE,MAAM,gBAAiBA,QAEZ,oBAAfA,EAAMnB,MAA6C,6BAAfmB,EAAMnB,MAC5CgF,GAAiB,GACjBH,GAAuB,IAEvBC,EAAS,6BAKTS,EACFb,EAAOa,GACER,GACTD,EAAS,6BAIb,OACE,eAACW,EAAA,EAAD,CAAOC,YAAY,sBAAsBC,YAAalB,EAASmB,KAAMpB,EAAQqB,MAAM,iBAAnF,UACE,eAACC,EAAA,EAAD,CAAKC,MAAM,SAAS/D,UAAWrB,EAAQ4C,QAASyC,MAAI,EAApD,UACE,cAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,KAAK,KAAzB,qBAGA,cAACC,EAAA,EAAD,CAAYC,eAAa,EAACC,QAAS7B,EAAnC,SACE,cAAC,IAAD,CAAOzC,UAAWrB,EAAQkD,aAG9B,cAAC0C,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAKxE,UAAWrB,EAAQqD,iBAAkByC,OAAO,SAASC,OAAO,KAAjE,UACGvF,GACC,cAACwF,EAAA,EAAD,CAAOvE,QAAQ,KAAKwE,OAAO,KAA3B,SACGzF,IAGL,cAAC,IAAD,CACE0F,WAAY9B,EACZ+B,QAAS,SAACC,GAAD,OAAgBzB,EAAqByB,EAAK,OACnDrC,OAAQ,SAACsC,GAAD,OAAkB1B,EAAqB,KAAM0B,IACrDC,IAAKhC,EACL/C,MAAO,CAAE7C,MAAO,QAASuE,OAAQ,SACjCsD,WAAW,YAGf,cAACX,EAAA,EAAD,IACA,eAACT,EAAA,EAAD,CAAKC,MAAM,SAAS/D,UAAWrB,EAAQwD,UAAvC,UACE,cAACgD,EAAA,EAAD,CAAQnF,UAAWrB,EAAQyD,OAAQN,MAAM,YAAYsD,SAAU,IAAKd,QAAS7B,EAA7E,mBAGA,cAAC0C,EAAA,EAAD,CACEnF,UAAWrB,EAAQyD,OACnBN,MAAM,UACNsD,SAAU,IACVd,QAAS,WACPtB,GAAiB,GACjBF,EAAS,MACTD,GAAuB,IAEzBwC,QAAQ,YATV,oC,SCtFF/H,EAAYC,YAAW,CAC3B+H,UAAW,CACTC,OAAQ,aASCC,EAAgB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,WAAYjH,EAAkC,EAAlCA,OACpCG,EAAUrB,IAChB,EAAsCqF,oBAAS,GAA/C,mBAAO+C,EAAP,KAAoBC,EAApB,KAMMC,EAAe,WACnBD,GAAe,IAOjB,OACE,qCACE,cAACE,EAAA,EAAD,CACEC,IAAI,UACJ9F,UAAWrB,EAAQ2G,UACnB1D,OAAQ,GACR0C,QAAS,WAjBbqB,GAAe,IAkBXI,KAAK,SACLC,IAAKC,EACLzH,OAAQA,GAAU,YAEnBkH,GAAe,cAAC,EAAD,CAAalD,OAAQkD,EAAajD,QAASmD,EAAclD,OAftD,SAACxE,GACtBuH,EAAWvH,EAAO0H,W,wJCrBTM,EAAY,SAAC7I,GACxB,GAAKA,EAIL,MAAO,CACL8I,SAAS,GAAD,OAAK9I,EAAL,QAIN+I,E,4MACJC,WACE,SAACC,EAAkBC,GAAnB,OACA,YAGEC,EAFmB,EAAKtJ,MAAhBsJ,QAEDF,EAAUC,K,4CAGrB,WAA8B,IAAD,OAC3B,EAAoCE,KAAKvJ,MAAjCwJ,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,QAExB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACGF,EAAQG,KAAI,SAACC,GAAD,OACX,cAAC,IAAD,CACE/C,MAAO+C,EAAO/C,MAEd3D,QAAS0G,EAAOC,eAAiB,OAAS,SAC1CC,cAAeJ,IAAYE,EAAOG,IAAKN,EAJzC,SAMGG,EAAOI,OACN,qBAAKhH,MAAO4G,EAAO5G,MAAnB,SAA2B4G,EAAOK,QAElC,cAAC,IAAD,CACE3H,OAAQoH,IAAYE,EAAOG,GAC3BG,UAAWT,EACXrC,QAAS,EAAK+B,WAAWS,EAAOG,GAAIH,EAAOH,OAC3CzG,MAAO4G,EAAO5G,MAJhB,SAMG4G,EAAOK,SAbPL,EAAOG,e,GAlBC/D,iBA0CZkD,O,yICxDTiB,EAAO,SACXC,EACAC,EACAX,EACAY,EACAC,GAEA,IAAMd,EAAQa,EATmB,UASaZ,EATb,SASwBA,EAEzD,OAAIa,EAAOF,EAAEZ,IAAUc,EAAOH,EAAEX,KACtB,EAENc,EAAOF,EAAEZ,IAAUc,EAAOH,EAAEX,IACvB,EAGF,G,wBCVHrF,EAAS,CACb7D,KAAM,CACJwE,gBAAiB,QACjByF,qBAAsBpF,KACtBqF,oBAAqBrF,KACrBsF,UAAW,4CAEbC,WAAY,CACVhK,WAAYiK,MACZ7F,gBAAiB,SAEnB8F,MAAO,CACL9F,gBAAiB,SAEnB+F,eAAgB,CACd/F,gBAAiB,QACjB2F,UAAW,2CACXK,aAAc,OACdC,wBAAyB5F,KACzB6F,uBAAwB7F,MAE1B8F,OAAQ,CACNR,UAAW,6CAMTS,EAAY,CAChB,aAAc,iBAGVC,EAAY,CAChB,aAAc,aAGVC,E,kDAOJ,WAAYrL,GAAQ,IAAD,8BACjB,cAAMA,IA0BRsJ,OAAS,SAACgC,EAAYhB,GACpB,MAA2B,EAAKiB,MAAxB9B,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QACP8B,EAAiB,EAAKxL,MAAtBwL,aACJC,EAAW,OAGXhC,GAASC,IAAY4B,GAAwB,SAAV7B,EACrCgC,EAAW,MACDhC,GAA0B,SAAjB+B,IAEnBC,EAAW,OAGb,EAAKC,UAAS,iBAAO,CACnBjC,MAAOgC,EACP/B,QAAS4B,EACThB,YACAqB,OAAO,OA5CQ,EAgDnBC,cAAgB,iBAAO,CACrBlH,OAAO,gBAAD,OAlEiB,IAkEjB,OACN8F,qBAAsBpF,KACtBqF,oBAAqBrF,KACrBL,gBAAiB,QACjB5E,MAAO,OACP0L,QAAS,OACTvH,eAAgB,SAChBwH,WAAY,WAxDK,EA2DnBC,iBAAmB,SAACC,EAAGC,GACrB,EAAKP,SAAS,CAAEO,UA5DC,EA+DnBC,wBAA0B,SAACF,GACzB,IAAMG,EAAcC,OAAOJ,EAAEK,OAAOrL,OACpC,EAAK0K,SAAS,CAAES,iBA9DhB,EAAKZ,MAAQ,CACXU,KAAM,EACNxC,WAAO9H,EACP+H,aAAS/H,EACTgK,WAAOhK,EACP2I,WAAW,EACX6B,iBAAaxK,GATE,E,qDAanB,WACE,MAAoC4H,KAAKvJ,MAAjCwJ,EAAR,EAAQA,QAAS8C,EAAjB,EAAiBA,eAEbA,GAAkB9C,IACIA,EAAQ+C,MAAK,qBAAGxC,KAAgBuC,KAEpC7C,OAClBF,KAAKmC,SAAS,CACZpB,WAAW,O,oBA+CnB,WACE,MAcSf,KAAKvJ,MAbZsD,EADF,EACEA,SACA7B,EAFF,EAEEA,QACA+H,EAHF,EAGEA,QACA1B,EAJF,EAIEA,KACA0E,EALF,EAKEA,aACAhB,EANF,EAMEA,aACAc,EAPF,EAOEA,eACAG,EARF,EAQEA,mBACAC,EATF,EASEA,2BACAC,EAVF,EAUEA,kBACA1C,EAXF,EAWEA,MACA2C,EAZF,EAYEA,SACA3F,EAbF,EAaEA,KAEF,EAAgEsC,KAAKgC,MAA7DI,EAAR,EAAQA,MAAOlC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,QAASY,EAA/B,EAA+BA,UAAW2B,EAA1C,EAA0CA,KAAME,EAAhD,EAAgDA,YAC1CU,EAAenD,GAAW4C,EAC1BQ,EAAarD,GAAS+B,EACtBuB,EAAcZ,GAAeM,EAC7BO,EAA8B,qBAAVrB,EAAwBA,IAAUa,EACtDS,EAAoB,CACxBtC,WAAYlJ,EAAQkJ,WACpBpK,MAAOqM,GAAYnL,EAAQqJ,eAC3BjK,MAAOY,EAAQoJ,OAEXqC,EAAa1D,EAAQ+C,MAAK,SAAC3C,GAAD,OAAYA,EAAOG,KAAO8C,KACtDM,ED5HkB,SAACC,EAAWC,EAAK1B,GACzC,IAAM2B,EAAa3B,EAAQyB,EAAUG,QAAO,SAACC,GAAD,OAAUA,EAAK7B,SAAS8B,YAAK,IAErEC,GADS/B,EAAQyB,EAAUG,QAAO,SAACC,GAAD,OAAWA,EAAI,SAAWJ,GACtCzD,KAAI,SAACgE,EAAIC,GAAL,MAAe,CAACD,EAAIC,MAY5CC,GAVNH,EAAiBA,EAAeI,MAAK,SAAC1D,EAAGC,GACvC,IAAMZ,EAAQ4D,EAAIjD,EAAE,GAAIC,EAAE,IAE1B,OAAc,IAAVZ,EACKA,EAGFW,EAAE,GAAKC,EAAE,OAGiBV,KAAI,SAACgE,GAAD,OAAQA,EAAG,MAElD,OAAOL,EAAWS,OAAOF,GC2GNG,CACflG,EDzGoB,SACxB2B,EACAC,EACAY,GAHwB,IAIxBC,EAJwB,uDAI8B,SAACvJ,GAAD,OAAWA,GAJzC,MAMd,SAAVyI,EACI,SAACW,EAAGC,GAAJ,OAAUF,EAAKC,EAAGC,EAAGX,EAASY,EAAWC,IACzC,SAACH,EAAGC,GAAJ,OAAWF,EAAKC,EAAGC,EAAGX,EAASY,EAAWC,ICkG1C0D,CAAWnB,EAAYD,EAAcvC,EAA3B,OAAsC4C,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAYgB,gBAC5DlB,GAGGL,IACHQ,EAAaA,EAAWgB,MAAMlC,EAAOc,EAAad,EAAOc,EAAcA,IAGzE,IAAMqB,EAAmB,IAATnH,IAAeyF,EAE/B,OACE,sCACI0B,GACA,eAACC,EAAA,EAAD,CAAO,kBAAiBpE,EAAOnH,UAAW8J,EAAW,GAAKnL,EAAQlB,KAAlE,UACE,cAAC+N,EAAA,EAAD,CAAW9E,QAASA,EAASF,OAAQC,KAAKD,OAAQG,MAAOA,EAAOC,QAASmD,IACzE,cAAC0B,EAAA,EAAD,UAAYjL,EAAS6J,QAGxBiB,GACC,cAACxH,EAAA,EAAD,CAAK9D,UAAWrB,EAAQyJ,OAAQlI,MAAOuG,KAAKqC,gBAA5C,SACE,cAAC,SAAD,CAAQ3E,KAAK,UAGf0F,GACA,cAAC6B,EAAA,EAAD,CACEC,oBAAqBtD,EACrB1J,QAASwL,EACTyB,UAAU,MACVC,MAAO1H,EACP2H,oBAAqBxD,EACrByD,aAActF,KAAKwC,iBACnB+C,oBAAqBvF,KAAK2C,wBAC1BD,KAAMA,EACNE,YAAaY,EACbgC,mBAAoB,CAAC,EAAG,GAAI,GAAI,GAAI,c,GA1IzB/I,aAAjBqF,EACG2D,aAAe,CACpBxD,aAAc,MACdmB,mBAAmB,EACnBF,mBAAoB,GA8ITwC,gBAAW7K,EAAX6K,CAA0B5D,I,+LC7D1B6D,IAxGM,SAAC,GAWwB,IAAD,IAV3CpM,iBAU2C,MAV/B,GAU+B,MAT3ChC,YAS2C,MATpC,mBASoC,MAR3CS,YAQ2C,MARpC,aAQoC,MAP3C4N,mBAO2C,MAP7B,aAO6B,EAN3CC,EAM2C,EAN3CA,aACA9N,EAK2C,EAL3CA,OACAJ,EAI2C,EAJ3CA,eAI2C,IAH3CmO,kBAG2C,MAH9B,GAG8B,EAF3CC,EAE2C,EAF3CA,aACAC,EAC2C,EAD3CA,SAEA,EAAwC9J,mBAAiB,IAAzD,mBAAO+J,EAAP,KAAqBC,EAArB,KACA,EAAsChK,mBAA6C,IAAnF,mBAAOiK,EAAP,KAAoBC,EAApB,KACMC,EAAkBF,EAAYF,GAC9BK,EAAkC,KAApBD,EAGdE,EAAsBC,uBAC1B,SAACC,GACC,IAAMC,EAASC,YAAqBF,GACpC,OAAOG,IAAiB,WAAjB,cAAqBd,GAArBc,CAAiCF,EAAOG,WAEjD,CAACf,IAIGgB,EAAgBC,mBACpB,kBAAMH,YAAkBI,IAAUC,IAAuBV,KACzD,CAACA,IAGGW,EAAgBV,uBACpB,SAACW,GACC,IAAMN,EAAUO,YAAWD,GAK3B,GAHAjB,EAAgBiB,GAGZE,YAAeR,IAAYS,YAAwBT,GACrDT,GAAe,SAACmB,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBJ,EAAS,QAE/CK,YAAqBX,GAClBY,MAAK,SAACC,GACL,IAAMC,EAAmBC,YAAgBF,GACzCtB,GAAe,SAACmB,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBJ,EAASQ,UAEhDE,OAAM,SAACvJ,GACN8H,GAAe,SAACmB,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBJ,OAAS/O,OAC/C0P,YAASC,IAAOC,KAAM1J,EAAI2J,iBAI9B,IAAKhB,YAAsBJ,GAAU,CACnC,IAAMH,EAASC,YAAqBE,GAC9BqB,EAAiBN,YAAgBlB,EAAOG,UAAYH,EAAOG,QAGjEhB,EAAaqC,MAInB,CAAChC,EAAiBE,EAAgBP,IAGpCjJ,qBAAU,WACJyJ,GACFa,EAAcb,KAEf,CAACA,EAAiBa,IAErB,IAAMiB,EAAY7B,EACd,CACE8B,aACE,cAAC,IAAD,CAAgBC,SAAS,MAAzB,SACE,cAAC,IAAD,CAAkB3K,KAAK,YAI7B/F,EAEJ,OACE,qCACE,cAAC,IAAD,CACE4B,UAAWA,EACX4L,UAAW9N,IACX0O,aAAcA,EACdC,SAAUA,EACVrO,eAAgBwQ,EAChB5Q,KAAMA,EACNqO,YAAaA,EACb5N,KAAMA,EACNsQ,YAAY,EACZ1N,SAAUkM,EACV1N,WAAY,CACV,cAAerB,KAInB,cAAC,IAAD,CAAUR,KAAMA,EAAhB,SAAuB2P,S,2LC7HhBrM,EAAS9D,YAAa,CACjCwR,cAAe,CACbC,UAAW,SAEbpL,MAAO,CACLzD,QAASzC,KACTC,cAAe,GAEjBsR,WAAY,CACVC,YAAaxR,MAEfyR,KAAM,CACJ,UAAW,CACTnN,gBAAiB,WAEnB,mBAAoB,CAClBoN,WAAY,YAGhBC,QAAS,CACP9N,eAAgB,WAChBwH,WAAY,SACZqG,WAAY,SACZjK,SAAU,QACVmK,IAAKC,MAEPC,eAAgB,CACd,SAAU,CACRC,aAAc,SAGlBC,YAAa,CACX1N,gBAAiB,QACjB7B,QAASzC,KACTiS,aAActN,MAEhBuN,gBAAiB,CACftK,OAAQ,WAEVuK,wBAAyB,CACvBvK,OAAQ,WAEVwK,kBAAmB,CACjBxK,OAAQ,WAEVyK,0BAA2B,CACzBzK,OAAQ,WAEV0K,0BAA2B,CACzB1K,OAAQ,WAEV2K,SAAU,CACRC,YAAa7N,MAEf8N,UAAW,CACTC,SAAU,M,oHCtDD/S,EAAYC,YACvBC,YAAa,CACX+D,QAAS,CACPnB,QAASzC,KACT6D,eAAgB,gBAChBE,UAAW,aACXE,OAAQ,QAEV0O,OAAQ,CACND,SAAU1S,MAEZ4S,UAAW,CACTnQ,QAAQ,GAAD,OAAKoP,KAAL,YAAW7R,OAEpBkE,MAAO,CACLD,OAAQ,OACRvE,MAAO,W,uFCDAmT,EAA6B,0BAC7BC,EAAgC,6BAChCC,EAAwB,wBAE/BhQ,EAAe,CACnBiQ,gBAAiB,SAACC,EAAMnI,EAAOoI,GAC7BA,EAAMC,YAAYrI,EAAO,WAAW,kBAAMmI,EAAK,QAYtCG,GAAuB,SAAC,GAMW,IAL9CC,EAK6C,EAL7CA,sBACAC,EAI6C,EAJ7CA,YACAzO,EAG6C,EAH7CA,OACA0O,EAE6C,EAF7CA,qBACAzO,EAC6C,EAD7CA,QAEM9D,EAAUrB,IAEhB,EAAoC2T,EAAYE,MAAxCC,EAAR,EAAQA,MAAUzQ,EAAlB,iBAUM0Q,EAA+BC,YAAYC,KAC3CC,EAAkBC,YAAcJ,GAEtC,OACE,eAAC5N,EAAA,EAAD,CACEC,YAAa0N,EAAQ,+BAAiC,yBACtDzN,YAAalB,EACbmB,KAAMpB,EACNqB,MAAOuN,EAAQ,mBAAqB,aAJtC,UAME,cAAC3N,EAAA,EAAMiO,OAAP,CAAcjP,QAASA,EAAvB,SACE,cAACgB,EAAA,EAAMiO,OAAOC,MAAd,UAAqBP,EAAQ,eAAiB,iBAEhD,cAAC3N,EAAA,EAAMmO,KAAP,CAAYC,gBAAc,EAA1B,SACE,cAACtR,EAAA,EAAD,CAASG,aAAcA,EAAcE,SAtBnB,SAACkR,GACnBV,EACFF,EAAqBY,GAErBd,EAAsBc,IAkB4CnR,cAAeA,EAA/E,SACG,WACC,IAAMoR,EAAS,wCACThR,EAAQ,wCACR0E,EAAa,SAACvH,EAAO0H,GACzB,IAAIoM,EAAiB9T,EAEjB8T,EAAeC,WAAW,eAC5BD,EAAiBA,EAAeE,QAAQ,YAAa,KAGvDnR,EAAS4P,gBAAgBqB,GACzBpM,KAEF,OACE,qCACE,eAACjB,EAAA,EAAD,CAAO3E,UAAWrB,EAAQ4R,UAA1B,UACE,cAACzM,EAAA,EAAD,CAAKc,OAAO,KAAZ,SACE,cAACJ,EAAA,EAAD,CAAK2N,GAAI,GAAT,SACE,cAACC,EAAA,EAAD,CACExG,UAAW9N,IACXE,KAAK,OACLqO,YAAY,QACZ7N,OAAQgS,EACR/R,KAAK,QACL4T,KAAK,OACLhR,SAAUgM,YAAkBI,IAAU6E,WAI5C,eAACxO,EAAA,EAAD,CAAKc,OAAO,KAAZ,UACE,cAACJ,EAAA,EAAD,CAAK2N,GAAI,GAAT,SACE,cAAC/F,EAAA,EAAD,CACEK,UAAW2E,EACX9E,aAAcvL,EAAS4P,gBACvB3S,KAAK,UACLqO,YAAY,WACZ7N,OAAQiS,EACRhS,KAAK,WACL8N,WAAY,CAAC,SAACrO,GAAD,OAAqBkT,EAAQI,EAAgBtT,QAASW,QAGtEuS,EACC,cAAC5M,EAAA,EAAD,CAAK+N,OAAO,KAAKvS,UAAWrB,EAAS+F,OAAO,KAAKyN,GAAI,EAArD,SACE,cAAC3M,EAAA,EAAD,CAAeC,WAAYA,MAE3B,WAGR,cAAChC,EAAA,EAAM+O,OAAP,UACE,cAAC/O,EAAA,EAAM+O,OAAOC,QAAd,CACEC,kBAAmB,CAAEpO,QAAS7B,GAC9BkQ,mBAAoB,CAClBlG,UAAWsF,EAAU9S,MACrBT,OAAQkS,EACRjS,KAAM2S,EAAQ,SAAW,wB,2DCzHzCwB,GAAaC,kBAAOC,OAAPD,CAAH,kGAsBDE,GAdE,kBACf,eAAC,OAAD,CACEC,KAAK,iFACLzJ,OAAO,SACP0J,IAAI,aACJpP,MAAM,uBAJR,UAME,cAAC,OAAD,CAAMM,KAAK,KAAK+O,GAAG,OAAOpR,MAAM,UAAhC,4DAGA,cAAC8Q,GAAD,CAAYzO,KAAK,KAAKkO,KAAK,eAAevQ,MAAM,gBCtBrC,OAA0B,oCCA1B,OAA0B,kCCA1B,OAA0B,iCC6BnCqR,GAAiBN,kBAAO/O,IAAP+O,CAAH,4EACPrD,KAAM7R,MAIbyV,GAAgBP,kBAAO/O,IAAP+O,CAAH,oJACG3Q,aAGTvE,MAIP0V,GAAYR,UAAOS,IAAV,4CAGTC,GAAeV,kBAAOW,SAAPX,CAAH,kDAILY,GAAqB,SAAC,GAAgE,IAA9DjR,EAA6D,EAA7DA,OAAQC,EAAqD,EAArDA,QACrCiR,EAAWC,cACXC,EAActC,YAAYuC,KAChC,EAA8BlR,oBAAkB,GAAhD,mBAAOmR,EAAP,KAAgBC,EAAhB,KACA,EAA0BpR,mBAA6B,IAAvD,mBAAOxD,EAAP,KAAc2D,EAAd,KACA,EAA8BH,mBAAiB,IAA/C,mBAAOqR,EAAP,KAAgBC,EAAhB,KACA,EAA8BtR,oBAAkB,GAAhD,mBAAOuR,EAAP,KAAgBC,EAAhB,KAEMC,EAAO3M,aAAO,IAAI4M,KAAQ,cAoChC,OAnBAhR,qBAAU,YACc,WACpB,GAAKb,GAAW0R,EAAhB,CACAH,GAAW,GACXjR,EAAS,IACT,IACEmR,EAAWK,aAAUV,IACrB,MAAO1K,GAGP,OAFA6K,GAAW,QACXjR,EAASoG,EAAEwF,SAGbqF,GAAW,GACXI,GAAW,IAGbI,KACC,CAACX,EAAapR,EAAQ0R,EAASF,IAGhC,eAACvQ,EAAA,EAAD,CAAOC,YAAY,sBAAsBC,YAAalB,EAASmB,KAAMpB,EAAQqB,MAAM,sBAAnF,UACE,cAACJ,EAAA,EAAMiO,OAAP,CAAcjP,QAASA,EAAvB,SACE,cAACgB,EAAA,EAAMiO,OAAOC,MAAd,CAAoB6C,eAAa,EAAjC,mCAGF,eAAC/Q,EAAA,EAAMmO,KAAP,CAAYC,gBAAc,EAA1B,UACE,cAACsB,GAAD,UACE,cAACE,GAAD,UACE,cAACxN,GAAA,EAAD,CAAKC,IAAI,SAASlE,OAAQ,GAAIoE,IAAK7G,EAAQsV,GAAWX,EAAUY,GAAaC,SAGjF,cAACvB,GAAD,UACE,cAAC,OAAD,CAAMtR,MAAM,UAAUoR,GAAG,IAAI/O,KAAK,KAAlC,SACIhF,EAUA,cAAC,OAAD,CAAMgF,KAAK,KAAK+O,GAAG,OAAnB,sEATA,eAAC,OAAD,CAAM/O,KAAK,KAAK+O,GAAG,OAAnB,mDAC8C,IAC5C,eAAC,OAAD,CAAM/O,KAAK,KAAKyQ,QAAM,EAAC1B,GAAG,OAA1B,UACGU,EAAYiB,OADf,0BAC6C,uBAC3C,cAAC,GAAD,OAJJ,cAiBR,eAACpR,EAAA,EAAM+O,OAAP,CAAcsC,eAAa,EAA3B,UACE,cAAC,SAAD,CAAQ3Q,KAAK,KAAKkB,QAAQ,WAAWf,QAAS7B,EAA9C,oBAICtD,EACC,cAAC,SAAD,CAAQ2C,MAAM,UAAUqC,KAAK,KAAKsI,SAAUqH,EAASxP,QAAS,kBAAM6P,GAAW,IAA/E,mBAIA,cAAC,KAAD,CAAenP,KAAMgP,EAASe,KAAK,EAAMC,SAAQ,mCAA8BZ,GAAQ/B,KAAK,OAA5F,SACE,eAAC,SAAD,CAAQvQ,MAAM,UAAUqC,KAAK,KAAKsI,SAAUqH,EAASxP,QA7E3C,WAElByP,GAAW,GACXkB,YAAW,WACT,IAAKnB,EAAS,CACZ,IAAMoB,EAAeC,aAA2BC,KAAsBC,6BAChEC,EAASnW,EACX+V,EAAaK,eAAeC,oBAC5BN,EAAaK,eAAeE,0BAChC/B,EAASgC,aAAgBC,aAAyBL,KAEpD7S,MACC,MAiEK,UACGqR,GAAW,cAACP,GAAD,CAAczR,MAAM,iBAAiBqC,KAAK,OADxD,uBCxHCyR,GAAmB,SAAC,GAKW,IAJ1CC,EAIyC,EAJzCA,wBACAC,EAGyC,EAHzCA,cACAtT,EAEyC,EAFzCA,OACAC,EACyC,EADzCA,QAMA,OACE,eAACgB,EAAA,EAAD,CAAOC,YAAY,eAAeC,YAAalB,EAASmB,KAAMpB,EAAQqB,MAAM,eAA5E,UACE,cAACJ,EAAA,EAAMiO,OAAP,CAAcjP,QAASA,EAAvB,SACE,cAACgB,EAAA,EAAMiO,OAAOC,MAAd,6BAEF,cAACpR,EAAA,EAAD,CAASK,SATmB,WAC9BiV,KAQE,SACG,kBACC,qCACE,cAACpS,EAAA,EAAMmO,KAAP,UACE,eAAC,OAAD,CAAMzN,KAAK,KAAX,oCAC0B,IACxB,cAAC,OAAD,CAAMA,KAAK,KAAKyQ,QAAM,EAAC1B,GAAG,OAA1B,SACG4C,EAAc3E,MAAMnT,OACf,IAJV,8BAQF,cAACyF,EAAA,EAAM+O,OAAP,UACE,cAAC/O,EAAA,EAAM+O,OAAOC,QAAd,CACEC,kBAAmB,CAAEpO,QAAS7B,GAC9BkQ,mBAAoB,CAAE7Q,MAAO,QAAStD,OAvCnB,sBAuCgDC,KAAM,wB,SCzC5EsX,GAAa,OACbC,GAAgB,U,0DCCvBC,GAA2B,CAC/B,GACA,WACA,aACA,2BACA,qEAEIC,GAAsB,qCCDtBC,GAAkBtD,UAAOS,IAAV,oKASfF,GAAgBP,UAAOS,IAAV,2KACG,qBAAG8C,MAAkBC,OAAOnU,cAwKnCoU,GA1JY,SAAC,GAAyF,IAAvFC,EAAsF,EAAtFA,wBAAyB/T,EAA6D,EAA7DA,OAAQC,EAAqD,EAArDA,QAC7D,EAAkCE,oBAAS,GAA3C,mBAAO6T,EAAP,KAAkBC,EAAlB,KACA,EAAsC9T,mBAAS,IAA/C,mBAAO+T,EAAP,KAAoBC,EAApB,KACA,EAAkChU,mBAA6B,IAA/D,mBAAOiU,EAAP,KAAkBC,EAAlB,KAmDMlT,EAAc,WAClB8S,GAAa,GACbI,EAAa,IACbF,EAAe,IACflU,KAGF,OACE,eAACgB,EAAA,EAAD,CAAOC,YAAY,sBAAsBC,YAAaA,EAAaC,KAAMpB,EAAQqB,MAAM,sBAAvF,UACE,cAACJ,EAAA,EAAMiO,OAAP,CAAcjP,QAASkB,EAAvB,SACE,cAACF,EAAA,EAAMiO,OAAOC,MAAd,oCAEF,eAAClO,EAAA,EAAMmO,KAAP,CAAYC,gBAAc,EAA1B,UACE,cAACsE,GAAD,UACE,cAAC,KAAD,CACEW,OA3DW,SAACC,EAAqCC,GAEzD,IAAMC,EAAaF,EAAa1L,MAAM,GAChC6L,EDhCkB,SAACF,GAC3B,OAAKf,GAAyBkB,SAASH,EAAK3E,OAAU6D,GAAoBkB,KAAKJ,EAAKhZ,KAAKqZ,eAIrFL,EAAK7S,MAjBc,IAFc,yCAmBrC,EApBwC,6BC+CpBmT,CAAaN,GAC/B,GAAIE,EACFP,EAAeO,OADjB,CAIA,IAAMK,EAAqC,GAG3CN,EAAWO,SAAQ,SAACC,IACQ,IAApBA,EAAIzS,KAAK6P,QAAiB4C,EAAIzS,KAAK,KACvCuS,EAAYG,KAAKD,MAIrB,IAAME,EDlCqB,SAAC3S,GAC9B,IAAK,IAAI8F,EAAQ,EAAGA,EAAQ9F,EAAK6P,OAAQ/J,IAAS,CAChD,IAAMqG,EAAQnM,EAAK8F,GACnB,cAAiCqG,EAAMnM,KAAvC,GAAOsI,EAAP,KAAgBtP,EAAhB,KAAsB4Z,EAAtB,KACA,GAA0B,IAAtBzG,EAAMnM,KAAK6P,OACb,MAAM,oCAAN,OAA2C/J,EAAQ,GAErD,GAAuB,kBAAZwC,GAAwC,kBAATtP,GAAwC,kBAAZ4Z,EACpE,MAAM,oCAAN,OAA2C9M,EAAQ,GAErD,IAAKwC,EAAQuK,SAAW7Z,EAAK6Z,SAAWD,EAAQC,OAC9C,MAAM,oCAAN,OAA2C/M,EAAQ,GAGrD,IAAMgN,EAAmBxK,EAAQ+J,cACjC,IAAKU,aAAeD,GAClB,MAAM,0BAAN,OAAiChN,EAAQ,GAE3C,IAAKkN,YAAeJ,EAAQC,QAC1B,MAAM,2BAAN,OAAkC/M,EAAQ,ICe1BmN,CAAgBV,GAClC,GAAII,EACFhB,EAAegB,OADjB,CAKA,IAAMO,EAAgBX,EAAY1Q,KAAI,YAAe,IAAZ7B,EAAW,EAAXA,KACvC,MAAO,CACLsI,QAASe,aAAgBrJ,EAAK,GAAG6S,QACjC7Z,KAAMgH,EAAK,GAAG6S,OACdD,QAAS5S,EAAK,GAAG6S,WAGrBhB,EAAaqB,GACbvB,EAAe,IACfF,GAAa,MA4BL3R,QAzBY,SAAC3F,GACrBwX,EAAexX,EAAMuP,UAyBbyJ,iBAAe,EACfC,aAvBiB,WACzB3B,GAAa,GACbE,EAAe,KAsBPzW,MAAO,CACLmY,SAAU,CACRC,YAAa,UACb1I,aAAc,GAEhB2I,eAAgB,CACdD,YAAa,WAEfE,SAAU,CACRnb,MAAO,IACPuE,OAAQ,IACRM,WAAY,OACZ0F,UAAW,uCACXgI,aAAc,GAEhB6I,aAAc,CACZ3W,MAAO,UACPjE,WAAY,EACZiR,SAAU,WACV4J,KAAM,OACNC,IAAK,QAEPC,aAAc,CACZ9W,MAAuB,KAAhB4U,EAAqB,UAAY,UACxCzU,gBAAiB,OACjBoO,SAAU,GACVxS,WAAY,IACZuC,QAAS,UACTwE,OAAQ,kBACRnD,UAAW,OACXrE,SAAU,UAEZyb,YAAa,CACX5W,gBAAiB,WAEnB6W,aAAc,CACZhX,MAAO,YAzCb,SA6CE,eAAC,OAAD,CAAMqC,KAAK,KAAX,qCAC0B,uBAD1B,6BAMJ,eAAC,GAAD,WACmB,KAAhBuS,GACC,cAAC,OAAD,CAAMvS,KAAK,KAAKrC,MAAM,QAAtB,SACG4U,KAGHF,GAA6B,KAAhBE,GACb,eAAC,OAAD,CAAM5U,MAAM,OAAOoR,GAAG,IAAI/O,KAAK,KAA/B,mEACwD,uBACtD,cAAC,GAAD,OAGHqS,GAA6B,KAAhBE,GACZ,qCACE,cAAC,OAAD,CAAMvS,KAAK,KAAK+O,GAAG,OAAnB,oCACA,cAAC,OAAD,CAAM/O,KAAK,KAAKyQ,QAAM,EAAC1B,GAAG,OAA1B,oBAAsC0D,EAAU/B,OAAhD,4CAKR,cAACpR,EAAA,EAAM+O,OAAP,CAAcsC,eAAa,EAA3B,SACE,cAACrR,EAAA,EAAM+O,OAAOC,QAAd,CACEC,kBAAmB,CAAEpO,QAAS,kBAAMX,MACpCgP,mBAAoB,CAClB7Q,MAAO,UACP2K,UAAW+J,GAA6B,KAAhBE,EACxBpS,QA5IsB,WAC9BmS,GAAa,GACbF,EAAwBK,IA2IhBnY,KAAM,kB,kBCnIZsa,GAAelG,kBAAO1N,SAAP0N,CAAH,2KAYZvV,GAAYC,YAAW+D,GAoRd0X,UAxQU,WAAqB,IAAD,IACrCra,EAAUrB,KACVoJ,EHxDuB,WAC7B,IAAMuS,EAAa,CACjBhS,GAAI8O,GACJpP,OAAO,EACPI,gBAAgB,EAChBI,MAAO,OACP9J,MAAO,IACP6b,QAAQ,EACRnV,MAAO,QAGHoV,EAAgB,CACpBlS,GAAI+O,GACJrP,OAAO,EACPI,gBAAgB,EAChBI,MAAO,UACP+R,QAAQ,EACRnV,MAAO,QAGHqV,EAAgB,CACpBnS,GApCiC,UAqCjCN,OAAO,EACPI,gBAAgB,EAChBI,MAAO,GACP+R,QAAQ,GAGV,OAAOvO,aAAK,CAACsO,EAAYE,EAAeC,IG4BxBC,GACVC,EAAc5S,EAAQ+D,QAAO,qBAAGyO,UAChCxF,EAAWC,cACX4F,EAAYjI,YAAYkI,MACxB5F,EAActC,YAAYmI,KAC1BC,EAAYpI,YAAYqI,MACxBC,EAAUtI,YAAYuI,MACtBjC,EAAUtG,YAAYqI,MACtBG,EAA2B,CAAE3I,MAAO,CAAE7D,QAAS,GAAItP,KAAM,GAAI4Z,UAASxG,OAAO,IACnF,EAA0CzO,mBAAgBmX,GAA1D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAgErX,oBAAS,GAAzE,mBAAOsX,EAAP,KAAiCC,EAAjC,KACA,EAAwDvX,oBAAS,GAAjE,mBAAOwX,EAAP,KAA6BC,EAA7B,KACA,EAAwDzX,oBAAS,GAAjE,mBAAO0X,EAAP,KAA6BC,EAA7B,KACA,EAA4D3X,oBAAS,GAArE,mBAAO4X,EAAP,KAA+BC,EAA/B,KACA,GAAoD7X,oBAAS,GAA7D,qBAAO8X,GAAP,MAA2BC,GAA3B,MACQC,GAAeC,eAAfD,WAEFE,GAAUC,eACVC,GAAcC,OAAOC,YAAY,IAAIC,gBAAgBL,GAAQM,SAASC,SACtEC,GAA6B,OAAGN,SAAH,IAAGA,QAAH,EAAGA,GAAaO,aAEnDjY,qBAAU,WACRsX,GAAWY,KAAYC,gBACtB,CAACb,KAEJtX,qBAAU,WACJgY,IACFnB,GAA4B,KAE7B,CAACmB,KAEJhY,qBAAU,WACR,GAAI0U,aAAesD,IAAgC,CACjD,IAAM/N,EAAUe,aAAgBgN,IAC1BI,EAAgB7H,EAAY8H,WAAU,SAACvK,GAAD,OAAWwK,YAAYxK,EAAM7D,QAASA,MAIhF0M,EAFEyB,GAAiB,EAEF,CAAEtK,MAAOyC,EAAY6H,GAAgB3Q,MAAO2Q,GAG5C,CACftK,MAAO,CACLnT,KAAM,GACNsP,UACAsK,QAAS8B,EACTtI,OAAO,QAKd,CAACwC,EAAayH,GAA+B3B,IAoChD,OACE,qCACE,eAAC,OAAD,WACE,cAAClV,EAAA,EAAD,CAAKoX,MAAM,KAAKtZ,GAAI,EAAG6P,GAAI,GAA3B,SACE,cAAC,aAAD,UACE,cAAC,oBAAD,CAAmB0J,SAAS,cAAcpd,KAAK,eAAeqd,QAAO,OAAElI,QAAF,IAAEA,OAAF,EAAEA,EAAaiB,OAAOkH,iBAG/F,eAACvX,EAAA,EAAD,CAAKwX,IAAI,KAAK1Z,GAAI,EAAG6P,GAAI,GAAzB,UACE,cAAC,aAAD,CACE7N,QAAS,WACP0V,EAAiBF,GACjBU,GAA0B,IAE5B1Y,MAAM,UACN+Z,SAAS,YACTI,SAAS,KACTC,SAAS,KARX,oBAYA,cAAC,aAAD,CACE5X,QAAS,WACP8V,GAAwB,IAE1BtY,MAAM,UACN+Z,SAAS,YACTI,SAAS,KACTC,SAAS,KAPX,oBAWA,cAAC,aAAD,CACE5X,QAAS,WACP0V,EAAiBF,GACjBI,GAA4B,IAE9BpY,MAAM,UACN+Z,SAAS,MACTI,SAAS,KACTC,SAAS,KARX,gCAcJ,cAACvX,EAAA,EAAD,CAAO3E,UAAWrB,EAAQqQ,cAA1B,SACE,cAACmN,EAAA,EAAD,UACE,cAAC5Q,EAAA,EAAD,CACE7E,QAASA,EACT1B,KAAM4O,EACNlK,cAAY,EACZF,eAAgBuM,GAChBpM,mBAAoB,GACpBC,4BAA0B,EAC1BzC,MAAM,SACNhD,MAAiB,OAAXyP,QAAW,IAAXA,OAAA,EAAAA,EAAaiB,SAAU,EAR/B,SAUG,SAACxK,GAAD,OACCA,EAAWxD,KAAI,SAAC4Q,EAAK3M,GACnB,IAAMsR,EAAYC,YAAuB9C,EAAW9B,EAAInK,SAClDgP,EAAmBxR,GAAS,GAAKA,IAAUT,EAAWlG,KAAO,GAAKxF,EAAQ8Q,eAChF,OACE,eAAC8M,EAAA,EAAD,CACEvc,UAAWwc,IAAG7d,EAAQyQ,KAAMkN,GAC5B,cHnOe,mBGqOfG,UAAW,EAJb,UAMGnD,EAAYzS,KAAI,SAACC,GAChB,OACE,cAAC4V,EAAA,EAAD,CAAW3Y,MAAO+C,EAAO/C,MAAO6H,UAAU,KAAqB1L,MAAOgG,YAAUY,EAAOzJ,OAAvF,SACGyJ,EAAOG,KAAO+O,GACb,cAACrR,EAAA,EAAD,CAAOgY,QAAQ,OAAf,SACE,cAACC,EAAA,EAAD,CACEC,KAAMpF,EAAI3Q,EAAOG,IACjB6V,aAAW,EACXC,YAAU,EACVC,YAAaC,YAAgBxF,EAAI3Q,EAAOG,SAI5CwQ,EAAI3Q,EAAOG,KAXqCH,EAAOG,OAgB/D,cAACyV,EAAA,EAAD,CAAW9Q,UAAU,KAArB,SACE,eAAC9H,EAAA,EAAD,CAAKC,MAAM,MAAM/D,UAAWrB,EAAQ2Q,QAApC,UACE,cAAC4N,EAAA,EAAD,CACE5Y,QAAS,WACP0V,EAAiB,CACf7I,MAAOsG,EACP0F,eAAgBf,IAElBlC,GAA4B,IANhC,SASE,cAAC,OAAD,CACE/V,KAAK,KACLkO,KAAK,OACL+K,QAAQ,aACRpd,UAAW4Z,EAAUjb,EAAQkR,gBAAkBlR,EAAQmR,4BAG3D,cAACoN,EAAA,EAAD,CACE5Y,QAAS,WACP0V,EAAiB,CAAE7I,MAAOsG,IAC1B6C,GAAwB,IAH5B,SAME,cAAC,OAAD,CACEnW,KAAK,KACLkO,KAAK,SACLvQ,MAAM,QACNsb,QAAQ,eACRpd,UAAW4Z,EAAUjb,EAAQoR,kBAAoBpR,EAAQsR,8BAG5D2J,EACC,eAACb,GAAD,CACEjX,MAAM,UACNwC,QAAS,WACP0V,EAAiB,CAAE7I,MAAOsG,IAC1BiD,IAAsB,IAExBvW,KAAK,KACLkB,QAAQ,YACR,cH3RK,iBGmRP,UAUE,cAAC,YAAD,CAAWgN,KAAK,mBAChB,cAAC,OAAD,CAAMlO,KAAK,KAAKrC,MAAM,QAAtB,qBAIA,YArEHgJ,aA+EnB,cAAC,GAAD,CACEkG,sBA3KwB,SAACG,GAE7B6I,EAAiBF,GAEjBI,GAA4B,GAE5BxG,EACE2J,YAAuBC,YAAqB,2BAAKnM,GAAN,IAAa7D,QAASe,aAAgB8C,EAAM7D,SAAUsK,gBAqK/F3G,YAAa8I,EACbvX,OAAQyX,EACR/I,qBAvLuB,SAACC,GAE5B+I,GAA4B,GAE5BxG,EACE2J,YAAuBC,YAAqB,2BAAKnM,GAAN,IAAa7D,QAASe,aAAgB8C,EAAM7D,SAAUsK,gBAmL/FnV,QAAS,kBAAMyX,GAA4B,MAE7C,cAAC,GAAD,CACErE,wBAvK0B,WAE9BmE,EAAiBF,GAEjBQ,GAAwB,IAEX,OAAbP,QAAa,IAAbA,OAAA,EAAAA,EAAe5I,QAASuC,EAAS6J,YAAkBxD,EAAc5I,SAkK7D2E,cAAeiE,EACfvX,OAAQ6X,EACR5X,QAAS,kBAAM6X,GAAwB,MAEzC,cAAC,GAAD,CAAoB9X,OAAQ+X,EAAwB9X,QAAS,kBAAM+X,GAA0B,MAC7F,cAAC,GAAD,CACEjE,wBArK0B,SAACiH,GAC/B9J,EAAS+J,YAAkBD,IAC3BpD,GAAwB,IAoKpB5X,OAAQ2X,EACR1X,QAAS,kBAAM2X,GAAwB,MAEzC,cAACsD,GAAA,EAAD,CACEC,iBAAiB,eACjBnb,OAAQiY,GACRhY,QAAS,kBAAMiY,IAAsB,IACrCkD,iBAAgB,OAAE7D,QAAF,IAAEA,GAAF,UAAEA,EAAe5I,aAAjB,aAAE,EAAsB7D,QACxCuQ,cAAa,OAAE9D,QAAF,IAAEA,GAAF,UAAEA,EAAe5I,aAAjB,aAAE,EAAsBnT","file":"static/js/54.28f2eae2.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\n\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import { ReactElement } from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any): ReactElement => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport * as React from 'react'\n\ninterface CellWidth {\n  maxWidth: string\n}\n\nexport const cellWidth = (width?: string | number): CellWidth | undefined => {\n  if (!width) {\n    return undefined\n  }\n\n  return {\n    maxWidth: `${width}px`,\n  }\n}\n\nclass GnoTableHead extends React.PureComponent<any> {\n  changeSort =\n    (property: string, orderAttr: string): (() => void) =>\n    () => {\n      const { onSort } = this.props\n\n      onSort(property, orderAttr)\n    }\n\n  render(): React.ReactElement {\n    const { columns, order, orderBy } = this.props\n\n    return (\n      <TableHead>\n        <TableRow>\n          {columns.map((column) => (\n            <TableCell\n              align={column.align}\n              key={column.id}\n              padding={column.disablePadding ? 'none' : 'normal'}\n              sortDirection={orderBy === column.id ? order : false}\n            >\n              {column.static ? (\n                <div style={column.style}>{column.label}</div>\n              ) : (\n                <TableSortLabel\n                  active={orderBy === column.id}\n                  direction={order}\n                  onClick={this.changeSort(column.id, column.order)}\n                  style={column.style}\n                >\n                  {column.label}\n                </TableSortLabel>\n              )}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    )\n  }\n}\n\nexport default GnoTableHead\n","import { List } from 'immutable'\n\nexport const FIXED = 'fixed'\n\nexport const buildOrderFieldFrom = (attr: string): string => `${attr}Order`\n\nconst desc = (\n  a: string,\n  b: string,\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number,\n): number => {\n  const order = orderProp ? buildOrderFieldFrom(orderBy) : orderBy\n\n  if (format(b[order]) < format(a[order])) {\n    return -1\n  }\n  if (format(b[order]) > format(a[order])) {\n    return 1\n  }\n\n  return 0\n}\n\n// eslint-disable-next-line\nexport const stableSort = (dataArray, cmp, fixed) => {\n  const fixedElems = fixed ? dataArray.filter((elem) => elem.fixed) : List([])\n  const data = fixed ? dataArray.filter((elem) => !elem[FIXED]) : dataArray\n  let stabilizedThis = data.map((el, index) => [el, index])\n\n  stabilizedThis = stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0])\n\n    if (order !== 0) {\n      return order\n    }\n\n    return a[1] - b[1]\n  })\n\n  const sortedElems = stabilizedThis.map((el) => el[0])\n\n  return fixedElems.concat(sortedElems)\n}\n\nexport const getSorting = (\n  order: 'desc' | 'asc',\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number = (value) => value,\n): ((a: string, b: string) => number) =>\n  order === 'desc'\n    ? (a, b) => desc(a, b, orderBy, orderProp, format)\n    : (a, b) => -desc(a, b, orderBy, orderProp, format)\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport { withStyles } from '@material-ui/core/styles'\nimport * as React from 'react'\n\nimport TableHead from 'src/components/Table/TableHead'\nimport { getSorting, stableSort } from 'src/components/Table/sorting'\nimport Row from 'src/components/layout/Row'\nimport { sm, xxl } from 'src/theme/variables'\n\nconst styles = {\n  root: {\n    backgroundColor: 'white',\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n  selectRoot: {\n    lineHeight: xxl,\n    backgroundColor: 'white',\n  },\n  white: {\n    backgroundColor: 'white',\n  },\n  paginationRoot: {\n    backgroundColor: 'white',\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n    marginBottom: '90px',\n    borderBottomRightRadius: sm,\n    borderBottomLeftRadius: sm,\n  },\n  loader: {\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n}\n\nconst FIXED_EMPTY_HEIGHT = 255\n\nconst backProps = {\n  'aria-label': 'Previous Page',\n}\n\nconst nextProps = {\n  'aria-label': 'Next Page',\n}\n\nclass GnoTable extends React.Component<any, any> {\n  static defaultProps = {\n    defaultOrder: 'asc',\n    disablePagination: false,\n    defaultRowsPerPage: 5,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      page: 0,\n      order: undefined,\n      orderBy: undefined,\n      fixed: undefined,\n      orderProp: false,\n      rowsPerPage: undefined,\n    }\n  }\n\n  componentDidMount() {\n    const { columns, defaultOrderBy } = this.props\n\n    if (defaultOrderBy && columns) {\n      const defaultOrderCol = columns.find(({ id }) => id === defaultOrderBy)\n\n      if (defaultOrderCol.order) {\n        this.setState({\n          orderProp: true,\n        })\n      }\n    }\n  }\n\n  onSort = (newOrderBy, orderProp) => {\n    const { order, orderBy } = this.state\n    const { defaultOrder } = this.props\n    let newOrder = 'desc'\n\n    // if table was previously sorted by the user\n    if (order && orderBy === newOrderBy && order === 'desc') {\n      newOrder = 'asc'\n    } else if (!order && defaultOrder === 'desc') {\n      // if it was not sorted and defaultOrder is used\n      newOrder = 'asc'\n    }\n\n    this.setState(() => ({\n      order: newOrder,\n      orderBy: newOrderBy,\n      orderProp,\n      fixed: false,\n    }))\n  }\n\n  getEmptyStyle = () => ({\n    height: `calc(100vh - ${FIXED_EMPTY_HEIGHT}px)`,\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    backgroundColor: 'white',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  })\n\n  handleChangePage = (e, page) => {\n    this.setState({ page })\n  }\n\n  handleChangeRowsPerPage = (e) => {\n    const rowsPerPage = Number(e.target.value)\n    this.setState({ rowsPerPage })\n  }\n\n  render() {\n    const {\n      children,\n      classes,\n      columns,\n      data,\n      defaultFixed,\n      defaultOrder,\n      defaultOrderBy,\n      defaultRowsPerPage,\n      disableLoadingOnEmptyTable,\n      disablePagination,\n      label,\n      noBorder,\n      size,\n    }: any = this.props\n    const { fixed, order, orderBy, orderProp, page, rowsPerPage } = this.state\n    const orderByParam = orderBy || defaultOrderBy\n    const orderParam = order || defaultOrder\n    const displayRows = rowsPerPage || defaultRowsPerPage\n    const fixedParam = typeof fixed !== 'undefined' ? fixed : !!defaultFixed\n    const paginationClasses = {\n      selectRoot: classes.selectRoot,\n      root: !noBorder && classes.paginationRoot,\n      input: classes.white,\n    }\n    const columnSort = columns.find((column) => column.id === orderByParam)\n    let sortedData = stableSort(\n      data,\n      getSorting(orderParam, orderByParam, orderProp, columnSort?.formatTypeSort),\n      fixedParam,\n    )\n\n    if (!disablePagination) {\n      sortedData = sortedData.slice(page * displayRows, page * displayRows + displayRows)\n    }\n\n    const isEmpty = size === 0 && !disableLoadingOnEmptyTable\n\n    return (\n      <>\n        {!isEmpty && (\n          <Table aria-labelledby={label} className={noBorder ? '' : classes.root}>\n            <TableHead columns={columns} onSort={this.onSort} order={order} orderBy={orderByParam} />\n            <TableBody>{children(sortedData)}</TableBody>\n          </Table>\n        )}\n        {isEmpty && (\n          <Row className={classes.loader} style={this.getEmptyStyle()}>\n            <Loader size=\"sm\" />\n          </Row>\n        )}\n        {!disablePagination && (\n          <TablePagination\n            backIconButtonProps={backProps}\n            classes={paginationClasses}\n            component=\"div\"\n            count={size}\n            nextIconButtonProps={nextProps}\n            onPageChange={this.handleChangePage}\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={displayRows}\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nexport default withStyles(styles as any)(GnoTable)\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Field } from 'react-final-form'\nimport { OnChange } from 'react-final-form-listeners'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport TextField from 'src/components/forms/TextField'\nimport { Validator, composeValidators, mustBeEthereumAddress, required } from 'src/components/forms/validator'\nimport { trimSpaces } from 'src/utils/strings'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\n\nexport interface AddressInputProps {\n  fieldMutator: (address: string) => void\n  name?: string\n  text?: string\n  placeholder?: string\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined | false\n  testId: string\n  validators?: Validator[]\n  defaultValue?: string\n  disabled?: boolean\n  spellCheck?: boolean\n  className?: string\n}\n\nconst AddressInput = ({\n  className = '',\n  name = 'recipientAddress',\n  text = 'Recipient*',\n  placeholder = 'Recipient*',\n  fieldMutator,\n  testId,\n  inputAdornment,\n  validators = [],\n  defaultValue,\n  disabled,\n}: AddressInputProps): React.ReactElement => {\n  const [currentInput, setCurrentInput] = useState<string>('')\n  const [resolutions, setResolutions] = useState<Record<string, string | undefined>>({})\n  const resolvedAddress = resolutions[currentInput]\n  const isResolving = resolvedAddress === ''\n\n  // External validators must receive an unprefixed address\n  const sanitizedValidators = useCallback(\n    (val: string) => {\n      const parsed = parsePrefixedAddress(val)\n      return composeValidators(...validators)(parsed.address)\n    },\n    [validators],\n  )\n\n  // Internal validators + externally passed validators\n  const allValidators = useMemo(\n    () => composeValidators(required, mustBeEthereumAddress, sanitizedValidators),\n    [sanitizedValidators],\n  )\n\n  const onValueChange = useCallback(\n    (rawVal: string) => {\n      const address = trimSpaces(rawVal)\n\n      setCurrentInput(rawVal)\n\n      // A crypto domain name\n      if (isValidEnsName(address) || isValidCryptoDomainName(address)) {\n        setResolutions((prev) => ({ ...prev, [rawVal]: '' }))\n\n        getAddressFromDomain(address)\n          .then((resolverAddr) => {\n            const formattedAddress = checksumAddress(resolverAddr)\n            setResolutions((prev) => ({ ...prev, [rawVal]: formattedAddress }))\n          })\n          .catch((err) => {\n            setResolutions((prev) => ({ ...prev, [rawVal]: undefined }))\n            logError(Errors._101, err.message)\n          })\n      } else {\n        // A regular address hash\n        if (!mustBeEthereumAddress(address)) {\n          const parsed = parsePrefixedAddress(address)\n          const checkedAddress = checksumAddress(parsed.address) || parsed.address\n\n          // Field mutator (parent component) always gets an unprefixed address\n          fieldMutator(checkedAddress)\n        }\n      }\n    },\n    [setCurrentInput, setResolutions, fieldMutator],\n  )\n\n  useEffect(() => {\n    if (resolvedAddress) {\n      onValueChange(resolvedAddress)\n    }\n  }, [resolvedAddress, onValueChange])\n\n  const adornment = isResolving\n    ? {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CircularProgress size=\"16px\" />\n          </InputAdornment>\n        ),\n      }\n    : inputAdornment\n\n  return (\n    <>\n      <Field\n        className={className}\n        component={TextField as any}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        inputAdornment={adornment}\n        name={name}\n        placeholder={placeholder}\n        text={text}\n        spellCheck={false}\n        validate={allValidators}\n        inputProps={{\n          'data-testid': testId,\n        }}\n      />\n\n      <OnChange name={name}>{onValueChange}</OnChange>\n    </>\n  )\n}\n\nexport default AddressInput\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  formContainer: {\n    minHeight: '250px',\n  },\n  title: {\n    padding: lg,\n    paddingBottom: 0,\n  },\n  annotation: {\n    paddingLeft: lg,\n  },\n  hide: {\n    '&:hover': {\n      backgroundColor: '#f7f5f5',\n    },\n    '&:hover $actions': {\n      visibility: 'initial',\n    },\n  },\n  actions: {\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    visibility: 'hidden',\n    minWidth: '100px',\n    gap: md,\n  },\n  noBorderBottom: {\n    '& > td': {\n      borderBottom: 'none',\n    },\n  },\n  controlsRow: {\n    backgroundColor: 'white',\n    padding: lg,\n    borderRadius: sm,\n  },\n  editEntryButton: {\n    cursor: 'pointer',\n  },\n  editEntryButtonNonOwner: {\n    cursor: 'pointer',\n  },\n  removeEntryButton: {\n    cursor: 'pointer',\n  },\n  removeEntryButtonDisabled: {\n    cursor: 'default',\n  },\n  removeEntryButtonNonOwner: {\n    cursor: 'pointer',\n  },\n  leftIcon: {\n    marginRight: sm,\n  },\n  iconSmall: {\n    fontSize: 16,\n  },\n})\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg, md } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    heading: {\n      padding: lg,\n      justifyContent: 'space-between',\n      boxSizing: 'border-box',\n      height: '74px',\n    },\n    manage: {\n      fontSize: lg,\n    },\n    container: {\n      padding: `${md} ${lg}`,\n    },\n    close: {\n      height: '35px',\n      width: '35px',\n    },\n  }),\n)\n","import { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport { Modal } from 'src/components/Modal'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport AddressInput from 'src/components/forms/AddressInput'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, required, uniqueAddress, validAddressBookName } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { currentNetworkAddressBookAddresses } from 'src/logic/addressBook/store/selectors'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { Entry } from 'src/routes/safe/components/AddressBook'\n\nexport const CREATE_ENTRY_INPUT_NAME_ID = 'create-entry-input-name'\nexport const CREATE_ENTRY_INPUT_ADDRESS_ID = 'create-entry-input-address'\nexport const SAVE_NEW_ENTRY_BTN_ID = 'save-new-entry-btn-id'\n\nconst formMutators = {\n  setOwnerAddress: (args, state, utils) => {\n    utils.changeValue(state, 'address', () => args[0])\n  },\n}\n\ntype CreateEditEntryModalProps = {\n  editEntryModalHandler: (entry: AddressBookEntry) => void\n  entryToEdit: Entry\n  isOpen: boolean\n  newEntryModalHandler: (entry: AddressBookEntry) => void\n  onClose: () => void\n}\n\nexport const CreateEditEntryModal = ({\n  editEntryModalHandler,\n  entryToEdit,\n  isOpen,\n  newEntryModalHandler,\n  onClose,\n}: CreateEditEntryModalProps): ReactElement => {\n  const classes = useStyles()\n\n  const { isNew, ...initialValues } = entryToEdit.entry\n\n  const onFormSubmitted = (values: AddressBookEntry) => {\n    if (isNew) {\n      newEntryModalHandler(values)\n    } else {\n      editEntryModalHandler(values)\n    }\n  }\n\n  const storedAddressesInThisNetwork = useSelector(currentNetworkAddressBookAddresses)\n  const isUniqueAddress = uniqueAddress(storedAddressesInThisNetwork)\n\n  return (\n    <Modal\n      description={isNew ? 'Create new addressBook entry' : 'Edit addressBook entry'}\n      handleClose={onClose}\n      open={isOpen}\n      title={isNew ? 'Create new entry' : 'Edit entry'}\n    >\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title>{isNew ? 'Create entry' : 'Edit entry'}</Modal.Header.Title>\n      </Modal.Header>\n      <Modal.Body withoutPadding>\n        <GnoForm formMutators={formMutators} onSubmit={onFormSubmitted} initialValues={initialValues}>\n          {(...args) => {\n            const formState = args[2]\n            const mutators = args[3]\n            const handleScan = (value, closeQrModal) => {\n              let scannedAddress = value\n\n              if (scannedAddress.startsWith('ethereum:')) {\n                scannedAddress = scannedAddress.replace('ethereum:', '')\n              }\n\n              mutators.setOwnerAddress(scannedAddress)\n              closeQrModal()\n            }\n            return (\n              <>\n                <Block className={classes.container}>\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <Field\n                        component={TextField}\n                        name=\"name\"\n                        placeholder=\"Name*\"\n                        testId={CREATE_ENTRY_INPUT_NAME_ID}\n                        text=\"Name*\"\n                        type=\"text\"\n                        validate={composeValidators(required, validAddressBookName)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressInput\n                        disabled={!isNew}\n                        fieldMutator={mutators.setOwnerAddress}\n                        name=\"address\"\n                        placeholder=\"Address*\"\n                        testId={CREATE_ENTRY_INPUT_ADDRESS_ID}\n                        text=\"Address*\"\n                        validators={[(value?: string) => (isNew ? isUniqueAddress(value) : undefined)]}\n                      />\n                    </Col>\n                    {isNew ? (\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <ScanQRWrapper handleScan={handleScan} />\n                      </Col>\n                    ) : null}\n                  </Row>\n                </Block>\n                <Modal.Footer>\n                  <Modal.Footer.Buttons\n                    cancelButtonProps={{ onClick: onClose }}\n                    confirmButtonProps={{\n                      disabled: !formState.valid,\n                      testId: SAVE_NEW_ENTRY_BTN_ID,\n                      text: isNew ? 'Create' : 'Save',\n                    }}\n                  />\n                </Modal.Footer>\n              </>\n            )\n          }}\n        </GnoForm>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Text, Link, Icon } from '@gnosis.pm/safe-react-components'\n\nconst StyledIcon = styled(Icon)`\n  svg {\n    position: relative;\n    top: 4px;\n    left: 4px;\n  }\n`\n\nconst HelpInfo = (): ReactElement => (\n  <Link\n    href=\"https://help.gnosis-safe.io/en/articles/5299068-address-book-export-and-import\"\n    target=\"_blank\"\n    rel=\"noreferrer\"\n    title=\"Export & import info\"\n  >\n    <Text size=\"xl\" as=\"span\" color=\"primary\">\n      Learn about the address book import and export\n    </Text>\n    <StyledIcon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n  </Link>\n)\n\nexport default HelpInfo\n","export default __webpack_public_path__ + \"static/media/success.05cfb920.svg\";","export default __webpack_public_path__ + \"static/media/error.b0f27278.svg\";","export default __webpack_public_path__ + \"static/media/wait.8fd3356d.svg\";","import { ReactElement, useEffect, useState } from 'react'\nimport { format } from 'date-fns'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { CSVDownloader, jsonToCSV } from 'react-papaparse'\nimport { Button, Loader, Text } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { enhanceSnackbarForAction, getNotificationsFromTxType } from 'src/logic/notifications'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\n\nimport { addressBookState } from 'src/logic/addressBook/store/selectors'\n\nimport { lg, md, background } from 'src/theme/variables'\n\nimport { Modal } from 'src/components/Modal'\nimport Img from 'src/components/layout/Img'\nimport Row from 'src/components/layout/Row'\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\n\nimport SuccessSvg from './assets/success.svg'\nimport ErrorSvg from './assets/error.svg'\nimport LoadingSvg from './assets/wait.svg'\n\ntype ExportEntriesModalProps = {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ImageContainer = styled(Row)`\n  padding: ${md} ${lg};\n  justify-content: center;\n`\n\nconst InfoContainer = styled(Row)`\n  background-color: ${background};\n  flex-direction: column;\n  justify-content: center;\n  padding: ${lg};\n  text-align: center;\n`\n\nconst BodyImage = styled.div`\n  grid-row: 1;\n`\nconst StyledLoader = styled(Loader)`\n  margin-right: 5px;\n`\n\nexport const ExportEntriesModal = ({ isOpen, onClose }: ExportEntriesModalProps): ReactElement => {\n  const dispatch = useDispatch()\n  const addressBook = useSelector(addressBookState)\n  const [loading, setLoading] = useState<boolean>(true)\n  const [error, setError] = useState<string | undefined>('')\n  const [csvData, setCsvData] = useState<string>('')\n  const [doRetry, setDoRetry] = useState<boolean>(false)\n\n  const date = format(new Date(), 'yyyy-MM-dd')\n\n  const handleClose = () => {\n    //This timeout prevents modal to be closed abruptly\n    setLoading(true)\n    setTimeout(() => {\n      if (!loading) {\n        const notification = getNotificationsFromTxType(TX_NOTIFICATION_TYPES.ADDRESS_BOOK_EXPORT_ENTRIES)\n        const action = error\n          ? notification.afterExecution.afterExecutionError\n          : notification.afterExecution.noMoreConfirmationsNeeded\n        dispatch(enqueueSnackbar(enhanceSnackbarForAction(action)))\n      }\n      onClose()\n    }, 600)\n  }\n\n  useEffect(() => {\n    const handleCsvData = () => {\n      if (!isOpen && !doRetry) return\n      setLoading(true)\n      setError('')\n      try {\n        setCsvData(jsonToCSV(addressBook))\n      } catch (e) {\n        setLoading(false)\n        setError(e.message)\n        return\n      }\n      setLoading(false)\n      setDoRetry(false)\n    }\n\n    handleCsvData()\n  }, [addressBook, isOpen, doRetry, csvData])\n\n  return (\n    <Modal description=\"Export address book\" handleClose={onClose} open={isOpen} title=\"Export address book\">\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title withoutMargin>Export address book</Modal.Header.Title>\n      </Modal.Header>\n\n      <Modal.Body withoutPadding>\n        <ImageContainer>\n          <BodyImage>\n            <Img alt=\"Export\" height={92} src={error ? ErrorSvg : loading ? LoadingSvg : SuccessSvg} />\n          </BodyImage>\n        </ImageContainer>\n        <InfoContainer>\n          <Text color=\"primary\" as=\"p\" size=\"xl\">\n            {!error ? (\n              <Text size=\"xl\" as=\"span\">\n                You&apos;re about to export a CSV file with{' '}\n                <Text size=\"xl\" strong as=\"span\">\n                  {addressBook.length} address book entries. <br />\n                  <HelpInfo />\n                </Text>\n                .\n              </Text>\n            ) : (\n              <Text size=\"xl\" as=\"span\">\n                An error occurred while generating the address book CSV.\n              </Text>\n            )}\n          </Text>\n        </InfoContainer>\n      </Modal.Body>\n\n      <Modal.Footer withoutBorder>\n        <Button size=\"md\" variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n\n        {error ? (\n          <Button color=\"primary\" size=\"md\" disabled={loading} onClick={() => setDoRetry(true)}>\n            Retry\n          </Button>\n        ) : (\n          <CSVDownloader data={csvData} bom={true} filename={`gnosis-safe-address-book-${date}`} type=\"link\">\n            <Button color=\"primary\" size=\"md\" disabled={loading} onClick={handleClose}>\n              {loading && <StyledLoader color=\"secondaryLight\" size=\"xs\" />}\n              Download\n            </Button>\n          </CSVDownloader>\n        )}\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { Modal } from 'src/components/Modal'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { Entry } from 'src/routes/safe/components/AddressBook'\n\nexport const DELETE_ENTRY_BTN_ID = 'delete-entry-btn-id'\n\ninterface DeleteEntryModalProps {\n  deleteEntryModalHandler: () => void\n  entryToDelete: Entry\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport const DeleteEntryModal = ({\n  deleteEntryModalHandler,\n  entryToDelete,\n  isOpen,\n  onClose,\n}: DeleteEntryModalProps): ReactElement => {\n  const handleDeleteEntrySubmit = () => {\n    deleteEntryModalHandler()\n  }\n\n  return (\n    <Modal description=\"Delete entry\" handleClose={onClose} open={isOpen} title=\"Delete entry\">\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title>Delete entry</Modal.Header.Title>\n      </Modal.Header>\n      <GnoForm onSubmit={handleDeleteEntrySubmit}>\n        {() => (\n          <>\n            <Modal.Body>\n              <Text size=\"xl\">\n                This action will delete{' '}\n                <Text size=\"xl\" strong as=\"span\">\n                  {entryToDelete.entry.name}\n                </Text>{' '}\n                from the address book.\n              </Text>\n            </Modal.Body>\n            <Modal.Footer>\n              <Modal.Footer.Buttons\n                cancelButtonProps={{ onClick: onClose }}\n                confirmButtonProps={{ color: 'error', testId: DELETE_ENTRY_BTN_ID, text: 'Delete' }}\n              />\n            </Modal.Footer>\n          </>\n        )}\n      </GnoForm>\n    </Modal>\n  )\n}\n","import { List } from 'immutable'\nimport { TableCellProps } from '@material-ui/core/TableCell/TableCell'\n\nexport const ADDRESS_BOOK_ROW_ID = 'address-book-row'\nexport const TX_TABLE_ADDRESS_BOOK_ID = 'idAddressBook'\nexport const AB_NAME_ID = 'name'\nexport const AB_ADDRESS_ID = 'address'\nexport const AB_ADDRESS_ACTIONS_ID = 'actions'\nexport const EDIT_ENTRY_BUTTON = 'edit-entry-btn'\nexport const REMOVE_ENTRY_BUTTON = 'remove-entry-btn'\nexport const SEND_ENTRY_BUTTON = 'send-entry-btn'\n\ntype AddressBookColumn = {\n  id: string\n  order: boolean\n  disablePadding?: boolean\n  label: string\n  width?: number\n  custom?: boolean\n  align?: TableCellProps['align']\n}\n\nexport const generateColumns = (): List<AddressBookColumn> => {\n  const nameColumn = {\n    id: AB_NAME_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Name',\n    width: 150,\n    custom: false,\n    align: 'left',\n  }\n\n  const addressColumn = {\n    id: AB_ADDRESS_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Address',\n    custom: false,\n    align: 'left',\n  }\n\n  const actionsColumn = {\n    id: AB_ADDRESS_ACTIONS_ID,\n    order: false,\n    disablePadding: false,\n    label: '',\n    custom: true,\n  }\n\n  return List([nameColumn, addressColumn, actionsColumn])\n}\n","import { isValidAddress } from 'src/utils/isValidAddress'\nimport { isValidChainId } from 'src/config'\n\nexport const WRONG_FILE_EXTENSION_ERROR = 'Only CSV files are allowed'\nexport const FILE_SIZE_TOO_BIG_ERROR = 'The size of the file is over 1 MB'\n\nconst FILE_BYTES_LIMIT = 1000000\nconst IMPORT_SUPPORTED_FORMATS = [\n  '',\n  'text/csv',\n  'text/plain',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n]\nconst CSV_EXTENSION_REGEX = /[^.]+\\.(txt|csv|tsv|ods|xls|xlsx)$/\n\nexport type CsvDataType = { data: string[] }[]\n\nexport const validateFile = (file: File): string | undefined => {\n  if (!IMPORT_SUPPORTED_FORMATS.includes(file.type) || !CSV_EXTENSION_REGEX.test(file.name.toLowerCase())) {\n    return WRONG_FILE_EXTENSION_ERROR\n  }\n\n  if (file.size >= FILE_BYTES_LIMIT) {\n    return FILE_SIZE_TOO_BIG_ERROR\n  }\n\n  return\n}\n\nexport const validateCsvData = (data: CsvDataType): string | undefined => {\n  for (let index = 0; index < data.length; index++) {\n    const entry = data[index]\n    const [address, name, chainId] = entry.data\n    if (entry.data.length !== 3) {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    if (typeof address !== 'string' || typeof name !== 'string' || typeof chainId !== 'string') {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    if (!address.trim() || !name.trim() || !chainId.trim()) {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    // Verify address properties\n    const lowerCaseAddress = address.toLowerCase()\n    if (!isValidAddress(lowerCaseAddress)) {\n      return `Invalid address on row ${index + 1}`\n    }\n    if (!isValidChainId(chainId.trim())) {\n      return `Invalid chain id on row ${index + 1}`\n    }\n  }\n  return\n}\n","import { ReactElement, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@gnosis.pm/safe-react-components'\n\nimport { Modal } from 'src/components/Modal'\nimport { CSVReader } from 'react-papaparse'\nimport { ParseResult } from 'papaparse'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\nimport { validateCsvData, validateFile } from 'src/routes/safe/components/AddressBook/utils'\nimport { ChainId } from 'src/config/chain.d'\n\nconst ImportContainer = styled.div`\n  flex-direction: column;\n  justify-content: center;\n  margin: 24px;\n  align-items: center;\n  min-height: 100px;\n  display: flex;\n`\n\nconst InfoContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px;\n  text-align: center;\n  margin-top: 16px;\n`\n\ntype ImportEntriesModalProps = {\n  importEntryModalHandler: (addressList: AddressBookEntry[]) => void\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ImportEntriesModal = ({ importEntryModalHandler, isOpen, onClose }: ImportEntriesModalProps): ReactElement => {\n  const [csvLoaded, setCsvLoaded] = useState(false)\n  const [importError, setImportError] = useState('')\n  const [entryList, setEntryList] = useState<AddressBookEntry[]>([])\n\n  const handleImportEntrySubmit = () => {\n    setCsvLoaded(false)\n    importEntryModalHandler(entryList)\n  }\n\n  const handleOnDrop = (parseResults: ParseResult<string>[], file: File) => {\n    // Remove the header row\n    const slicedData = parseResults.slice(1)\n    const fileError = validateFile(file)\n    if (fileError) {\n      setImportError(fileError)\n      return\n    }\n    const trimmedData: ParseResult<string>[] = []\n\n    // Delete empty rows\n    slicedData.forEach((row) => {\n      if (!(row.data.length === 1 && !row.data[0])) {\n        trimmedData.push(row)\n      }\n    })\n\n    const dataError = validateCsvData(trimmedData)\n    if (dataError) {\n      setImportError(dataError)\n      return\n    }\n\n    const formattedList = trimmedData.map(({ data }) => {\n      return {\n        address: checksumAddress(data[0].trim()),\n        name: data[1].trim(),\n        chainId: data[2].trim() as ChainId,\n      }\n    })\n    setEntryList(formattedList)\n    setImportError('')\n    setCsvLoaded(true)\n  }\n\n  const handleOnError = (error: Error): void => {\n    setImportError(error.message)\n  }\n\n  const handleOnRemoveFile = () => {\n    setCsvLoaded(false)\n    setImportError('')\n  }\n\n  const handleClose = () => {\n    setCsvLoaded(false)\n    setEntryList([])\n    setImportError('')\n    onClose()\n  }\n\n  return (\n    <Modal description=\"Import address book\" handleClose={handleClose} open={isOpen} title=\"Import address book\">\n      <Modal.Header onClose={handleClose}>\n        <Modal.Header.Title>Import address book</Modal.Header.Title>\n      </Modal.Header>\n      <Modal.Body withoutPadding>\n        <ImportContainer>\n          <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            onRemoveFile={handleOnRemoveFile}\n            style={{\n              dropArea: {\n                borderColor: '#B2B5B2',\n                borderRadius: 8,\n              },\n              dropAreaActive: {\n                borderColor: '#008C73',\n              },\n              dropFile: {\n                width: 200,\n                height: 100,\n                background: '#fff',\n                boxShadow: 'rgb(40 54 61 / 18%) 1px 2px 10px 0px',\n                borderRadius: 8,\n              },\n              fileSizeInfo: {\n                color: '#001428',\n                lineHeight: 1,\n                position: 'absolute',\n                left: '10px',\n                top: '12px',\n              },\n              fileNameInfo: {\n                color: importError === '' ? '#008C73' : '#DB3A3D',\n                backgroundColor: '#fff',\n                fontSize: 14,\n                lineHeight: 1.4,\n                padding: '0 0.4em',\n                margin: '1.2em 0 0.5em 0',\n                maxHeight: '59px',\n                overflow: 'hidden',\n              },\n              progressBar: {\n                backgroundColor: '#008C73',\n              },\n              removeButton: {\n                color: '#DB3A3D',\n              },\n            }}\n          >\n            <Text size=\"xl\">\n              Drop your CSV file here <br />\n              or click to upload.\n            </Text>\n          </CSVReader>\n        </ImportContainer>\n        <InfoContainer>\n          {importError !== '' && (\n            <Text size=\"xl\" color=\"error\">\n              {importError}\n            </Text>\n          )}\n          {!csvLoaded && importError === '' && (\n            <Text color=\"text\" as=\"p\" size=\"xl\">\n              Only CSV files exported from Gnosis Safe are allowed. <br />\n              <HelpInfo />\n            </Text>\n          )}\n          {csvLoaded && importError === '' && (\n            <>\n              <Text size=\"xl\" as=\"span\">{`You're about to import`}</Text>\n              <Text size=\"xl\" strong as=\"span\">{` ${entryList.length} entries to your address book`}</Text>\n            </>\n          )}\n        </InfoContainer>\n      </Modal.Body>\n      <Modal.Footer withoutBorder>\n        <Modal.Footer.Buttons\n          cancelButtonProps={{ onClick: () => handleClose() }}\n          confirmButtonProps={{\n            color: 'primary',\n            disabled: !csvLoaded || importError !== '',\n            onClick: handleImportEntrySubmit,\n            text: 'Import',\n          }}\n        />\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default ImportEntriesModal\n","import {\n  Breadcrumb,\n  BreadcrumbElement,\n  Button,\n  ButtonLink,\n  FixedIcon,\n  Icon,\n  Menu,\n  Text,\n} from '@gnosis.pm/safe-react-components'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableRow from '@material-ui/core/TableRow'\nimport { makeStyles } from '@material-ui/core/styles'\nimport cn from 'classnames'\nimport styled from 'styled-components'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { styles } from './style'\nimport { getExplorerInfo } from 'src/config'\nimport ButtonHelper from 'src/components/ButtonHelper'\nimport Table from 'src/components/Table'\nimport { cellWidth } from 'src/components/Table/TableHead'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { AddressBookEntry, makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookAddOrUpdate, addressBookImport, addressBookRemove } from 'src/logic/addressBook/store/actions'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { isUserAnOwnerOfAnySafe, sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { CreateEditEntryModal } from 'src/routes/safe/components/AddressBook/CreateEditEntryModal'\nimport { ExportEntriesModal } from 'src/routes/safe/components/AddressBook/ExportEntriesModal'\nimport { DeleteEntryModal } from 'src/routes/safe/components/AddressBook/DeleteEntryModal'\nimport {\n  AB_NAME_ID,\n  AB_ADDRESS_ID,\n  ADDRESS_BOOK_ROW_ID,\n  SEND_ENTRY_BUTTON,\n  generateColumns,\n} from 'src/routes/safe/components/AddressBook/columns'\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\nimport { safesAsList } from 'src/logic/safe/store/selectors'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { useAnalytics, SAFE_EVENTS } from 'src/utils/googleAnalytics'\nimport ImportEntriesModal from './ImportEntriesModal'\nimport { isValidAddress } from 'src/utils/isValidAddress'\nimport { useHistory } from 'react-router'\nimport { currentChainId } from 'src/logic/config/store/selectors'\n\nconst StyledButton = styled(Button)`\n  &&.MuiButton-root {\n    margin: 4px 12px 4px 0px;\n    padding: 0 12px;\n    min-width: auto;\n  }\n\n  svg {\n    margin: 0 6px 0 0;\n  }\n`\n\nconst useStyles = makeStyles(styles)\n\ninterface AddressBookSelectedEntry extends AddressBookEntry {\n  isNew?: boolean\n}\n\nexport type Entry = {\n  entry: AddressBookSelectedEntry\n  index?: number\n  isOwnerAddress?: boolean\n}\n\nconst AddressBookTable = (): ReactElement => {\n  const classes = useStyles()\n  const columns = generateColumns()\n  const autoColumns = columns.filter(({ custom }) => !custom)\n  const dispatch = useDispatch()\n  const safesList = useSelector(safesAsList)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const networkId = useSelector(currentChainId)\n  const granted = useSelector(grantedSelector)\n  const chainId = useSelector(currentChainId)\n  const initialEntryState: Entry = { entry: { address: '', name: '', chainId, isNew: true } }\n  const [selectedEntry, setSelectedEntry] = useState<Entry>(initialEntryState)\n  const [editCreateEntryModalOpen, setEditCreateEntryModalOpen] = useState(false)\n  const [importEntryModalOpen, setImportEntryModalOpen] = useState(false)\n  const [deleteEntryModalOpen, setDeleteEntryModalOpen] = useState(false)\n  const [exportEntriesModalOpen, setExportEntriesModalOpen] = useState(false)\n  const [sendFundsModalOpen, setSendFundsModalOpen] = useState(false)\n  const { trackEvent } = useAnalytics()\n\n  const history = useHistory()\n  const queryParams = Object.fromEntries(new URLSearchParams(history.location.search))\n  const entryAddressToEditOrCreateNew = queryParams?.entryAddress\n\n  useEffect(() => {\n    trackEvent(SAFE_EVENTS.ADDRESS_BOOK)\n  }, [trackEvent])\n\n  useEffect(() => {\n    if (entryAddressToEditOrCreateNew) {\n      setEditCreateEntryModalOpen(true)\n    }\n  }, [entryAddressToEditOrCreateNew])\n\n  useEffect(() => {\n    if (isValidAddress(entryAddressToEditOrCreateNew)) {\n      const address = checksumAddress(entryAddressToEditOrCreateNew as string)\n      const oldEntryIndex = addressBook.findIndex((entry) => sameAddress(entry.address, address))\n\n      if (oldEntryIndex >= 0) {\n        // Edit old entry\n        setSelectedEntry({ entry: addressBook[oldEntryIndex], index: oldEntryIndex })\n      } else {\n        // Create new entry\n        setSelectedEntry({\n          entry: {\n            name: '',\n            address,\n            chainId: networkId,\n            isNew: true,\n          },\n        })\n      }\n    }\n  }, [addressBook, entryAddressToEditOrCreateNew, networkId])\n\n  const newEntryModalHandler = (entry: AddressBookEntry) => {\n    // close the modal\n    setEditCreateEntryModalOpen(false)\n    // update the store\n    dispatch(\n      addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address), chainId })),\n    )\n  }\n\n  const editEntryModalHandler = (entry: AddressBookEntry) => {\n    // reset the form\n    setSelectedEntry(initialEntryState)\n    // close the modal\n    setEditCreateEntryModalOpen(false)\n    // update the store\n    dispatch(\n      addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address), chainId })),\n    )\n  }\n\n  const deleteEntryModalHandler = () => {\n    // reset the form\n    setSelectedEntry(initialEntryState)\n    // close the modal\n    setDeleteEntryModalOpen(false)\n    // update the store\n    selectedEntry?.entry && dispatch(addressBookRemove(selectedEntry.entry))\n  }\n\n  const importEntryModalHandler = (addressList: AddressBookEntry[]) => {\n    dispatch(addressBookImport(addressList))\n    setImportEntryModalOpen(false)\n  }\n\n  return (\n    <>\n      <Menu>\n        <Col start=\"sm\" sm={6} xs={12}>\n          <Breadcrumb>\n            <BreadcrumbElement iconType=\"addressBook\" text=\"Address Book\" counter={addressBook?.length.toString()} />\n          </Breadcrumb>\n        </Col>\n        <Col end=\"sm\" sm={6} xs={12}>\n          <ButtonLink\n            onClick={() => {\n              setSelectedEntry(initialEntryState)\n              setExportEntriesModalOpen(true)\n            }}\n            color=\"primary\"\n            iconType=\"exportImg\"\n            iconSize=\"sm\"\n            textSize=\"xl\"\n          >\n            Export\n          </ButtonLink>\n          <ButtonLink\n            onClick={() => {\n              setImportEntryModalOpen(true)\n            }}\n            color=\"primary\"\n            iconType=\"importImg\"\n            iconSize=\"sm\"\n            textSize=\"xl\"\n          >\n            Import\n          </ButtonLink>\n          <ButtonLink\n            onClick={() => {\n              setSelectedEntry(initialEntryState)\n              setEditCreateEntryModalOpen(true)\n            }}\n            color=\"primary\"\n            iconType=\"add\"\n            iconSize=\"sm\"\n            textSize=\"xl\"\n          >\n            Create entry\n          </ButtonLink>\n        </Col>\n      </Menu>\n      <Block className={classes.formContainer}>\n        <TableContainer>\n          <Table\n            columns={columns}\n            data={addressBook}\n            defaultFixed\n            defaultOrderBy={AB_NAME_ID}\n            defaultRowsPerPage={25}\n            disableLoadingOnEmptyTable\n            label=\"Owners\"\n            size={addressBook?.length || 0}\n          >\n            {(sortedData) =>\n              sortedData.map((row, index) => {\n                const userOwner = isUserAnOwnerOfAnySafe(safesList, row.address)\n                const hideBorderBottom = index >= 3 && index === sortedData.size - 1 && classes.noBorderBottom\n                return (\n                  <TableRow\n                    className={cn(classes.hide, hideBorderBottom)}\n                    data-testid={ADDRESS_BOOK_ROW_ID}\n                    key={index}\n                    tabIndex={-1}\n                  >\n                    {autoColumns.map((column) => {\n                      return (\n                        <TableCell align={column.align} component=\"td\" key={column.id} style={cellWidth(column.width)}>\n                          {column.id === AB_ADDRESS_ID ? (\n                            <Block justify=\"left\">\n                              <PrefixedEthHashInfo\n                                hash={row[column.id]}\n                                showCopyBtn\n                                showAvatar\n                                explorerUrl={getExplorerInfo(row[column.id])}\n                              />\n                            </Block>\n                          ) : (\n                            row[column.id]\n                          )}\n                        </TableCell>\n                      )\n                    })}\n                    <TableCell component=\"td\">\n                      <Row align=\"end\" className={classes.actions}>\n                        <ButtonHelper\n                          onClick={() => {\n                            setSelectedEntry({\n                              entry: row,\n                              isOwnerAddress: userOwner,\n                            })\n                            setEditCreateEntryModalOpen(true)\n                          }}\n                        >\n                          <Icon\n                            size=\"sm\"\n                            type=\"edit\"\n                            tooltip=\"Edit entry\"\n                            className={granted ? classes.editEntryButton : classes.editEntryButtonNonOwner}\n                          />\n                        </ButtonHelper>\n                        <ButtonHelper\n                          onClick={() => {\n                            setSelectedEntry({ entry: row })\n                            setDeleteEntryModalOpen(true)\n                          }}\n                        >\n                          <Icon\n                            size=\"sm\"\n                            type=\"delete\"\n                            color=\"error\"\n                            tooltip=\"Delete entry\"\n                            className={granted ? classes.removeEntryButton : classes.removeEntryButtonNonOwner}\n                          />\n                        </ButtonHelper>\n                        {granted ? (\n                          <StyledButton\n                            color=\"primary\"\n                            onClick={() => {\n                              setSelectedEntry({ entry: row })\n                              setSendFundsModalOpen(true)\n                            }}\n                            size=\"md\"\n                            variant=\"contained\"\n                            data-testid={SEND_ENTRY_BUTTON}\n                          >\n                            <FixedIcon type=\"arrowSentWhite\" />\n                            <Text size=\"xl\" color=\"white\">\n                              Send\n                            </Text>\n                          </StyledButton>\n                        ) : null}\n                      </Row>\n                    </TableCell>\n                  </TableRow>\n                )\n              })\n            }\n          </Table>\n        </TableContainer>\n      </Block>\n      <CreateEditEntryModal\n        editEntryModalHandler={editEntryModalHandler}\n        entryToEdit={selectedEntry}\n        isOpen={editCreateEntryModalOpen}\n        newEntryModalHandler={newEntryModalHandler}\n        onClose={() => setEditCreateEntryModalOpen(false)}\n      />\n      <DeleteEntryModal\n        deleteEntryModalHandler={deleteEntryModalHandler}\n        entryToDelete={selectedEntry}\n        isOpen={deleteEntryModalOpen}\n        onClose={() => setDeleteEntryModalOpen(false)}\n      />\n      <ExportEntriesModal isOpen={exportEntriesModalOpen} onClose={() => setExportEntriesModalOpen(false)} />\n      <ImportEntriesModal\n        importEntryModalHandler={importEntryModalHandler}\n        isOpen={importEntryModalOpen}\n        onClose={() => setImportEntryModalOpen(false)}\n      />\n      <SendModal\n        activeScreenType=\"chooseTxType\"\n        isOpen={sendFundsModalOpen}\n        onClose={() => setSendFundsModalOpen(false)}\n        recipientAddress={selectedEntry?.entry?.address}\n        recipientName={selectedEntry?.entry?.name}\n      />\n    </>\n  )\n}\n\nexport default AddressBookTable\n"],"sourceRoot":""}