{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review/index.tsx","routes/safe/components/Transactions/helpers/TxModalWrapper/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts"],"names":["useStyles","makeStyles","styles","ContractInteractionReview","onClose","onPrev","tx","explorerUrl","getExplorerInfo","contractAddress","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCurrency","getNativeCurrency","addressName","useSelector","state","addressBookEntryName","address","useState","txData","txAmount","txRecipient","txInfo","setTxInfo","useEffect","value","toTokenUnit","decimals","data","trim","txValue","txTo","onSubmit","txParameters","delayExecution","createTransaction","to","valueInWei","txNonce","safeNonce","safeTxGas","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","console","error","onBack","subTitle","title","className","formContainer","margin","color","noMargin","size","style","letterSpacing","align","hash","name","showAvatar","showCopyBtn","xs","alt","height","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","layout","justify","symbol","selectedMethod","inputs","map","index","type","key","generateFormFieldKey","signatureHash","getValueFromTxInputs","outerData","Container","styled","div","lg","md","TxModalWrapper","children","operation","txType","submitText","isConfirmDisabled","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","manualSafeNonce","setManualSafeNonce","executionApproved","setExecutionApproved","isSpendingLimitTx","isSpendingLimit","useEstimateTransactionGas","gasCostFormatted","gasPriceFormatted","gasMaxPrioFeeFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isCreation","isOffChainSignature","useEstimationStatus","submitStatus","setSubmitStatus","canTxExecute","useCanTxExecute","undefined","doExecute","oldGasPrice","newGasPrice","ethGasPrice","oldGasLimit","newGasLimit","ethGasLimit","oldMaxPrioFee","newMaxPrioFee","ethMaxPrioFee","oldSafeTxGas","newSafeTxGas","newSafeNonce","newSafeNonceNumber","parseInt","isExecution","closeEditModalCallback","toggleEditMode","onChange","onEdit","isTransactionCreation","isTransactionExecution","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","READY","logError","Errors","_802","onSubmitClick","status","disabled","EstimationStatus","testId","event","img","currentTarget","test","TokenPlaceholder","NO_CONTRACT","ensResolver","createDecorator","field","updates","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","message","formMutators","setMax","args","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","setCallResults","setAbiValue","isAddress","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","handleSubmitError","hasOwnProperty","reason","FORM_ERROR","keyType","extractMethodArgs","JSON","parse","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","methods","isReadMethod","action","replace","String","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","form","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","createStyles","qrCodeBtn","cursor","padding","wordBreak","marginLeft","sm","borderRadius","border","minHeight","overflow","fontSize","fontFamily","maxHeight","fontStretch","lineHeight","buttonRow","justifyContent","gap","dataInput","selectAddress","fullWidth"],"mappings":"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","file":"static/js/58.39237a5f.chunk.js","sourcesContent":["import { useEffect, useState, Fragment } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport {\n  generateFormFieldKey,\n  getValueFromTxInputs,\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\n\nconst useStyles = makeStyles(styles)\n\nexport type TransactionReviewType = {\n  abi?: string\n  contractAddress?: string\n  data?: string\n  value?: string\n  selectedMethod?: AbiItemExtended\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  onEditTxParameters: () => void\n  tx: TransactionReviewType\n  txParameters: TxParameters\n}\n\nconst ContractInteractionReview = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\n  const explorerUrl = getExplorerInfo(tx.contractAddress as string)\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const nativeCurrency = getNativeCurrency()\n  const addressName = useSelector((state) => addressBookEntryName(state, { address: tx.contractAddress as string }))\n\n  const [txInfo, setTxInfo] = useState<{\n    txRecipient: string\n    txData: string\n    txAmount: string\n  }>({ txData: '', txAmount: '', txRecipient: '' })\n\n  useEffect(() => {\n    setTxInfo({\n      txRecipient: tx.contractAddress as string,\n      txAmount: tx.value ? toTokenUnit(tx.value, nativeCurrency.decimals) : '0',\n      txData: tx.data ? tx.data.trim() : '',\n    })\n  }, [tx.contractAddress, tx.value, tx.data, safeAddress, nativeCurrency.decimals])\n\n  const submitTx = (txParameters: TxParameters, delayExecution: boolean) => {\n    if (safeAddress && txInfo) {\n      dispatch(\n        createTransaction({\n          safeAddress,\n          to: txInfo?.txRecipient,\n          valueInWei: txInfo?.txAmount,\n          txData: txInfo?.txData,\n          txNonce: txParameters.safeNonce,\n          safeTxGas: txParameters.safeTxGas,\n          ethParameters: txParameters,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n          delayExecution,\n        }),\n      )\n    } else {\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n    }\n    onClose()\n  }\n\n  return (\n    <TxModalWrapper\n      txData={txInfo?.txData}\n      txValue={txInfo?.txAmount}\n      txTo={txInfo?.txRecipient}\n      onSubmit={submitTx}\n      onBack={onPrev}\n    >\n      <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Contract interaction\" />\n      <Hairline />\n      <Block className={classes.formContainer}>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Contract Address\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <PrefixedEthHashInfo\n            hash={tx.contractAddress as string}\n            name={addressName}\n            showAvatar\n            showCopyBtn\n            explorerUrl={explorerUrl}\n          />\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Value\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Col xs={1}>\n            <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri || ''} />\n          </Col>\n          <Col layout=\"column\" xs={11}>\n            <Block justify=\"left\">\n              <Paragraph className={classes.value} noMargin size=\"md\" style={{ margin: 0 }}>\n                {tx.value || 0}\n                {' ' + nativeCurrency.symbol}\n              </Paragraph>\n            </Block>\n          </Col>\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Method\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Paragraph className={classes.value} size=\"md\" style={{ margin: 0 }}>\n            {tx.selectedMethod?.name}\n          </Paragraph>\n        </Row>\n        {tx.selectedMethod?.inputs?.map(({ name, type }, index) => {\n          const key = generateFormFieldKey(type, tx.selectedMethod?.signatureHash || '', index)\n          const value: string = getValueFromTxInputs(key, type, tx)\n\n          return (\n            <Fragment key={key}>\n              <Row margin=\"xs\">\n                <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                  {name} ({type})\n                </Paragraph>\n              </Row>\n              <Row align=\"center\" margin=\"md\">\n                <Paragraph className={classes.value} noMargin size=\"md\" style={{ margin: 0 }}>\n                  {value}\n                </Paragraph>\n              </Row>\n            </Fragment>\n          )\n        })}\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Data (hex encoded)\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Col className={classes.outerData}>\n            <Row className={classes.data} size=\"md\">\n              {tx.data}\n            </Row>\n          </Col>\n        </Row>\n      </Block>\n    </TxModalWrapper>\n  )\n}\n\nexport default ContractInteractionReview\n","import { ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\n\ntype Props = {\n  children: ReactNode\n  operation?: number\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  onSubmit: (txParams: TxParameters, delayExecution?: boolean) => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isConfirmDisabled?: boolean\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\nexport const TxModalWrapper = ({\n  children,\n  operation,\n  txData,\n  txValue = '0',\n  txTo,\n  txType,\n  onSubmit,\n  onBack,\n  submitText,\n  isConfirmDisabled,\n}: Props): React.ReactElement => {\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [manualSafeNonce, setManualSafeNonce] = useState<number | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const safeAddress = extractSafeAddress()\n  const isSpendingLimitTx = isSpendingLimit(txType)\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasMaxPrioFeeFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData,\n    txRecipient: txTo || safeAddress,\n    txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    operation,\n  })\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const canTxExecute = useCanTxExecute(undefined, manualSafeNonce)\n  const doExecute = executionApproved && canTxExecute\n\n  const onClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n    const newSafeNonce = txParameters.safeNonce\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n\n    if (newSafeNonce) {\n      const newSafeNonceNumber = parseInt(newSafeNonce, 10)\n      setManualSafeNonce(newSafeNonceNumber)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters, !doExecute)\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={onClose}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => unknown) => (\n        <>\n          {children}\n\n          <Container>\n            {!isSpendingLimitTx && canTxExecute && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimitTx && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Container>\n\n          {!isSpendingLimitTx && (\n            <ReviewInfoText\n              gasCostFormatted={gasCostFormatted}\n              isCreation={isCreation}\n              isExecution={doExecute}\n              safeNonce={txParameters.safeNonce}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimitTx && submitStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isConfirmDisabled,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\nimport createDecorator from 'final-form-calculate'\nimport { ContractSendMethod } from 'web3-eth-contract'\n\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\nimport { BigNumber } from 'bignumber.js'\n\nexport const NO_CONTRACT = 'no contract'\n\nexport const ensResolver = createDecorator({\n  field: 'contractAddress',\n  updates: {\n    contractAddress: async (contractAddress) => {\n      try {\n        const resolvedAddress =\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\n          (await getAddressFromDomain(contractAddress))\n\n        if (resolvedAddress) {\n          return resolvedAddress\n        }\n\n        return contractAddress\n      } catch (e) {\n        console.error(e.message)\n        return contractAddress\n      }\n    },\n  },\n})\n\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'value', () => args[0])\n  },\n  setContractAddress: (args, state, utils) => {\n    utils.changeValue(state, 'contractAddress', () => args[0])\n  },\n  setSelectedMethod: (args, state, utils) => {\n    const modified =\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\n\n    if (modified) {\n      utils.changeValue(state, 'callResults', () => '')\n      utils.changeValue(state, 'value', () => '')\n    }\n\n    utils.changeValue(state, 'selectedMethod', () => args[0])\n  },\n  setCallResults: (args, state, utils) => {\n    utils.changeValue(state, 'callResults', () => args[0])\n  },\n  setAbiValue: (args, state, utils) => {\n    utils.changeValue(state, 'abi', () => args[0])\n  },\n}\n\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\n\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\n  try {\n    const arrayResult = JSON.parse(parameter)\n    return arrayResult.map((value) => {\n      if (Number.isInteger(value)) {\n        return new BigNumber(value).toString()\n      }\n      return value\n    })\n  } catch (err) {\n    return null\n  }\n}\n\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\n  for (const key in values) {\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\n      return { [key]: error.reason }\n    }\n  }\n\n  // .call() failed and we're logging a generic error\n  return { [FORM_ERROR]: error ? error.message : undefined }\n}\n\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\n  return `methodInput-${signatureHash}_${index}_${keyType}`\n}\n\nconst extractMethodArgs =\n  (signatureHash: string, values: Record<string, string>) =>\n  ({ type }, index) => {\n    const key = generateFormFieldKey(type, signatureHash, index)\n\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\n  }\n\nexport const createTxObject = (\n  method: AbiItemExtended,\n  contractAddress: string,\n  values: Record<string, string>,\n): ContractSendMethod => {\n  const web3 = getWeb3()\n  const contract = new web3.eth.Contract([method], contractAddress)\n  const { inputs, name = '', signatureHash } = method\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\n\n  return contract.methods[name](...args)\n}\n\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\n\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\n  if (isArrayParameter(type)) {\n    key = key.replace('[]', '')\n  }\n\n  let value = tx[key]\n\n  if (type === 'bool') {\n    value = String(value)\n  }\n\n  return value\n}\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import { lg, md, sm, border } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    wordBreak: 'break-word',\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    borderRadius: '5px',\n    border: `1px solid ${border}`,\n    padding: '11px',\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '14px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n  fullWidth: {\n    justifyContent: 'space-between',\n  },\n})\n"],"sourceRoot":""}