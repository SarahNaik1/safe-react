{"version":3,"sources":["components/AppLayout/Sidebar/DevTools/index.tsx"],"names":["TX_AMOUNT","prepareTx","address","a","newTxBtn","screen","getByText","fireEvent","click","findByText","sendBtn","findByTestId","recipientInput","change","target","value","tokenInput","ZERO_ADDRESS","findByPlaceholderText","amountInput","reviewBtn","estimatingBtn","waitForElementToBeRemoved","timeout","submitTx","submitBtn","stopExecution","executionCheckbox","createQueuedTx","threshold","createExecutedTx","DevTools","useSelector","currentSafe","owners","safeAddress","extractSafeAddress","nextTx","nextTransaction","isGranted","grantedSelector","ethBalance","currentSafeEthBalance","hasSufficientFunds","hasFunds","parseFloat","err","dense","primary","secondary","length","ButtonWrapper","StyledButton","onClick","size","variant","disabled","styled","Button","div"],"mappings":"iRAeMA,EAAY,SAEZC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACVC,EAAWC,IAAOC,UAAU,mBAClCC,IAAUC,MAAMJ,GAFA,SAIMC,IAAOI,WAAW,cAJxB,cAIVC,EAJU,OAKhBH,IAAUC,MAAME,GALA,SAOaL,IAAOM,aAAa,sBAPjC,cAOVC,EAPU,OAQhBL,IAAUM,OAAOD,EAAgB,CAAEE,OAAQ,CAAEC,MAAOb,KARpC,UAUSG,IAAOM,aAAa,eAV7B,eAUVK,EAVU,OAWhBT,IAAUM,OAAOG,EAAY,CAAEF,OAAQ,CAAEC,MAAOE,OAXhC,UAaUZ,IAAOa,sBAAsB,WAbvC,eAaVC,EAbU,OAchBZ,IAAUM,OAAOM,EAAa,CAAEL,OAAQ,CAAEC,MAAOf,KAdjC,UAgBQK,IAAOI,WAAW,UAhB1B,eAgBVW,EAhBU,OAiBhBb,IAAUC,MAAMY,GAjBA,UAmBYf,IAAOI,WAAW,cAnB9B,eAmBVY,EAnBU,iBAoBVC,YAA0BD,EAAe,CAAEE,QAAS,MApB1C,4CAAH,sDAuBTC,EAAQ,uCAAG,4BAAArB,EAAA,sEACSE,IAAOI,WAAW,UAD3B,OACTgB,EADS,OAEflB,IAAUC,MAAMiB,GAFD,2CAAH,qDAKRC,EAAa,uCAAG,4BAAAvB,EAAA,sEACYE,IAAOM,aAAa,oBADhC,OACdgB,EADc,OAEpBpB,IAAUC,MAAMmB,GAFI,2CAAH,qDAKbC,EAAc,uCAAG,WAAO1B,GAAP,2BAAAC,EAAA,6DAAwB0B,EAAxB,+BAAoC,EAApC,SACf5B,EAAUC,GADK,UAEH,IAAd2B,EAFiB,gCAGbH,IAHa,uBAKfF,IALe,2CAAH,sDAQdM,EAAgB,uCAAG,WAAO5B,GAAP,SAAAC,EAAA,sEACjBF,EAAUC,GADO,uBAEjBsB,IAFiB,2CAAH,sDA8DPO,UArDE,WAAqB,IAAD,EACnC,YAAkCC,YAAYC,YAA9C,QAA8D,GAAtDC,EAAR,EAAQA,OAAR,IAAgBL,iBAAhB,MAA4B,EAA5B,EACMM,EAAcC,cACdC,EAASL,YAAYM,KACrBC,EAAYP,YAAYQ,KACxBC,EAAaT,YAAYU,KAEzBC,EAAqB,WACzB,IAAIC,GAAW,EACf,IACEA,EAAWC,WAAWJ,GAAcI,WAAW7C,GAC/C,MAAO8C,IACT,OAAOF,GAGT,OACE,qCACE,cAAC,IAAD,CAAMG,OAAK,EAAX,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcC,QAAQ,kBAAkBC,UAAS,qBAAgBpB,EAAhB,eAAqC,OAANK,QAAM,IAANA,OAAA,EAAAA,EAAQgB,SAAU,SAYtG,eAACC,EAAD,WACE,cAACC,EAAD,CACEC,QAAS,kBAAMzB,EAAeO,EAAaN,IAC3CyB,KAAK,KACLC,QAAQ,WACRC,UAAWjB,IAAcI,IAJ3B,mBAQA,cAACS,EAAD,CACEC,QAAS,kBAAMvB,EAAiBK,IAChCmB,KAAK,KACLC,QAAQ,WACRC,UAAWjB,IAAcI,MAAyBN,GAAUR,EAAY,EAJ1E,4BAeR,IAAMuB,EAAeK,kBAAOC,SAAPD,CAAH,wLAWZN,EAAgBM,UAAOE,IAAV","file":"static/js/11.071632f0.chunk.js","sourcesContent":["import { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { fireEvent, screen, waitForElementToBeRemoved } from '@testing-library/react'\nimport { Button } from '@gnosis.pm/safe-react-components'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nimport { currentSafe, currentSafeEthBalance } from 'src/logic/safe/store/selectors'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { nextTransaction } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\n\nconst TX_AMOUNT = '0.0001'\n\nconst prepareTx = async (address: string): Promise<void> => {\n  const newTxBtn = screen.getByText('New transaction')\n  fireEvent.click(newTxBtn)\n\n  const sendBtn = await screen.findByText('Send funds')\n  fireEvent.click(sendBtn)\n\n  const recipientInput = await screen.findByTestId('address-book-input')\n  fireEvent.change(recipientInput, { target: { value: address } })\n\n  const tokenInput = await screen.findByTestId('token-input')\n  fireEvent.change(tokenInput, { target: { value: ZERO_ADDRESS } })\n\n  const amountInput = await screen.findByPlaceholderText('Amount*')\n  fireEvent.change(amountInput, { target: { value: TX_AMOUNT } })\n\n  const reviewBtn = await screen.findByText('Review')\n  fireEvent.click(reviewBtn)\n\n  const estimatingBtn = await screen.findByText('Estimating')\n  await waitForElementToBeRemoved(estimatingBtn, { timeout: 10000 })\n}\n\nconst submitTx = async (): Promise<void> => {\n  const submitBtn = await screen.findByText('Submit')\n  fireEvent.click(submitBtn)\n}\n\nconst stopExecution = async (): Promise<void> => {\n  const executionCheckbox = await screen.findByTestId('execute-checkbox')\n  fireEvent.click(executionCheckbox)\n}\n\nconst createQueuedTx = async (address: string, threshold = 1): Promise<void> => {\n  await prepareTx(address)\n  if (threshold === 1) {\n    await stopExecution()\n  }\n  await submitTx()\n}\n\nconst createExecutedTx = async (address: string): Promise<void> => {\n  await prepareTx(address)\n  await submitTx()\n}\n\n// const getStatusUrl = (address: string): string => {\n//   return `https://rimeissner.dev/safe-status-check/#/${getShortName()}:${address}`\n// }\n\nconst DevTools = (): ReactElement => {\n  const { owners, threshold = 1 } = useSelector(currentSafe) ?? {}\n  const safeAddress = extractSafeAddress()\n  const nextTx = useSelector(nextTransaction)\n  const isGranted = useSelector(grantedSelector)\n  const ethBalance = useSelector(currentSafeEthBalance)\n\n  const hasSufficientFunds = (): boolean => {\n    let hasFunds = false\n    try {\n      hasFunds = parseFloat(ethBalance) > parseFloat(TX_AMOUNT)\n    } catch (err) {}\n    return hasFunds\n  }\n\n  return (\n    <>\n      <List dense>\n        <ListItem>\n          <ListItemText primary=\"Developer Tools\" secondary={`Threshold: ${threshold} / ${owners?.length || 0}`} />\n        </ListItem>\n        {/* <ListItem button>\n          <ListItemText onClick={() => history.push(TRANSACTIONS_QUEUE)}>Queue</ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemText onClick={() => history.push(TRANSACTIONS_HISTORY)}>History</ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemText onClick={() => window.open(getStatusUrl(safeAddress), '_blank')}>Safe Status</ListItemText>\n        </ListItem> */}\n      </List>\n      <ButtonWrapper>\n        <StyledButton\n          onClick={() => createQueuedTx(safeAddress, threshold)}\n          size=\"md\"\n          variant=\"bordered\"\n          disabled={!isGranted || !hasSufficientFunds()}\n        >\n          Queue\n        </StyledButton>\n        <StyledButton\n          onClick={() => createExecutedTx(safeAddress)}\n          size=\"md\"\n          variant=\"bordered\"\n          disabled={!isGranted || !hasSufficientFunds() || !nextTx || threshold > 1}\n        >\n          Execute\n        </StyledButton>\n      </ButtonWrapper>\n    </>\n  )\n}\n\nexport default DevTools\n\nconst StyledButton = styled(Button)`\n  &.MuiButton-root {\n    padding: 0 12px !important;\n    min-width: 45% !important;\n  }\n\n  & .MuiButton-label {\n    font-size: 14px !important;\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 12px;\n`\n"],"sourceRoot":""}