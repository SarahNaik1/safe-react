{"version":3,"sources":["logic/collectibles/utils/index.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/index.tsx","routes/safe/components/Transactions/helpers/TxModalWrapper/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","logic/collectibles/store/selectors/index.ts","logic/tokens/store/actions/fetchTokens.ts"],"names":["CK_ADDRESS","CHAIN_ID","ETHEREUM","RINKEBY","SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH","generateERC721TransferTxData","tx","safeAddress","a","Error","contractAddress","assetAddress","methodToCall","sameAddress","_getChainId","transferParams","recipientAddress","nftTokenId","includes","NFTTokenInstance","getERC721TokenContract","getERC20TokenContract","methods","encodeABI","styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewCollectible","onClose","onPrev","classes","shortener","textShortener","dispatch","useDispatch","extractSafeAddress","txToken","useSelector","nftTokensSelector","find","tokenId","useState","txData","setTxData","useEffect","isCurrent","calculateERC721TransferData","encodedAbiTxData","console","error","message","TxModalWrapper","txTo","onSubmit","txParameters","delayExecution","createTransaction","to","valueInWei","txNonce","safeNonce","safeTxGas","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","onBack","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","letterSpacing","align","Col","xs","PrefixedEthHashInfo","hash","name","recipientName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","charsStart","charsEnd","assetName","Img","alt","onError","setImageToPlaceholder","src","image","toString","Container","styled","div","children","operation","txValue","txType","submitText","isConfirmDisabled","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","manualSafeNonce","setManualSafeNonce","executionApproved","setExecutionApproved","isSpendingLimitTx","isSpendingLimit","useEstimateTransactionGas","txRecipient","txAmount","gasCostFormatted","gasPriceFormatted","gasMaxPrioFeeFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isCreation","isOffChainSignature","useEstimationStatus","submitStatus","setSubmitStatus","canTxExecute","useCanTxExecute","undefined","doExecute","oldGasPrice","newGasPrice","ethGasPrice","oldGasLimit","newGasLimit","ethGasLimit","oldMaxPrioFee","newMaxPrioFee","ethMaxPrioFee","oldSafeTxGas","newSafeTxGas","newSafeNonce","newSafeNonceNumber","parseInt","isExecution","closeEditModalCallback","toggleEditMode","onChange","onEdit","isTransactionCreation","isTransactionExecution","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","READY","logError","Errors","_802","onSubmitClick","status","disabled","EstimationStatus","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","React","Wrapper","StyledDivider","DividerSRC","type","StyledBlock","border","currentSafeWithNames","address","ethBalance","safeName","nativeCurrency","getNativeCurrency","symbol","nftAssets","state","NFT_ASSETS_REDUCER_ID","nftAssetsSelector","createSelector","assets","NFT_TOKENS_REDUCER_ID","tokens","nftAssetsToListSelector","Object","values","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","map","nftToken","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","filter","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","ERC721Contract"],"mappings":"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","file":"static/js/49.5c330ce4.chunk.js","sourcesContent":["import { _getChainId } from 'src/config'\nimport { CHAIN_ID } from 'src/config/chain.d'\nimport { getERC721TokenContract, getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { CollectibleTx } from 'src/routes/safe/components/Balances/SendModal/screens/ReviewCollectible'\n\n// CryptoKitties Contract Addresses by network\n// This is an exception made for a popular NFT that's not ERC721 standard-compatible,\n//  so we can allow the user to transfer the assets by using `transferFrom` instead of\n//  the standard `safeTransferFrom` method.\nexport const CK_ADDRESS = {\n  [CHAIN_ID.ETHEREUM]: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n  [CHAIN_ID.RINKEBY]: '0x16baf0de678e52367adc69fd067e5edd1d33e3bf',\n}\n\n// safeTransferFrom(address,address,uint256)\nexport const SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH = '42842e0e'\n\n/**\n * Returns a method identifier based on the asset specified and the current network\n * @param {string} contractAddress\n * @returns string\n */\nexport const getTransferMethodByContractAddress = (contractAddress: string): string => {\n  if (sameAddress(contractAddress, CK_ADDRESS[_getChainId()])) {\n    // on mainnet `transferFrom` seems to work fine but we can assure that `transfer` will work on both networks\n    // so that's the reason why we're falling back to `transfer` for CryptoKitties\n    return 'transfer'\n  }\n\n  return `0x${SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH}`\n}\n\n/**\n * Builds the encodedABI data for the transfer of an NFT token\n * @param {CollectibleTx} tx\n * @param {string} safeAddress\n * @returns Promise<string>\n */\nexport const generateERC721TransferTxData = async (\n  tx: CollectibleTx,\n  safeAddress: string | undefined,\n): Promise<string> => {\n  if (!safeAddress) {\n    throw new Error('Failed to build NFT transfer tx data. SafeAddress is not defined.')\n  }\n\n  const methodToCall = getTransferMethodByContractAddress(tx.assetAddress)\n  let transferParams = [tx.recipientAddress, tx.nftTokenId]\n  let NFTTokenInstance\n\n  if (methodToCall.includes(SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH)) {\n    // we add the `from` param for the `safeTransferFrom` method call\n    transferParams = [safeAddress, ...transferParams]\n    NFTTokenInstance = getERC721TokenContract(tx.assetAddress)\n  } else {\n    // we fallback to an ERC20 Token contract whose ABI implements the `transfer` method\n    NFTTokenInstance = getERC20TokenContract(tx.assetAddress)\n  }\n\n  return NFTTokenInstance.methods[methodToCall](...transferParams).encodeABI()\n}\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { getExplorerInfo } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { nftTokensSelector } from 'src/logic/collectibles/store/selectors'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { generateERC721TransferTxData } from 'src/logic/collectibles/utils'\n\nimport { styles } from './style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\n\nconst useStyles = makeStyles(styles)\n\nexport type CollectibleTx = {\n  recipientAddress: string\n  recipientName?: string\n  assetAddress: string\n  assetName: string\n  nftTokenId: string\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  tx: CollectibleTx\n}\n\nconst ReviewCollectible = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const shortener = textShortener()\n  const dispatch = useDispatch()\n  const safeAddress = extractSafeAddress()\n  const nftTokens = useSelector(nftTokensSelector)\n\n  const txToken = nftTokens.find(\n    ({ assetAddress, tokenId }) => assetAddress === tx.assetAddress && tokenId === tx.nftTokenId,\n  )\n  const [txData, setTxData] = useState('')\n\n  useEffect(() => {\n    let isCurrent = true\n\n    const calculateERC721TransferData = async () => {\n      try {\n        const encodedAbiTxData = await generateERC721TransferTxData(tx, safeAddress)\n        if (isCurrent) {\n          setTxData(encodedAbiTxData)\n        }\n      } catch (error) {\n        console.error('Error calculating ERC721 transfer data:', error.message)\n      }\n    }\n    calculateERC721TransferData()\n\n    return () => {\n      isCurrent = false\n    }\n  }, [safeAddress, tx])\n\n  const submitTx = (txParameters: TxParameters, delayExecution: boolean) => {\n    try {\n      if (safeAddress) {\n        dispatch(\n          createTransaction({\n            safeAddress,\n            to: tx.assetAddress,\n            valueInWei: '0',\n            txData,\n            txNonce: txParameters.safeNonce,\n            safeTxGas: txParameters.safeTxGas,\n            ethParameters: txParameters,\n            notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n            delayExecution,\n          }),\n        )\n      } else {\n        console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n      }\n    } catch (error) {\n      console.error('Error creating sendCollectible Tx:', error)\n    } finally {\n      onClose()\n    }\n  }\n\n  return (\n    <TxModalWrapper txData={txData} txTo={tx.assetAddress} onSubmit={submitTx} onBack={onPrev}>\n      <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Send collectible\" />\n      <Hairline />\n      <Block className={classes.container}>\n        <SafeInfo />\n        <Divider withArrow />\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            Recipient\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Col xs={12}>\n            <PrefixedEthHashInfo\n              hash={tx.recipientAddress}\n              name={tx.recipientName}\n              showAvatar\n              showCopyBtn\n              explorerUrl={getExplorerInfo(tx.recipientAddress)}\n            />\n          </Col>\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n            {textShortener({ charsStart: 40, charsEnd: 0 })(tx.assetName)}\n          </Paragraph>\n        </Row>\n        {txToken && (\n          <Row align=\"center\" margin=\"md\">\n            <Img alt={txToken.name} height={28} onError={setImageToPlaceholder} src={txToken.image} />\n            <Paragraph className={classes.amount} noMargin size=\"md\">\n              {shortener(txToken.name)} (Token ID: {shortener(txToken.tokenId.toString())})\n            </Paragraph>\n          </Row>\n        )}\n      </Block>\n    </TxModalWrapper>\n  )\n}\n\nexport default ReviewCollectible\n","import { ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\n\ntype Props = {\n  children: ReactNode\n  operation?: number\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  onSubmit: (txParams: TxParameters, delayExecution?: boolean) => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isConfirmDisabled?: boolean\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\nexport const TxModalWrapper = ({\n  children,\n  operation,\n  txData,\n  txValue = '0',\n  txTo,\n  txType,\n  onSubmit,\n  onBack,\n  submitText,\n  isConfirmDisabled,\n}: Props): React.ReactElement => {\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [manualSafeNonce, setManualSafeNonce] = useState<number | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const safeAddress = extractSafeAddress()\n  const isSpendingLimitTx = isSpendingLimit(txType)\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasMaxPrioFeeFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData,\n    txRecipient: txTo || safeAddress,\n    txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    operation,\n  })\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const canTxExecute = useCanTxExecute(undefined, manualSafeNonce)\n  const doExecute = executionApproved && canTxExecute\n\n  const onClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n    const newSafeNonce = txParameters.safeNonce\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n\n    if (newSafeNonce) {\n      const newSafeNonceNumber = parseInt(newSafeNonce, 10)\n      setManualSafeNonce(newSafeNonceNumber)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters, !doExecute)\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={onClose}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => unknown) => (\n        <>\n          {children}\n\n          <Container>\n            {!isSpendingLimitTx && canTxExecute && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimitTx && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Container>\n\n          {!isSpendingLimitTx && (\n            <ReviewInfoText\n              gasCostFormatted={gasCostFormatted}\n              isCreation={isCreation}\n              isExecution={doExecute}\n              safeNonce={txParameters.safeNonce}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimitTx && submitStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isConfirmDisabled,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render(): React.ReactElement {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createSelector } from 'reselect'\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\n\nimport { AppReduxState } from 'src/store'\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\n\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\n\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\n\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\n  return assets ? Object.values(assets) : []\n})\n\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\n  const uniqueAddresses = new Set(addresses)\n  return Array.from(uniqueAddresses)\n})\n\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\n)\n\nexport const nftAssetsFromNftTokensSelector = createSelector(\n  nftAssetsToListSelector,\n  nftAssetsAddressFromNftTokensSelector,\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\n    return nftAssets\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\n  },\n)\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = createERC20TokenContract\n\nexport const getERC721TokenContract = createERC721TokenContract\n"],"sourceRoot":""}