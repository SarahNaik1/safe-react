{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","marginRight","marginLeft","manage","fontSize","closeIcon","height","width","qrCodeBtn","cursor","formContainer","buttonRow","gap","dataInput","lineHeight","border","selectAddress","useStyles","makeStyles","SendCustomTx","initialValues","isABI","onClose","onNext","switchMethod","classes","nativeCurrency","getNativeCurrency","ethBalance","useSelector","currentSafeEthBalance","saveForm","values","a","handleSubmit","contractAddress","data","value","submit","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","decorators","ensResolver","formMutators","onSubmit","subscription","submitting","pristine","validating","rest","mutators","Block","SafeInfo","Divider","withArrow","EthAddressInput","name","onScannedValue","setContractAddress","text","margin","Col","between","size","style","ButtonLink","setMax","Field","component","TextField","inputAdornment","endAdornment","InputAdornment","position","symbol","placeholder","type","validate","composeValidators","mustBeFloat","maxValue","minValue","TextAreaField","mustBeHexData","Switch","checked","onChange","Buttons"],"mappings":"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","file":"static/js/99.55f08de2.chunk.js","sourcesContent":["import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: '#a2a8ba',\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  manage: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Switch from '@material-ui/core/Switch'\nimport Close from '@material-ui/icons/Close'\n\nimport Divider from 'src/components/Divider'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TextAreaField } from 'src/components/forms/TextAreaField'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, maxValue, minValue, mustBeFloat, mustBeHexData } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { currentSafeEthBalance } from 'src/logic/safe/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\n\nimport { styles } from './style'\nimport { getNativeCurrency } from 'src/config'\nimport { EthAddressInput } from '../EthAddressInput'\nimport { ensResolver, formMutators } from '../utils'\nimport Buttons from '../Buttons'\n\nexport interface CreatedTx {\n  contractAddress: string\n  data: string\n  value: string | number\n}\n\nexport type CustomTxProps = {\n  contractAddress?: string\n}\n\ntype Props = {\n  initialValues: CustomTxProps\n  onClose: () => void\n  onNext: (tx: CreatedTx, submit: boolean) => void\n  isABI: boolean\n  switchMethod: () => void\n}\n\nconst useStyles = makeStyles(styles)\n\nconst SendCustomTx = ({ initialValues, isABI, onClose, onNext, switchMethod }: Props): ReactElement => {\n  const classes = useStyles()\n  const nativeCurrency = getNativeCurrency()\n  const ethBalance = useSelector(currentSafeEthBalance)\n\n  const saveForm = async (values) => {\n    await handleSubmit(values, false)\n    switchMethod()\n  }\n\n  const handleSubmit = ({ contractAddress, data, value, ...values }, submit = true) => {\n    if (data || value) {\n      onNext({ ...values, contractAddress, data, value }, submit)\n    }\n  }\n\n  return (\n    <>\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\n          Contract interaction\n        </Paragraph>\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <GnoForm\n        decorators={[ensResolver]}\n        formMutators={formMutators}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        subscription={{ submitting: true, pristine: true, values: true }}\n      >\n        {(submitting, validating, rest, mutators) => {\n          const handleClickSendMax = () => mutators.setMax(ethBalance)\n          const handleToggleAbi = () => saveForm(rest.values)\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                <EthAddressInput\n                  name=\"contractAddress\"\n                  onScannedValue={mutators.setContractAddress}\n                  text=\"Contract address*\"\n                />\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Value\n                    </Paragraph>\n                    <ButtonLink onClick={handleClickSendMax} weight=\"bold\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: <InputAdornment position=\"end\">{nativeCurrency.symbol}</InputAdornment>,\n                      }}\n                      name=\"value\"\n                      placeholder=\"Value*\"\n                      text=\"Value*\"\n                      type=\"text\"\n                      validate={composeValidators(mustBeFloat, maxValue(ethBalance || '0'), minValue(0))}\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"sm\">\n                  <Col>\n                    <TextAreaField\n                      name=\"data\"\n                      placeholder=\"Data (hex encoded)*\"\n                      text=\"Data (hex encoded)*\"\n                      type=\"text\"\n                      validate={mustBeHexData}\n                    />\n                  </Col>\n                </Row>\n                <Paragraph color=\"disabled\" noMargin size=\"lg\" style={{ letterSpacing: '-0.5px' }}>\n                  <Switch checked={!isABI} onChange={handleToggleAbi} />\n                  Use custom data (hex encoded)\n                </Paragraph>\n              </Block>\n              <Buttons onClose={onClose} />\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCustomTx\n"],"sourceRoot":""}