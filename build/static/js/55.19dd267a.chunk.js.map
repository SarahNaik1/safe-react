{"version":3,"sources":["routes/safe/components/Transactions/helpers/TxModalWrapper/index.tsx","components/layout/Bold/index.tsx","components/forms/SelectField/index.tsx","components/layout/Heading/index.tsx","components/layout/Heading/index.module.scss","routes/safe/components/Settings/ThresholdSettings/ChangeThreshold/style.ts","routes/safe/components/Settings/ThresholdSettings/ChangeThreshold/index.tsx","routes/safe/components/Settings/ThresholdSettings/style.ts","routes/safe/components/Settings/ThresholdSettings/index.tsx"],"names":["Container","styled","div","lg","md","TxModalWrapper","children","operation","txData","txValue","txTo","txType","onSubmit","onBack","submitText","isConfirmDisabled","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","manualSafeNonce","setManualSafeNonce","executionApproved","setExecutionApproved","safeAddress","extractSafeAddress","isSpendingLimitTx","isSpendingLimit","useEstimateTransactionGas","txRecipient","txAmount","safeTxGas","gasCostFormatted","gasPriceFormatted","gasMaxPrioFeeFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isCreation","isOffChainSignature","useEstimationStatus","submitStatus","setSubmitStatus","canTxExecute","useCanTxExecute","undefined","doExecute","onClose","txParameters","oldGasPrice","newGasPrice","ethGasPrice","oldGasLimit","newGasLimit","ethGasLimit","oldMaxPrioFee","newMaxPrioFee","ethMaxPrioFee","oldSafeTxGas","newSafeTxGas","newSafeNonce","safeNonce","newSafeNonceNumber","parseInt","isExecution","closeEditModalCallback","toggleEditMode","onChange","onEdit","isTransactionCreation","isTransactionExecution","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","READY","logError","Errors","_802","onSubmitClick","status","disabled","EstimationStatus","testId","Bold","this","props","React","style","minWidth","SelectInput","classes","disableError","formControlProps","input","name","value","restInput","label","meta","renderValue","rest","showError","submitError","dirtySinceLastSubmit","error","touched","inputProps","htmlFor","cx","classNames","bind","styles","Heading","align","className","color","margin","tag","truncate","capitalize","module","exports","useStyles","makeStyles","createStyles","modalContent","padding","ownersText","marginLeft","sm","inputRow","position","ChangeThresholdModal","ownersCount","threshold","dispatch","useDispatch","safeVersion","useSelector","currentSafeCurrentVersion","data","setData","editedThreshold","setEditedThreshold","disabledSubmitForm","setDisabledSubmitForm","useEffect","isCurrent","getGnosisSafeInstanceAt","methods","changeThreshold","encodeABI","calculateChangeThresholdData","handleThreshold","target","handleSubmit","delayExecution","createTransaction","to","valueInWei","txNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","SETTINGS_CHANGE_TX","ModalHeader","title","Hairline","GnoForm","initialValues","toString","Block","Row","Paragraph","weight","Col","xs","Field","render","SelectField","Array","Number","map","x","index","MenuItem","validate","composeValidators","required","mustBeInteger","minValue","differentFrom","noMargin","size","secondaryText","fontColor","container","buttonRow","left","bottom","boxSizing","width","justifyContent","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","ThresholdSettings","isModalOpen","setModalOpen","currentSafe","address","owners","granted","grantedSelector","toggleModal","prevOpen","trackEvent","useAnalytics","SETTINGS_EVENTS","OWNERS","length","Button","variant","Modal","description","handleClose","open"],"mappings":"iTA8BMA,EAAYC,UAAOC,IAAV,kDACAC,KAAMC,MAGRC,EAAiB,SAAC,GAWG,IAVhCC,EAU+B,EAV/BA,SACAC,EAS+B,EAT/BA,UACAC,EAQ+B,EAR/BA,OAQ+B,IAP/BC,eAO+B,MAPrB,IAOqB,EAN/BC,EAM+B,EAN/BA,KACAC,EAK+B,EAL/BA,OACAC,EAI+B,EAJ/BA,SACAC,EAG+B,EAH/BA,OACAC,EAE+B,EAF/BA,WACAC,EAC+B,EAD/BA,kBAEA,EAA8CC,mBAAS,KAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,qBAA5C,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAgDJ,qBAAhD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAA4CN,qBAA5C,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAA8CR,qBAA9C,mBAAOS,EAAP,KAAwBC,EAAxB,KACA,EAAkDV,oBAAkB,GAApE,mBAAOW,EAAP,KAA0BC,EAA1B,KACMC,EAAcC,cACdC,EAAoBC,YAAgBrB,GAE1C,EASIsB,YAA0B,CAC5BzB,SACA0B,YAAaxB,GAAQmB,EACrBlB,SACAwB,SAAU1B,EACV2B,UAAWnB,EACXE,iBACAE,mBACAE,iBACAE,kBACAlB,cAlBA8B,GADF,EACEA,iBACAC,GAFF,EAEEA,kBACAC,GAHF,EAGEA,uBACAC,GAJF,EAIEA,SACAC,GALF,EAKEA,cACAC,GANF,EAMEA,4BACAC,GAPF,EAOEA,WACAC,GARF,EAQEA,oBAcF,GAAwCC,YAAoBH,IAA5D,qBAAOI,GAAP,MAAqBC,GAArB,MAEMC,GAAeC,iBAAgBC,EAAWzB,GAC1C0B,GAAYxB,GAAqBqB,GAEjCI,GAAU,SAACC,GACf,IAAMC,EAAchB,GACdiB,EAAcF,EAAaG,YAC3BC,EAAcjB,GACdkB,EAAcL,EAAaM,YAC3BC,EAAgBrB,GAChBsB,EAAgBR,EAAaS,cAC7BC,EAAetB,GACfuB,EAAeX,EAAajB,UAC5B6B,EAAeZ,EAAaa,UAkBlC,GAhBIZ,IAAgBC,GAClBnC,EAAkBmC,GAGhBK,IAAkBC,GACpBvC,EAAoBuC,GAGlBJ,IAAgBC,GAClBlC,EAAkBkC,GAGhBM,GAAgBD,IAAiBC,GACnC9C,EAAmB8C,GAGjBC,EAAc,CAChB,IAAME,EAAqBC,SAASH,EAAc,IAClDvC,EAAmByC,KAgBvB,OACE,cAAC,IAAD,CACEvB,oBAAqBA,GACrByB,YAAalB,GACbQ,YAAanB,GACbgB,YAAalB,GACbwB,cAAevB,GACfH,UAAWK,GACX6B,uBAAwBlB,GAP1B,SASG,SAACC,EAA4BkB,GAA7B,OACC,qCACGjE,EAED,eAACN,EAAD,YACI+B,GAAqBiB,IAAgB,cAAC,IAAD,CAAiBwB,SAAU5C,KAIhEG,GACA,cAAC,IAAD,CACEsB,aAAcA,EACdoB,OAAQF,EACRG,sBAAuB/B,GACvBgC,uBAAwBxB,GACxBP,oBAAqBA,SAKzBb,GACA,cAAC,IAAD,CACEM,iBAAkBA,GAClBM,WAAYA,GACZ0B,YAAalB,GACbe,UAAWb,EAAaa,UACxBxB,4BAA6BA,KAKjC,cAAC,IAAMkC,OAAP,CAAcC,eAAgB9C,GAAqBe,KAAiBgC,IAAaC,QAAjF,SACE,cAAC,IAAMH,OAAOI,QAAd,CACEC,kBAAmB,CAAEC,QAASrE,GAAUuC,GAAS+B,KAAM,QACvDC,mBAAoB,CAClBF,QAAS,kBAzDD,SAAC7B,GAGrB,GAFAN,GAAgB+B,IAAaC,UAExBlD,EAGH,OAFAkB,GAAgB+B,IAAaO,YAC7BC,YAASC,IAAOC,MAIlB5E,EAASyC,GAAeF,IAgDGsC,CAAcpC,IAC7BqC,OAAQ5C,GACR6C,SAAU5E,EACVoE,KAAMzC,KAAgCkD,IAAiBb,QAAU,aAAejE,EAChF+E,OAAQ,6B,iHC9KlBC,E,4JACJ,WACE,MAA+BC,KAAKC,MAA5B1F,EAAR,EAAQA,SAAa0F,EAArB,iBAEA,OAAO,6CAAOA,GAAP,aAAe1F,S,GAJP2F,iBAQJH,O,qNCLTI,EAAQ,CACZC,SAAU,QAmCGC,IAhCK,SAAC,GASd,IARLC,EAQI,EARJA,QACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,iBAMI,IALJC,MAASC,EAKL,EALKA,KAAMjC,EAKX,EALWA,SAAUkC,EAKrB,EALqBA,MAAUC,EAK/B,iBAJJC,EAII,EAJJA,MACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YACGC,EACC,iBACEC,GAAcH,EAAKI,cAAgBJ,EAAKK,sBAAyBL,EAAKM,QAAUN,EAAKO,UAAYd,EACjGe,EAAU,2BACXV,GADW,IAEdF,SAGF,OACE,eAAC,IAAD,2BAAiBF,GAAjB,IAAmCY,MAAOH,EAAWd,MAAOA,EAA5D,UACE,cAAC,IAAD,CAAYoB,QAASb,EAArB,SAA4BG,IAC5B,cAAC,IAAD,aACEP,QAASA,EACTgB,WAAYA,EACZ7C,SAAUA,EACVsC,YAAaA,EACbJ,MAAOA,GACHK,IAELC,GAAa,cAAC,IAAD,UAAiBH,EAAKM,OAASN,EAAKI,oB,wLC7BlDM,EAAKC,IAAWC,KAAKC,KAYZC,IAVC,SAAC3B,GACf,IAAQ4B,EAAmF5B,EAAnF4B,MAAOtH,EAA4E0F,EAA5E1F,SAAf,EAA2F0F,EAAlE6B,iBAAzB,MAAqC,GAArC,EAAyCC,EAAkD9B,EAAlD8B,MAAOC,EAA2C/B,EAA3C+B,OAAQC,EAAmChC,EAAnCgC,IAAKnC,EAA8BG,EAA9BH,OAAQoC,EAAsBjC,EAAtBiC,SAAalB,EAAlF,YAA2Ff,EAA3F,GAEMK,EAAUkB,EAAGM,EAAW,UAAWD,EAAOI,EAAKD,EAASG,YAAWH,EAAQ,eAAY7E,EAAW4E,EAAO,CAC7GG,aAGF,OAAOhC,gBAAoB+B,EAApB,2BAA8BjB,GAA9B,IAAoCc,UAAWxB,EAAS,cAAeR,GAAU,KAAMvF,K,qBCfhG6H,EAAOC,QAAU,CAAC,QAAU,yBAAyB,GAAK,oBAAoB,GAAK,oBAAoB,GAAK,oBAAoB,GAAK,oBAAoB,OAAS,wBAAwB,MAAQ,uBAAuB,SAAW,0BAA0B,SAAW,0BAA0B,SAAW,0BAA0B,SAAW,0BAA0B,SAAW,0BAA0B,KAAO,sBAAsB,OAAS,wBAAwB,KAAO,sBAAsB,MAAQ,uBAAuB,QAAU,yBAAyB,QAAU,yBAAyB,UAAY,2BAA2B,SAAW,0BAA0B,MAAQ,uBAAuB,MAAQ,yB,uTCGxrBC,EAAYC,YACvBC,YAAa,CACXC,aAAc,CACZC,QAAQ,GAAD,OAAKrI,KAAL,YAAWD,OAEpBuI,WAAY,CACVC,WAAYC,MAEdC,SAAU,CACRC,SAAU,e,OCmBHC,EAAuB,SAAC,GAKW,IAJ9C3F,EAI6C,EAJ7CA,QAI6C,IAH7C4F,mBAG6C,MAH/B,EAG+B,EAF7CnH,EAE6C,EAF7CA,YAE6C,IAD7CoH,iBAC6C,MADjC,EACiC,EACvC5C,EAAUgC,IACVa,EAAWC,cACXC,EAAcC,YAAYC,KAChC,EAAwBtI,mBAAS,IAAjC,mBAAOuI,EAAP,KAAaC,EAAb,KACA,EAA8CxI,mBAAiBiI,GAA/D,mBAAOQ,EAAP,KAAwBC,EAAxB,KACA,EAAoD1I,oBAAkB,GAAtE,mBAAO2I,EAAP,KAA2BC,EAA3B,KAEAC,qBAAU,WACR,IAAIC,GAAY,EAUhB,OATqC,WACnC,IACMtJ,EADeuJ,YAAwBlI,EAAauH,GAC9BY,QAAQC,gBAAgBR,GAAiBS,YACjEJ,GACFN,EAAQhJ,GAIZ2J,GACO,WACLL,GAAY,KAEb,CAACjI,EAAauH,EAAaK,IAE9B,IAAMW,EAAkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB3D,EAAQtC,SAASiG,EAAO3D,OAC9BkD,EAAsBlD,IAAU+C,GAAmB/C,IAAUuC,GAC7DS,EAAmBhD,IAGf4D,EAAe,SAACjH,EAA4BkH,GAChDrB,EACEsB,YAAkB,CAChB3I,cACA4I,GAAI5I,EACJ6I,WAAY,IACZlK,OAAQ+I,EACRoB,QAAStH,EAAaa,UACtB9B,UAAWiB,EAAajB,UACxBwI,cAAevH,EACfwH,oBAAqBC,IAAsBC,mBAC3CR,oBAGJnH,KAGF,OACE,eAAC/C,EAAA,EAAD,CAAgBG,OAAQ+I,EAAM3I,SAAU0J,EAAcvJ,kBAAmB4I,EAAzE,UACE,cAACqB,EAAA,EAAD,CAAa5H,QAASA,EAAS6H,MAAM,qBACrC,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAASC,cAAe,CAAEnC,UAAWQ,EAAgB4B,YAAczK,SAAU0J,EAA7E,SACG,kBACC,eAACgB,EAAA,EAAD,CAAOzD,UAAWxB,EAAQmC,aAA1B,UACE,cAAC+C,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWC,OAAO,SAAlB,6DAEF,eAACF,EAAA,EAAD,CAAK3D,MAAM,SAASC,UAAWxB,EAAQwC,SAAUd,OAAO,KAAxD,UACE,cAAC2D,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,CACE,cAAY,yBACZnF,KA3EW,YA4EXjC,SAAU4F,EACVyB,OAAQ,SAAC7F,GAAD,OACN,mCACE,cAAC8F,EAAA,EAAD,2BAAiB9F,GAAjB,IAAwBM,cAAY,EAApC,SACG,YAAIyF,MAAMC,OAAOhD,KAAeiD,KAAI,SAACC,EAAGC,GAAJ,OACnC,cAACC,EAAA,EAAD,CAAsB1F,MAAK,UAAKyF,EAAQ,GAAxC,SACGA,EAAQ,GADIA,YAOvBE,SAAUC,YAAkBC,IAAUC,IAAeC,YAAS,GAAIC,YAAczD,QAGpF,cAACyC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACH,EAAA,EAAD,CAAW3D,UAAWxB,EAAQqC,WAAYZ,MAAM,UAAU6E,UAAQ,EAACC,KAAK,KAAxE,0BACa5D,EADb,8BChHHtB,EAASa,YAAa,CACjCG,WAAY,CACVZ,MAAO+E,gBACP,MAAO,CACL/E,MAAOgF,cAGXC,UAAW,CACTtE,QAAStI,MAEX6M,UAAW,CACTvE,QAAStI,KACT2I,SAAU,WACVmE,KAAM,EACNC,OAAQ,EACRC,UAAW,aACXC,MAAO,OACPC,eAAgB,WAChBC,UAAU,aAAD,OAAeC,WAE1BC,UAAW,CACTC,OAAQC,KACRC,SAAUC,mBCPRvF,EAAYC,YAAWZ,GAyDdmG,UAvDW,WAA2B,IAAD,EAC5CxH,EAAUgC,IAChB,EAAoCrH,oBAAS,GAA7C,mBAAO8M,EAAP,KAAoBC,EAApB,KACA,YAA6D1E,YAAY2E,YAAzE,QAAyF,GAAzF,IAAQC,QAASpM,OAAjB,MAA+B,GAA/B,EAAmCqM,EAAnC,EAAmCA,OAAnC,IAA2CjF,iBAA3C,MAAuD,EAAvD,EACMkF,EAAU9E,YAAY+E,KAEtBC,EAAc,WAClBN,GAAa,SAACO,GAAD,OAAeA,MAGtBC,EAAeC,cAAfD,WAMR,OAJA1E,qBAAU,WACR0E,EAAWE,IAAgBC,UAC1B,CAACH,IAGF,qCACE,eAACjD,EAAA,EAAD,CAAOzD,UAAWxB,EAAQ0G,UAA1B,UACE,cAACpF,EAAA,EAAD,CAASK,IAAI,KAAb,oCACA,cAACwD,EAAA,EAAD,4DACA,eAACA,EAAA,EAAD,CAAW3D,UAAWxB,EAAQqC,WAAYkE,KAAK,KAA/C,UACE,cAAC9G,EAAA,EAAD,UAAOmD,IADT,WACkC,cAACnD,EAAA,EAAD,WAAa,OAANoI,QAAM,IAANA,OAAA,EAAAA,EAAQS,SAAU,IAD3D,aAGCT,GAAUA,EAAOS,OAAS,GAAKR,GAC9B,cAAC5C,EAAA,EAAD,CAAK1D,UAAWxB,EAAQ2G,UAAxB,SACE,cAAC4B,EAAA,EAAD,CACE/G,UAAWxB,EAAQmH,UACnB1F,MAAM,UACN3B,SAAU,IACVjB,QAASmJ,EACTQ,QAAQ,YALV,yBAYN,cAACC,EAAA,EAAD,CACEC,YAAY,qCACZC,YAAaX,EACbY,KAAMnB,EACN7C,MAAM,gCAJR,SAME,cAAC,EAAD,CACE7H,QAASiL,EACTrF,YAAW,OAAEkF,QAAF,IAAEA,OAAF,EAAEA,EAAQS,OACrB9M,YAAaA,EACboH,UAAWA","file":"static/js/55.19dd267a.chunk.js","sourcesContent":["import { ReactNode, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { extractSafeAddress } from 'src/routes/routes'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport useCanTxExecute from 'src/logic/hooks/useCanTxExecute'\n\ntype Props = {\n  children: ReactNode\n  operation?: number\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  onSubmit: (txParams: TxParameters, delayExecution?: boolean) => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isConfirmDisabled?: boolean\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\nexport const TxModalWrapper = ({\n  children,\n  operation,\n  txData,\n  txValue = '0',\n  txTo,\n  txType,\n  onSubmit,\n  onBack,\n  submitText,\n  isConfirmDisabled,\n}: Props): React.ReactElement => {\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const [manualSafeNonce, setManualSafeNonce] = useState<number | undefined>()\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\n  const safeAddress = extractSafeAddress()\n  const isSpendingLimitTx = isSpendingLimit(txType)\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasMaxPrioFeeFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData,\n    txRecipient: txTo || safeAddress,\n    txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualMaxPrioFee,\n    manualGasLimit,\n    manualSafeNonce,\n    operation,\n  })\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const canTxExecute = useCanTxExecute(undefined, manualSafeNonce)\n  const doExecute = executionApproved && canTxExecute\n\n  const onClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n    const oldSafeTxGas = gasEstimation\n    const newSafeTxGas = txParameters.safeTxGas\n    const newSafeNonce = txParameters.safeNonce\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n\n    if (newSafeNonce) {\n      const newSafeNonceNumber = parseInt(newSafeNonce, 10)\n      setManualSafeNonce(newSafeNonceNumber)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters, !doExecute)\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={doExecute}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeTxGas={gasEstimation}\n      closeEditModalCallback={onClose}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => unknown) => (\n        <>\n          {children}\n\n          <Container>\n            {!isSpendingLimitTx && canTxExecute && <ExecuteCheckbox onChange={setExecutionApproved} />}\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimitTx && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={doExecute}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Container>\n\n          {!isSpendingLimitTx && (\n            <ReviewInfoText\n              gasCostFormatted={gasCostFormatted}\n              isCreation={isCreation}\n              isExecution={doExecute}\n              safeNonce={txParameters.safeNonce}\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\n            />\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimitTx && submitStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isConfirmDisabled,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render(): React.ReactElement {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\n\nconst style = {\n  minWidth: '100%',\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}) => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import classNames from 'classnames/bind'\nimport * as React from 'react'\n\nimport styles from './index.module.scss'\n\nimport { capitalize } from 'src/utils/css'\n\nconst cx = classNames.bind(styles)\n\nconst Heading = (props) => {\n  const { align, children, className = '', color, margin, tag, testId, truncate, ...rest } = props\n\n  const classes = cx(className, 'heading', align, tag, margin ? capitalize(margin, 'margin') : undefined, color, {\n    truncate,\n  })\n\n  return React.createElement(tag, { ...rest, className: classes, 'data-testid': testId || '' }, children)\n}\n\nexport default Heading\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Heading_heading__3Wz9P\",\"h1\":\"Heading_h1__MXfCA\",\"h2\":\"Heading_h2__3X6Ts\",\"h3\":\"Heading_h3__1k2fD\",\"h4\":\"Heading_h4__1YCmR\",\"center\":\"Heading_center__28MHY\",\"right\":\"Heading_right__1fQM1\",\"truncate\":\"Heading_truncate__2Lq93\",\"marginSm\":\"Heading_marginSm__13YwX\",\"marginMd\":\"Heading_marginMd__2AnZN\",\"marginLg\":\"Heading_marginLg__2ZfEq\",\"marginXl\":\"Heading_marginXl__3RHt7\",\"soft\":\"Heading_soft__2Zu43\",\"medium\":\"Heading_medium__2X8Z-\",\"dark\":\"Heading_dark__Ds2QB\",\"fancy\":\"Heading_fancy__1Wx6l\",\"warning\":\"Heading_warning__2lrZC\",\"primary\":\"Heading_primary__2hOk2\",\"secondary\":\"Heading_secondary__37lKs\",\"disabled\":\"Heading_disabled__30DjG\",\"error\":\"Heading_error__t5ujr\",\"white\":\"Heading_white__2gkIK\"};","import { createStyles, makeStyles } from '@material-ui/core'\n\nimport { lg, md, sm } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    modalContent: {\n      padding: `${md} ${lg}`,\n    },\n    ownersText: {\n      marginLeft: sm,\n    },\n    inputRow: {\n      position: 'relative',\n    },\n  }),\n)\n","import MenuItem from '@material-ui/core/MenuItem'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport SelectField from 'src/components/forms/SelectField'\nimport { composeValidators, differentFrom, minValue, mustBeInteger, required } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\n\nimport { useStyles } from './style'\n\nconst THRESHOLD_FIELD_NAME = 'threshold'\n\ntype ChangeThresholdModalProps = {\n  onClose: () => void\n  ownersCount?: number\n  safeAddress: string\n  threshold?: number\n}\n\nexport const ChangeThresholdModal = ({\n  onClose,\n  ownersCount = 0,\n  safeAddress,\n  threshold = 1,\n}: ChangeThresholdModalProps): ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\n  const [data, setData] = useState('')\n  const [editedThreshold, setEditedThreshold] = useState<number>(threshold)\n  const [disabledSubmitForm, setDisabledSubmitForm] = useState<boolean>(true)\n\n  useEffect(() => {\n    let isCurrent = true\n    const calculateChangeThresholdData = () => {\n      const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\n      const txData = safeInstance.methods.changeThreshold(editedThreshold).encodeABI()\n      if (isCurrent) {\n        setData(txData)\n      }\n    }\n\n    calculateChangeThresholdData()\n    return () => {\n      isCurrent = false\n    }\n  }, [safeAddress, safeVersion, editedThreshold])\n\n  const handleThreshold = ({ target }) => {\n    const value = parseInt(target.value)\n    setDisabledSubmitForm(value === editedThreshold || value === threshold)\n    setEditedThreshold(value)\n  }\n\n  const handleSubmit = (txParameters: TxParameters, delayExecution: boolean) => {\n    dispatch(\n      createTransaction({\n        safeAddress,\n        to: safeAddress,\n        valueInWei: '0',\n        txData: data,\n        txNonce: txParameters.safeNonce,\n        safeTxGas: txParameters.safeTxGas,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.SETTINGS_CHANGE_TX,\n        delayExecution,\n      }),\n    )\n    onClose()\n  }\n\n  return (\n    <TxModalWrapper txData={data} onSubmit={handleSubmit} isConfirmDisabled={disabledSubmitForm}>\n      <ModalHeader onClose={onClose} title=\"Change threshold\" />\n      <Hairline />\n      <GnoForm initialValues={{ threshold: editedThreshold.toString() }} onSubmit={handleSubmit}>\n        {() => (\n          <Block className={classes.modalContent}>\n            <Row>\n              <Paragraph weight=\"bolder\">Any transaction requires the confirmation of:</Paragraph>\n            </Row>\n            <Row align=\"center\" className={classes.inputRow} margin=\"xl\">\n              <Col xs={2}>\n                <Field\n                  data-testid=\"threshold-select-input\"\n                  name={THRESHOLD_FIELD_NAME}\n                  onChange={handleThreshold}\n                  render={(props) => (\n                    <>\n                      <SelectField {...props} disableError>\n                        {[...Array(Number(ownersCount))].map((x, index) => (\n                          <MenuItem key={index} value={`${index + 1}`}>\n                            {index + 1}\n                          </MenuItem>\n                        ))}\n                      </SelectField>\n                    </>\n                  )}\n                  validate={composeValidators(required, mustBeInteger, minValue(1), differentFrom(threshold))}\n                />\n              </Col>\n              <Col xs={10}>\n                <Paragraph className={classes.ownersText} color=\"primary\" noMargin size=\"lg\">\n                  {`out of ${ownersCount} owner(s)`}\n                </Paragraph>\n              </Col>\n            </Row>\n          </Block>\n        )}\n      </GnoForm>\n    </TxModalWrapper>\n  )\n}\n","import { createStyles } from '@material-ui/core/styles'\nimport { border, fontColor, lg, secondaryText, smallFontSize, xl } from 'src/theme/variables'\n\nexport const styles = createStyles({\n  ownersText: {\n    color: secondaryText,\n    '& b': {\n      color: fontColor,\n    },\n  },\n  container: {\n    padding: lg,\n  },\n  buttonRow: {\n    padding: lg,\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    boxSizing: 'border-box',\n    width: '100%',\n    justifyContent: 'flex-end',\n    borderTop: `2px solid ${border}`,\n  },\n  modifyBtn: {\n    height: xl,\n    fontSize: smallFontSize,\n  },\n})\n","import { makeStyles } from '@material-ui/core/styles'\nimport { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Button from 'src/components/layout/Button'\nimport Heading from 'src/components/layout/Heading'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { useAnalytics, SETTINGS_EVENTS } from 'src/utils/googleAnalytics'\n\nimport { ChangeThresholdModal } from './ChangeThreshold'\nimport { styles } from './style'\n\nconst useStyles = makeStyles(styles)\n\nconst ThresholdSettings = (): React.ReactElement => {\n  const classes = useStyles()\n  const [isModalOpen, setModalOpen] = useState(false)\n  const { address: safeAddress = '', owners, threshold = 1 } = useSelector(currentSafe) ?? {}\n  const granted = useSelector(grantedSelector)\n\n  const toggleModal = () => {\n    setModalOpen((prevOpen) => !prevOpen)\n  }\n\n  const { trackEvent } = useAnalytics()\n\n  useEffect(() => {\n    trackEvent(SETTINGS_EVENTS.OWNERS)\n  }, [trackEvent])\n\n  return (\n    <>\n      <Block className={classes.container}>\n        <Heading tag=\"h2\">Required Confirmations</Heading>\n        <Paragraph>Any transaction requires the confirmation of:</Paragraph>\n        <Paragraph className={classes.ownersText} size=\"lg\">\n          <Bold>{threshold}</Bold> out of <Bold>{owners?.length || 0}</Bold> owners\n        </Paragraph>\n        {owners && owners.length > 1 && granted && (\n          <Row className={classes.buttonRow}>\n            <Button\n              className={classes.modifyBtn}\n              color=\"primary\"\n              minWidth={120}\n              onClick={toggleModal}\n              variant=\"contained\"\n            >\n              Change\n            </Button>\n          </Row>\n        )}\n      </Block>\n      <Modal\n        description=\"Change Required Confirmations Form\"\n        handleClose={toggleModal}\n        open={isModalOpen}\n        title=\"Change Required Confirmations\"\n      >\n        <ChangeThresholdModal\n          onClose={toggleModal}\n          ownersCount={owners?.length}\n          safeAddress={safeAddress}\n          threshold={threshold}\n        />\n      </Modal>\n    </>\n  )\n}\n\nexport default ThresholdSettings\n"],"sourceRoot":""}